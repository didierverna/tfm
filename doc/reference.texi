\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2018-2021, 2024, 2025 Didier Verna

@c This file is part of TFM.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 4.0 beta 3 "William Riker"
@c on Sat Jan 04 16:25:02 2025 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename tfm-reference.info
@settitle The TFM Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The TFM Reference Manual, version 2.0 "Eiad Sans Serif".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@tpindex @t{\name\}
@tpindex Module, @t{\name\}
@end macro

@c Files
@macro fileindex{name}
@tpindex @t{\name\}
@tpindex File, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro expandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro combinationsubindex{name}
@findex @r{Method Combination, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* TFM Reference Manual: (tfm-reference). The TFM Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2018-2021@comma{} 2024@comma{} 2025 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The TFM Reference Manual
@subtitle TeX Font Metrics, version 2.0 "Eiad Sans Serif"

@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 4.0 beta 3 "William Riker" on Sat Jan 04 16:25:02 2025 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The TFM Reference Manual
This is the TFM Reference Manual, version 2.0 "Eiad Sans Serif",
generated automatically by Declt version 4.0 beta 3 "William Riker"
on Sat Jan 04 16:25:02 2025 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What TFM is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro tfm
@sc{Tfm}
@end macro

@macro cl
Common-Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@tfm{} is a @cl{} interface to the @TeX{} Font Metrics format. It decodes the
contents of @code{tfm} files, and returns an abstract data structure storing
the corresponding font information in an easily accessible way.

This is the @tfm{} Reference Manual.
@ifinfo
See @xref{Top, , The @tfm{} User Manual, tfm-user},
@end ifinfo
@ifhtml
See @xref{Top, , The @tfm{} User Manual, user},
@end ifhtml
@ifnotinfo
@ifnothtml
@xref{Top, , , user, The @tfm{} User Manual},
@end ifnothtml
@end ifnotinfo
for a more human-readable guide to using @tfm{}.



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net․didierverna․tfm system::
* The net․didierverna․tfm․core system::
* The net․didierverna․tfm․setup system::
@end menu


@c ------------------------------
@c The net.didierverna.tfm system
@c ------------------------------
@node The net․didierverna․tfm system, The net․didierverna․tfm․core system, Systems, Systems
@section @t{net.didierverna.tfm}
@anchor{❨0❩}@c
@systemindex{net.didierverna.tfm}@c
A Common Lisp interface to the TeX Font Metrics format
@table @strong
@item Long Name
TeX Font Metrics
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Long Description

TFM (for TeX Font Metrics) is the standard font description format used by
TeX. The TFM library parses and decodes TFM files into an abstract data
structure@comma{} providing easy access to the corresponding font information in
Common Lisp.
@item Version
2.0
@item Dependency
@ref{❨1❩, , @t{net.didierverna.tfm.core}}@: (system).
@item Source
@ref{❨5❩, , @t{net.didierverna.tfm.asd}}.
@end table


@c -----------------------------------
@c The net.didierverna.tfm.core system
@c -----------------------------------
@node The net․didierverna․tfm․core system, The net․didierverna․tfm․setup system, The net․didierverna․tfm system, Systems
@section @t{net.didierverna.tfm.core}
@anchor{❨1❩}@c
@systemindex{net.didierverna.tfm.core}@c
TeX Font Metrics@comma{} core library
@table @strong
@item Long Name
TFM Core
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Long Description

The TeX Font Metrics core library provides the main functionality of TFM.
For a more complete description of TFM@comma{} see the `net.didierverna.tfm' system.
@item Version
2.0
@item Dependency
@ref{❨2❩, , @t{net.didierverna.tfm.setup}}@: (system).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨8❩, , @t{package.lisp}}@: (file).
@item
@ref{❨3❩, , @t{src}}@: (module).
@end itemize
@end table


@c ------------------------------------
@c The net.didierverna.tfm.setup system
@c ------------------------------------
@node The net․didierverna․tfm․setup system, , The net․didierverna․tfm․core system, Systems
@section @t{net.didierverna.tfm.setup}
@anchor{❨2❩}@c
@systemindex{net.didierverna.tfm.setup}@c
TFM's preload setup library
@table @strong
@item Long Name
TeX Font Metrics@comma{} setup library
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Long Description

The TFM setup library provides support for various preload configuration
parameters and meta-utilities. For a more complete description of TFM@comma{}
see the `net.didierverna.tfm' system.
@item Version
2.0
@item Dependency
@t{named-readtables}@: (system).
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Child Components
@itemize @bullet
@item
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item
@ref{❨4❩, , @t{src}}@: (module).
@end itemize
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net․didierverna․tfm․core/src module::
* The net․didierverna․tfm․setup/src module::
@end menu


@c ---------------------------------------
@c The net.didierverna.tfm.core/src module
@c ---------------------------------------
@node The net․didierverna․tfm․core/src module, The net․didierverna․tfm․setup/src module, Modules, Modules
@section @t{net.didierverna.tfm.core/src}
@anchor{❨3❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨8❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨1❩, , @t{net.didierverna.tfm.core}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨9❩, , @t{util.lisp}}@: (file).
@item
@ref{❨10❩, , @t{intermediate.lisp}}@: (file).
@item
@ref{❨11❩, , @t{character.lisp}}@: (file).
@item
@ref{❨12❩, , @t{font.lisp}}@: (file).
@item
@ref{❨13❩, , @t{file.lisp}}@: (file).
@end itemize
@end table


@c ----------------------------------------
@c The net.didierverna.tfm.setup/src module
@c ----------------------------------------
@node The net․didierverna․tfm․setup/src module, , The net․didierverna․tfm․core/src module, Modules
@section @t{net.didierverna.tfm.setup/src}
@anchor{❨4❩}@c
@moduleindex{src}@c
@table @strong
@item Dependency
@ref{❨14❩, , @t{package.lisp}}@: (file).
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.tfm.setup}}@: (system).
@item Child Components
@itemize @bullet
@item
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item
@ref{❨17❩, , @t{version.lisp}}@: (file).
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net․didierverna․tfm/net․didierverna․tfm․asd file::
* The net․didierverna․tfm․core/net․didierverna․tfm․core․asd file::
* The net․didierverna․tfm․setup/net․didierverna․tfm․setup․asd file::
* The net․didierverna․tfm․core/package․lisp file::
* The net․didierverna․tfm․core/src/util․lisp file::
* The net․didierverna․tfm․core/src/intermediate․lisp file::
* The net․didierverna․tfm․core/src/character․lisp file::
* The net․didierverna․tfm․core/src/font․lisp file::
* The net․didierverna․tfm․core/src/file․lisp file::
* The net․didierverna․tfm․setup/package․lisp file::
* The net․didierverna․tfm․setup/src/configuration․lisp file::
* The net․didierverna․tfm․setup/src/readtable․lisp file::
* The net․didierverna․tfm․setup/src/version․lisp file::
@end menu

@node The net․didierverna․tfm/net․didierverna․tfm․asd file, The net․didierverna․tfm․core/net․didierverna․tfm․core․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.tfm/net.didierverna.tfm.asd}
@anchor{❨5❩}@c
@fileindex{net.didierverna.tfm.asd}@c
@table @strong
@item Source
@ref{❨5❩, , @t{net.didierverna.tfm.asd}}.
@item Parent Component
@ref{❨0❩, , @t{net.didierverna.tfm}}@: (system).
@item ASDF Systems
@ref{❨0❩, , @t{net.didierverna.tfm}}.
@end table

@node The net․didierverna․tfm․core/net․didierverna․tfm․core․asd file, The net․didierverna․tfm․setup/net․didierverna․tfm․setup․asd file, The net․didierverna․tfm/net․didierverna․tfm․asd file, Lisp files
@subsection @t{net.didierverna.tfm.core/net.didierverna.tfm.core.asd}
@anchor{❨6❩}@c
@fileindex{net.didierverna.tfm.core.asd}@c
@table @strong
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨1❩, , @t{net.didierverna.tfm.core}}@: (system).
@item ASDF Systems
@ref{❨1❩, , @t{net.didierverna.tfm.core}}.
@end table

@node The net․didierverna․tfm․setup/net․didierverna․tfm․setup․asd file, The net․didierverna․tfm․core/package․lisp file, The net․didierverna․tfm․core/net․didierverna․tfm․core․asd file, Lisp files
@subsection @t{net.didierverna.tfm.setup/net.didierverna.tfm.setup.asd}
@anchor{❨7❩}@c
@fileindex{net.didierverna.tfm.setup.asd}@c
@table @strong
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.tfm.setup}}@: (system).
@item ASDF Systems
@ref{❨2❩, , @t{net.didierverna.tfm.setup}}.
@end table

@node The net․didierverna․tfm․core/package․lisp file, The net․didierverna․tfm․core/src/util․lisp file, The net․didierverna․tfm․setup/net․didierverna․tfm․setup․asd file, Lisp files
@subsection @t{net.didierverna.tfm.core/package.lisp}
@anchor{❨8❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨1❩, , @t{net.didierverna.tfm.core}}@: (system).
@item Packages
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Public Interface
@ref{❨326❩, , @t{nickname-package}}@: (function).
@end table

@node The net․didierverna․tfm․core/src/util․lisp file, The net․didierverna․tfm․core/src/intermediate․lisp file, The net․didierverna․tfm․core/package․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/util.lisp}
@anchor{❨9❩}@c
@fileindex{util.lisp}@c
@table @strong
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨234❩, , @t{context}}@: (reader method).
@item
@ref{❨235❩, , @t{context}}@: (class).
@item
@ref{❨426❩, , @t{context-string}}@: (generic function).
@item
@ref{❨451❩, , @t{fix-word-overflow}}@: (condition).
@item
@ref{❨421❩, , @t{invalid-padded-string}}@: (condition).
@item
@ref{❨193❩, , @t{invalid-padded-string-length}}@: (condition).
@item
@ref{❨200❩, , @t{overflow}}@: (reader method).
@item
@ref{❨60❩, , @t{pad}}@: (reader method).
@item
@ref{❨98❩, , @t{padded-string}}@: (condition).
@item
@ref{❨43❩, , @t{padded-string-overflow}}@: (condition).
@item
@ref{❨573❩, , @t{print-object}}@: (method).
@item
@ref{❨574❩, , @t{print-object}}@: (method).
@item
@ref{❨577❩, , @t{print-object}}@: (method).
@item
@ref{❨578❩, , @t{print-object}}@: (method).
@item
@ref{❨590❩, , @t{print-object}}@: (method).
@item
@ref{❨606❩, , @t{print-object}}@: (method).
@item
@ref{❨608❩, , @t{print-object}}@: (method).
@item
@ref{❨209❩, , @t{section}}@: (reader method).
@item
@ref{❨37❩, , @t{str}}@: (reader method).
@item
@ref{❨206❩, , @t{tfm}}@: (condition).
@item
@ref{❨70❩, , @t{tfm-compliance}}@: (condition).
@item
@ref{❨176❩, , @t{tfm-compliance-error}}@: (condition).
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}@: (condition).
@item
@ref{❨40❩, , @t{tfm-error}}@: (condition).
@item
@ref{❨294❩, , @t{tfm-usage}}@: (condition).
@item
@ref{❨291❩, , @t{tfm-usage-error}}@: (condition).
@item
@ref{❨153❩, , @t{tfm-usage-warning}}@: (condition).
@item
@ref{❨154❩, , @t{tfm-warning}}@: (condition).
@item
@ref{❨67❩, , @t{u16-overflow}}@: (condition).
@item
@ref{❨337❩, , @t{value}}@: (reader method).
@item
@ref{❨338❩, , @t{value}}@: (reader method).
@item
@ref{❨339❩, , @t{value}}@: (reader method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨518❩, , @t{*stream*}}@: (special variable).
@item
@ref{❨556❩, , @t{context-format}}@: (function).
@item
@ref{❨525❩, , @t{define-condition-report}}@: (macro).
@item
@ref{❨531❩, , @t{define-constant}}@: (macro).
@item
@ref{❨522❩, , @t{map-slots}}@: (macro).
@item
@ref{❨466❩, , @t{read-fix-word}}@: (function).
@item
@ref{❨527❩, , @t{read-padded-string}}@: (function).
@item
@ref{❨481❩, , @t{read-u16}}@: (function).
@item
@ref{❨463❩, , @t{read-u32}}@: (function).
@item
@ref{❨521❩, , @t{read-u8}}@: (function).
@item
@ref{❨536❩, , @t{remove-keys}}@: (function).
@item
@ref{❨460❩, , @t{with-condition-context}}@: (macro).
@end itemize
@end table

@node The net․didierverna․tfm․core/src/intermediate․lisp file, The net․didierverna․tfm․core/src/character․lisp file, The net․didierverna․tfm․core/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/intermediate.lisp}
@anchor{❨10❩}@c
@fileindex{intermediate.lisp}@c
@table @strong
@item Dependency
@ref{❨9❩, , @t{util.lisp}}@: (file).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨224❩, , @t{char-info}}@: (reader method).
@item
@ref{❨225❩, , @t{char-info}}@: (structure).
@item
@ref{❨604❩, , @t{print-object}}@: (method).
@item
@ref{❨425❩, , @t{remainder}}@: (reader method).
@item
@ref{❨380❩, , @t{spurious-char-info}}@: (condition).
@item
@ref{❨85❩, , @t{tag}}@: (reader method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨550❩, , @t{bot}}@: (reader).
@item
@ref{❨551❩, , @t{(setf bot)}}@: (writer).
@item
@ref{❨494❩, , @t{char-info-p}}@: (function).
@item
@ref{❨513❩, , @t{copy-char-info}}@: (function).
@item
@ref{❨534❩, , @t{copy-exten}}@: (function).
@item
@ref{❨538❩, , @t{copy-lig/kern}}@: (function).
@item
@ref{❨532❩, , @t{depth-index}}@: (reader).
@item
@ref{❨533❩, , @t{(setf depth-index)}}@: (writer).
@item
@ref{❨560❩, , @t{exten}}@: (structure).
@item
@ref{❨519❩, , @t{exten-index}}@: (reader).
@item
@ref{❨520❩, , @t{(setf exten-index)}}@: (writer).
@item
@ref{❨491❩, , @t{exten-p}}@: (function).
@item
@ref{❨511❩, , @t{height-index}}@: (reader).
@item
@ref{❨512❩, , @t{(setf height-index)}}@: (writer).
@item
@ref{❨499❩, , @t{italic-index}}@: (reader).
@item
@ref{❨500❩, , @t{(setf italic-index)}}@: (writer).
@item
@ref{❨543❩, , @t{lig/kern}}@: (structure).
@item
@ref{❨495❩, , @t{lig/kern-index}}@: (reader).
@item
@ref{❨496❩, , @t{(setf lig/kern-index)}}@: (writer).
@item
@ref{❨504❩, , @t{lig/kern-p}}@: (function).
@item
@ref{❨469❩, , @t{make-char-info}}@: (function).
@item
@ref{❨470❩, , @t{make-exten}}@: (function).
@item
@ref{❨510❩, , @t{make-lig/kern}}@: (function).
@item
@ref{❨567❩, , @t{mid}}@: (reader).
@item
@ref{❨568❩, , @t{(setf mid)}}@: (writer).
@item
@ref{❨497❩, , @t{next}}@: (reader).
@item
@ref{❨498❩, , @t{(setf next)}}@: (writer).
@item
@ref{❨483❩, , @t{next-char}}@: (reader).
@item
@ref{❨484❩, , @t{(setf next-char)}}@: (writer).
@item
@ref{❨539❩, , @t{op}}@: (reader).
@item
@ref{❨540❩, , @t{(setf op)}}@: (writer).
@item
@ref{❨565❩, , @t{read-char-info}}@: (function).
@item
@ref{❨482❩, , @t{read-exten}}@: (function).
@item
@ref{❨516❩, , @t{read-lig/kern}}@: (function).
@item
@ref{❨487❩, , @t{rep}}@: (reader).
@item
@ref{❨488❩, , @t{(setf rep)}}@: (writer).
@item
@ref{❨485❩, , @t{rmd}}@: (reader).
@item
@ref{❨486❩, , @t{(setf rmd)}}@: (writer).
@item
@ref{❨541❩, , @t{skip}}@: (reader).
@item
@ref{❨542❩, , @t{(setf skip)}}@: (writer).
@item
@ref{❨502❩, , @t{top}}@: (reader).
@item
@ref{❨503❩, , @t{(setf top)}}@: (writer).
@item
@ref{❨467❩, , @t{width-index}}@: (reader).
@item
@ref{❨468❩, , @t{(setf width-index)}}@: (writer).
@end itemize
@end table

@node The net․didierverna․tfm․core/src/character․lisp file, The net․didierverna․tfm․core/src/font․lisp file, The net․didierverna․tfm․core/src/intermediate․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/character.lisp}
@anchor{❨11❩}@c
@fileindex{character.lisp}@c
@table @strong
@item Dependency
@ref{❨10❩, , @t{intermediate.lisp}}@: (file).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨352❩, , @t{bottom-character}}@: (method).
@item
@ref{❨353❩, , @t{bottom-character}}@: (reader method).
@item
@ref{❨340❩, , @t{character-metrics}}@: (class).
@item
@ref{❨213❩, , @t{chr}}@: (reader method).
@item
@ref{❨459❩, , @t{code}}@: (reader method).
@item
@ref{❨293❩, , @t{depth}}@: (reader method).
@item
@ref{❨385❩, , @t{extensiblep}}@: (function).
@item
@ref{❨112❩, , @t{font}}@: (reader method).
@item
@ref{❨450❩, , @t{height}}@: (reader method).
@item
@ref{❨243❩, , @t{italic-correction}}@: (reader method).
@item
@ref{❨109❩, , @t{middle-character}}@: (method).
@item
@ref{❨110❩, , @t{middle-character}}@: (reader method).
@item
@ref{❨362❩, , @t{next-character}}@: (reader method).
@item
@ref{❨187❩, , @t{not-extensible}}@: (condition).
@item
@ref{❨589❩, , @t{print-object}}@: (method).
@item
@ref{❨602❩, , @t{print-object}}@: (method).
@item
@ref{❨609❩, , @t{print-object}}@: (method).
@item
@ref{❨441❩, , @t{repeated-character}}@: (method).
@item
@ref{❨442❩, , @t{repeated-character}}@: (reader method).
@item
@ref{❨308❩, , @t{top-character}}@: (method).
@item
@ref{❨309❩, , @t{top-character}}@: (reader method).
@item
@ref{❨325❩, , @t{width}}@: (reader method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨526❩, , @t{+character-metrics-dimension-slots+}}@: (constant).
@item
@ref{❨558❩, , @t{define-extension-recipe-pseudo-accessor}}@: (macro).
@item
@ref{❨474❩, , @t{extension-recipe}}@: (reader method).
@item
@ref{❨475❩, , @t{extension-recipe}}@: (class).
@item
@ref{❨535❩, , @t{make-character-metrics}}@: (function).
@item
@ref{❨472❩, , @t{make-extension-recipe}}@: (function).
@item
@ref{❨461❩, , @t{map-character-metrics-dimension-slots}}@: (macro).
@end itemize
@end table

@node The net․didierverna․tfm․core/src/font․lisp file, The net․didierverna․tfm․core/src/file․lisp file, The net․didierverna․tfm․core/src/character․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/font.lisp}
@anchor{❨12❩}@c
@fileindex{font.lisp}@c
@table @strong
@item Dependency
@ref{❨11❩, , @t{character.lisp}}@: (file).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨95❩, , @t{7bits-safe}}@: (reader method).
@item
@ref{❨97❩, , @t{axis-height}}@: (reader method).
@item
@ref{❨395❩, , @t{big-op-spacing1}}@: (reader method).
@item
@ref{❨350❩, , @t{big-op-spacing2}}@: (reader method).
@item
@ref{❨211❩, , @t{big-op-spacing3}}@: (reader method).
@item
@ref{❨320❩, , @t{big-op-spacing4}}@: (reader method).
@item
@ref{❨198❩, , @t{big-op-spacing5}}@: (reader method).
@item
@ref{❨56❩, , @t{boundary-character}}@: (reader method).
@item
@ref{❨53❩, , @t{character-count}}@: (reader method).
@item
@ref{❨257❩, , @t{character1}}@: (reader method).
@item
@ref{❨302❩, , @t{character2}}@: (reader method).
@item
@ref{❨420❩, , @t{characters}}@: (reader method).
@item
@ref{❨288❩, , @t{checksum}}@: (reader method).
@item
@ref{❨458❩, , @t{code}}@: (reader method).
@item
@ref{❨184❩, , @t{composite}}@: (reader method).
@item
@ref{❨91❩, , @t{default-rule-thickness}}@: (reader method).
@item
@ref{❨81❩, , @t{delete-after}}@: (reader method).
@item
@ref{❨316❩, , @t{delete-before}}@: (reader method).
@item
@ref{❨311❩, , @t{delim1}}@: (reader method).
@item
@ref{❨107❩, , @t{delim2}}@: (reader method).
@item
@ref{❨370❩, , @t{denom1}}@: (reader method).
@item
@ref{❨282❩, , @t{denom2}}@: (reader method).
@item
@ref{❨100❩, , @t{design-size}}@: (reader method).
@item
@ref{❨102❩, , @t{(setf design-size)}}@: (method).
@item
@ref{❨103❩, , @t{(setf design-size)}}@: (method).
@item
@ref{❨104❩, , @t{(setf design-size)}}@: (method).
@item
@ref{❨105❩, , @t{(setf design-size)}}@: (writer method).
@item
@ref{❨173❩, , @t{different-fonts}}@: (condition).
@item
@ref{❨379❩, , @t{em}}@: (reader method).
@item
@ref{❨444❩, , @t{encoding}}@: (reader method).
@item
@ref{❨255❩, , @t{ex}}@: (reader method).
@item
@ref{❨180❩, , @t{expansion}}@: (reader method).
@item
@ref{❨372❩, , @t{extra-space}}@: (reader method).
@item
@ref{❨46❩, , @t{face-code}}@: (reader method).
@item
@ref{❨298❩, , @t{face-number}}@: (reader method).
@item
@ref{❨93❩, , @t{family}}@: (reader method).
@item
@ref{❨203❩, , @t{file}}@: (reader method).
@item
@ref{❨113❩, , @t{font}}@: (class).
@item
@ref{❨54❩, , @t{freeze}}@: (function).
@item
@ref{❨313❩, , @t{frozen}}@: (reader method).
@item
@ref{❨72❩, , @t{get-character}}@: (function).
@item
@ref{❨358❩, , @t{get-kern}}@: (function).
@item
@ref{❨236❩, , @t{get-ligature}}@: (function).
@item
@ref{❨583❩, , @t{initialize-instance}}@: (method).
@item
@ref{❨182❩, , @t{interword-shrink}}@: (reader method).
@item
@ref{❨271❩, , @t{interword-space}}@: (reader method).
@item
@ref{❨269❩, , @t{interword-stretch}}@: (reader method).
@item
@ref{❨258❩, , @t{invalid-character-code}}@: (condition).
@item
@ref{❨447❩, , @t{invalid-custom-design-size}}@: (condition).
@item
@ref{❨57❩, , @t{invalid-custom-name}}@: (condition).
@item
@ref{❨432❩, , @t{ligature}}@: (class).
@item
@ref{❨146❩, , @t{math-extension-font}}@: (class).
@item
@ref{❨400❩, , @t{math-symbols-font}}@: (class).
@item
@ref{❨306❩, , @t{max-code}}@: (reader method).
@item
@ref{❨360❩, , @t{min-code}}@: (reader method).
@item
@ref{❨252❩, , @t{name}}@: (reader method).
@item
@ref{❨253❩, , @t{name}}@: (reader method).
@item
@ref{❨190❩, , @t{num1}}@: (reader method).
@item
@ref{❨374❩, , @t{num2}}@: (reader method).
@item
@ref{❨62❩, , @t{num3}}@: (reader method).
@item
@ref{❨277❩, , @t{original-design-size}}@: (reader method).
@item
@ref{❨328❩, , @t{parameters}}@: (reader method).
@item
@ref{❨318❩, , @t{pass-over}}@: (reader method).
@item
@ref{❨576❩, , @t{print-object}}@: (method).
@item
@ref{❨584❩, , @t{print-object}}@: (method).
@item
@ref{❨588❩, , @t{print-object}}@: (method).
@item
@ref{❨595❩, , @t{print-object}}@: (method).
@item
@ref{❨607❩, , @t{print-object}}@: (method).
@item
@ref{❨417❩, , @t{slant}}@: (reader method).
@item
@ref{❨145❩, , @t{slope}}@: (reader method).
@item
@ref{❨399❩, , @t{sub1}}@: (reader method).
@item
@ref{❨393❩, , @t{sub2}}@: (reader method).
@item
@ref{❨192❩, , @t{subdrop}}@: (reader method).
@item
@ref{❨159❩, , @t{sup1}}@: (reader method).
@item
@ref{❨275❩, , @t{sup2}}@: (reader method).
@item
@ref{❨39❩, , @t{sup3}}@: (reader method).
@item
@ref{❨357❩, , @t{supdrop}}@: (reader method).
@item
@ref{❨314❩, , @t{unfreeze}}@: (function).
@item
@ref{❨336❩, , @t{value}}@: (reader method).
@item
@ref{❨186❩, , @t{weight}}@: (reader method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨515❩, , @t{+font-dimension-slots+}}@: (constant).
@item
@ref{❨530❩, , @t{+math-extension-font-dimension-slots+}}@: (constant).
@item
@ref{❨559❩, , @t{+math-symbols-font-dimension-slots+}}@: (constant).
@item
@ref{❨493❩, , @t{apply-ligature}}@: (function).
@item
@ref{❨528❩, , @t{code-character}}@: (function).
@item
@ref{❨529❩, , @t{(setf code-character)}}@: (function).
@item
@ref{❨490❩, , @t{kerns}}@: (reader method).
@item
@ref{❨465❩, , @t{ligatures}}@: (reader method).
@item
@ref{❨480❩, , @t{make-ligature}}@: (function).
@item
@ref{❨462❩, , @t{map-font-dimension-slots}}@: (macro).
@item
@ref{❨557❩, , @t{map-math-extension-font-dimension-slots}}@: (macro).
@item
@ref{❨548❩, , @t{map-math-symbols-font-dimension-slots}}@: (macro).
@item
@ref{❨552❩, , @t{scale}}@: (generic function).
@item
@ref{❨514❩, , @t{set-kern}}@: (function).
@item
@ref{❨566❩, , @t{set-ligature}}@: (function).
@end itemize
@end table

@node The net․didierverna․tfm․core/src/file․lisp file, The net․didierverna․tfm․setup/package․lisp file, The net․didierverna․tfm․core/src/font․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/file.lisp}
@anchor{❨13❩}@c
@fileindex{file.lisp}@c
@table @strong
@item Dependency
@ref{❨12❩, , @t{font.lisp}}@: (file).
@item Source
@ref{❨6❩, , @t{net.didierverna.tfm.core.asd}}.
@item Parent Component
@ref{❨3❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨64❩, , @t{actual-size}}@: (reader method).
@item
@ref{❨439❩, , @t{bc}}@: (reader method).
@item
@ref{❨41❩, , @t{char-info-table-context}}@: (class).
@item
@ref{❨296❩, , @t{character-list}}@: (reader method).
@item
@ref{❨239❩, , @t{character-list-cycle}}@: (condition).
@item
@ref{❨419❩, , @t{characters}}@: (reader method).
@item
@ref{❨457❩, , @t{code}}@: (reader method).
@item
@ref{❨427❩, , @t{context-string}}@: (method).
@item
@ref{❨428❩, , @t{context-string}}@: (method).
@item
@ref{❨429❩, , @t{context-string}}@: (method).
@item
@ref{❨391❩, , @t{declared-size}}@: (reader method).
@item
@ref{❨273❩, , @t{ec}}@: (reader method).
@item
@ref{❨155❩, , @t{extended-tfm}}@: (condition).
@item
@ref{❨202❩, , @t{file}}@: (reader method).
@item
@ref{❨299❩, , @t{file-overflow}}@: (condition).
@item
@ref{❨375❩, , @t{file-size-mixin}}@: (condition).
@item
@ref{❨386❩, , @t{file-underflow}}@: (condition).
@item
@ref{❨455❩, , @t{fmt}}@: (reader method).
@item
@ref{❨397❩, , @t{index}}@: (reader method).
@item
@ref{❨86❩, , @t{invalid-character-range}}@: (condition).
@item
@ref{❨278❩, , @t{invalid-design-size}}@: (condition).
@item
@ref{❨49❩, , @t{invalid-header-length}}@: (condition).
@item
@ref{❨321❩, , @t{invalid-ligature-opcode}}@: (condition).
@item
@ref{❨366❩, , @t{invalid-original-design-size}}@: (condition).
@item
@ref{❨160❩, , @t{invalid-section-lengths}}@: (condition).
@item
@ref{❨260❩, , @t{invalid-table-index}}@: (condition).
@item
@ref{❨73❩, , @t{invalid-table-length}}@: (condition).
@item
@ref{❨214❩, , @t{invalid-table-start}}@: (condition).
@item
@ref{❨364❩, , @t{largest}}@: (reader method).
@item
@ref{❨365❩, , @t{largest}}@: (reader method).
@item
@ref{❨290❩, , @t{lf}}@: (reader method).
@item
@ref{❨304❩, , @t{lh}}@: (reader method).
@item
@ref{❨431❩, , @t{ligature}}@: (reader method).
@item
@ref{❨264❩, , @t{ligature-cycle}}@: (condition).
@item
@ref{❨143❩, , @t{load-font}}@: (function).
@item
@ref{❨249❩, , @t{name}}@: (reader method).
@item
@ref{❨250❩, , @t{name}}@: (reader method).
@item
@ref{❨251❩, , @t{name}}@: (reader method).
@item
@ref{❨245❩, , @t{nc}}@: (reader method).
@item
@ref{❨355❩, , @t{nd}}@: (reader method).
@item
@ref{❨389❩, , @t{ne}}@: (reader method).
@item
@ref{❨205❩, , @t{nh}}@: (reader method).
@item
@ref{❨79❩, , @t{ni}}@: (reader method).
@item
@ref{❨284❩, , @t{nk}}@: (reader method).
@item
@ref{❨222❩, , @t{nl}}@: (reader method).
@item
@ref{❨285❩, , @t{no-boundary-character}}@: (condition).
@item
@ref{❨66❩, , @t{np}}@: (reader method).
@item
@ref{❨83❩, , @t{nw}}@: (reader method).
@item
@ref{❨247❩, , @t{opcode}}@: (reader method).
@item
@ref{❨237❩, , @t{padded-string-context}}@: (class).
@item
@ref{❨575❩, , @t{print-object}}@: (method).
@item
@ref{❨579❩, , @t{print-object}}@: (method).
@item
@ref{❨580❩, , @t{print-object}}@: (method).
@item
@ref{❨586❩, , @t{print-object}}@: (method).
@item
@ref{❨587❩, , @t{print-object}}@: (method).
@item
@ref{❨592❩, , @t{print-object}}@: (method).
@item
@ref{❨594❩, , @t{print-object}}@: (method).
@item
@ref{❨596❩, , @t{print-object}}@: (method).
@item
@ref{❨597❩, , @t{print-object}}@: (method).
@item
@ref{❨598❩, , @t{print-object}}@: (method).
@item
@ref{❨599❩, , @t{print-object}}@: (method).
@item
@ref{❨600❩, , @t{print-object}}@: (method).
@item
@ref{❨601❩, , @t{print-object}}@: (method).
@item
@ref{❨603❩, , @t{print-object}}@: (method).
@item
@ref{❨605❩, , @t{print-object}}@: (method).
@item
@ref{❨178❩, , @t{size}}@: (reader method).
@item
@ref{❨48❩, , @t{smallest}}@: (reader method).
@item
@ref{❨217❩, , @t{table-context}}@: (class).
@item
@ref{❨445❩, , @t{tfm-table-error}}@: (condition).
@item
@ref{❨330❩, , @t{value}}@: (reader method).
@item
@ref{❨331❩, , @t{value}}@: (reader method).
@item
@ref{❨332❩, , @t{value}}@: (reader method).
@item
@ref{❨333❩, , @t{value}}@: (reader method).
@item
@ref{❨334❩, , @t{value}}@: (reader method).
@item
@ref{❨335❩, , @t{value}}@: (reader method).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨517❩, , @t{%run-ligature/kerning-program}}@: (function).
@item
@ref{❨537❩, , @t{font-extension-recipe}}@: (function).
@item
@ref{❨549❩, , @t{load-tfm-font}}@: (function).
@item
@ref{❨501❩, , @t{parse-character-information}}@: (function).
@item
@ref{❨524❩, , @t{parse-header}}@: (function).
@item
@ref{❨505❩, , @t{parse-parameters}}@: (generic function).
@item
@ref{❨523❩, , @t{run-ligature/kerning-program}}@: (function).
@item
@ref{❨471❩, , @t{table-aref}}@: (function).
@item
@ref{❨492❩, , @t{tref}}@: (macro).
@end itemize
@end table

@node The net․didierverna․tfm․setup/package․lisp file, The net․didierverna․tfm․setup/src/configuration․lisp file, The net․didierverna․tfm․core/src/file․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.setup/package.lisp}
@anchor{❨14❩}@c
@fileindex{package.lisp}@c
@table @strong
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨2❩, , @t{net.didierverna.tfm.setup}}@: (system).
@item Packages
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@end table

@node The net․didierverna․tfm․setup/src/configuration․lisp file, The net․didierverna․tfm․setup/src/readtable․lisp file, The net․didierverna․tfm․setup/package․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.setup/src/configuration.lisp}
@anchor{❨15❩}@c
@fileindex{configuration.lisp}@c
@table @strong
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨4❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨26❩, , @t{configuration}}@: (function).
@item
@ref{❨28❩, , @t{configure}}@: (function).
@end itemize
@item Internals
@ref{❨31❩, , @t{*configuration*}}@: (special variable).
@end table

@node The net․didierverna․tfm․setup/src/readtable․lisp file, The net․didierverna․tfm․setup/src/version․lisp file, The net․didierverna․tfm․setup/src/configuration․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.setup/src/readtable.lisp}
@anchor{❨16❩}@c
@fileindex{readtable.lisp}@c
@table @strong
@item Dependency
@ref{❨15❩, , @t{configuration.lisp}}@: (file).
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨4❩, , @t{src}}@: (module).
@item Internals
@itemize @bullet
@item
@ref{❨32❩, , @t{clindent}}@: (function).
@item
@ref{❨33❩, , @t{defindent}}@: (macro).
@item
@ref{❨29❩, , @t{i-reader}}@: (function).
@item
@ref{❨35❩, , @t{~-reader}}@: (function).
@end itemize
@end table

@node The net․didierverna․tfm․setup/src/version․lisp file, , The net․didierverna․tfm․setup/src/readtable․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.setup/src/version.lisp}
@anchor{❨17❩}@c
@fileindex{version.lisp}@c
@table @strong
@item Dependency
@ref{❨16❩, , @t{readtable.lisp}}@: (file).
@item Source
@ref{❨7❩, , @t{net.didierverna.tfm.setup.asd}}.
@item Parent Component
@ref{❨4❩, , @t{src}}@: (module).
@item Public Interface
@itemize @bullet
@item
@ref{❨20❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨23❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨25❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨22❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨24❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨21❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨27❩, , @t{version}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨34❩, , @t{%version}}@: (function).
@item
@ref{❨30❩, , @t{release-status-number}}@: (function).
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net․didierverna․tfm․setup package::
* The net․didierverna․tfm package::
@end menu


@c -------------------------------------
@c The net.didierverna.tfm.setup package
@c -------------------------------------
@node The net․didierverna․tfm․setup package, The net․didierverna․tfm package, Packages, Packages
@section @t{net.didierverna.tfm.setup}
@anchor{❨18❩}@c
@packageindex{net.didierverna.tfm.setup}@c
The TFM setup library's package.
@table @strong
@item Source
@ref{❨14❩, , @t{package.lisp}}.
@item Use List
@t{common-lisp}.
@item Used By List
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Public Interface
@itemize @bullet
@item
@ref{❨20❩, , @t{*copyright-years*}}@: (special variable).
@item
@ref{❨23❩, , @t{*release-major-level*}}@: (special variable).
@item
@ref{❨25❩, , @t{*release-minor-level*}}@: (special variable).
@item
@ref{❨22❩, , @t{*release-name*}}@: (special variable).
@item
@ref{❨24❩, , @t{*release-status*}}@: (special variable).
@item
@ref{❨21❩, , @t{*release-status-level*}}@: (special variable).
@item
@ref{❨26❩, , @t{configuration}}@: (function).
@item
@ref{❨28❩, , @t{configure}}@: (function).
@item
@ref{❨27❩, , @t{version}}@: (function).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨34❩, , @t{%version}}@: (function).
@item
@ref{❨31❩, , @t{*configuration*}}@: (special variable).
@item
@ref{❨32❩, , @t{clindent}}@: (function).
@item
@ref{❨33❩, , @t{defindent}}@: (macro).
@item
@ref{❨29❩, , @t{i-reader}}@: (function).
@item
@ref{❨30❩, , @t{release-status-number}}@: (function).
@item
@ref{❨35❩, , @t{~-reader}}@: (function).
@end itemize
@end table


@c -------------------------------
@c The net.didierverna.tfm package
@c -------------------------------
@node The net․didierverna․tfm package, , The net․didierverna․tfm․setup package, Packages
@section @t{net.didierverna.tfm}
@anchor{❨19❩}@c
@packageindex{net.didierverna.tfm}@c
The TeX Font Metrics package.
@table @strong
@item Source
@ref{❨8❩, , @t{package.lisp}}.
@item Nickname
@t{tfm}
@item Use List
@itemize @bullet
@item
@t{common-lisp}.
@item
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@end itemize
@item Public Interface
@itemize @bullet
@item
@ref{❨94❩, , @t{7bits-safe}}@: (generic reader).
@item
@ref{❨63❩, , @t{actual-size}}@: (generic reader).
@item
@ref{❨96❩, , @t{axis-height}}@: (generic reader).
@item
@ref{❨438❩, , @t{bc}}@: (generic reader).
@item
@ref{❨394❩, , @t{big-op-spacing1}}@: (generic reader).
@item
@ref{❨349❩, , @t{big-op-spacing2}}@: (generic reader).
@item
@ref{❨210❩, , @t{big-op-spacing3}}@: (generic reader).
@item
@ref{❨319❩, , @t{big-op-spacing4}}@: (generic reader).
@item
@ref{❨197❩, , @t{big-op-spacing5}}@: (generic reader).
@item
@ref{❨351❩, , @t{bottom-character}}@: (generic function).
@item
@ref{❨55❩, , @t{boundary-character}}@: (generic reader).
@item
@ref{❨223❩, , @t{char-info}}@: (generic reader).
@item
@ref{❨225❩, , @t{char-info}}@: (structure).
@item
@ref{❨41❩, , @t{char-info-table-context}}@: (class).
@item
@ref{❨52❩, , @t{character-count}}@: (generic reader).
@item
@ref{❨295❩, , @t{character-list}}@: (generic reader).
@item
@ref{❨239❩, , @t{character-list-cycle}}@: (condition).
@item
@ref{❨340❩, , @t{character-metrics}}@: (class).
@item
@ref{❨256❩, , @t{character1}}@: (generic reader).
@item
@ref{❨301❩, , @t{character2}}@: (generic reader).
@item
@ref{❨418❩, , @t{characters}}@: (generic reader).
@item
@ref{❨287❩, , @t{checksum}}@: (generic reader).
@item
@ref{❨212❩, , @t{chr}}@: (generic reader).
@item
@ref{❨456❩, , @t{code}}@: (generic reader).
@item
@ref{❨183❩, , @t{composite}}@: (generic reader).
@item
@ref{❨233❩, , @t{context}}@: (generic reader).
@item
@ref{❨235❩, , @t{context}}@: (class).
@item
@ref{❨426❩, , @t{context-string}}@: (generic function).
@item
@ref{❨390❩, , @t{declared-size}}@: (generic reader).
@item
@ref{❨90❩, , @t{default-rule-thickness}}@: (generic reader).
@item
@ref{❨80❩, , @t{delete-after}}@: (generic reader).
@item
@ref{❨315❩, , @t{delete-before}}@: (generic reader).
@item
@ref{❨310❩, , @t{delim1}}@: (generic reader).
@item
@ref{❨106❩, , @t{delim2}}@: (generic reader).
@item
@ref{❨369❩, , @t{denom1}}@: (generic reader).
@item
@ref{❨281❩, , @t{denom2}}@: (generic reader).
@item
@ref{❨292❩, , @t{depth}}@: (generic reader).
@item
@ref{❨99❩, , @t{design-size}}@: (generic reader).
@item
@ref{❨101❩, , @t{(setf design-size)}}@: (generic function).
@item
@ref{❨173❩, , @t{different-fonts}}@: (condition).
@item
@ref{❨272❩, , @t{ec}}@: (generic reader).
@item
@ref{❨378❩, , @t{em}}@: (generic reader).
@item
@ref{❨443❩, , @t{encoding}}@: (generic reader).
@item
@ref{❨254❩, , @t{ex}}@: (generic reader).
@item
@ref{❨179❩, , @t{expansion}}@: (generic reader).
@item
@ref{❨155❩, , @t{extended-tfm}}@: (condition).
@item
@ref{❨385❩, , @t{extensiblep}}@: (function).
@item
@ref{❨371❩, , @t{extra-space}}@: (generic reader).
@item
@ref{❨45❩, , @t{face-code}}@: (generic reader).
@item
@ref{❨297❩, , @t{face-number}}@: (generic reader).
@item
@ref{❨92❩, , @t{family}}@: (generic reader).
@item
@ref{❨201❩, , @t{file}}@: (generic reader).
@item
@ref{❨299❩, , @t{file-overflow}}@: (condition).
@item
@ref{❨375❩, , @t{file-size-mixin}}@: (condition).
@item
@ref{❨386❩, , @t{file-underflow}}@: (condition).
@item
@ref{❨451❩, , @t{fix-word-overflow}}@: (condition).
@item
@ref{❨454❩, , @t{fmt}}@: (generic reader).
@item
@ref{❨111❩, , @t{font}}@: (generic reader).
@item
@ref{❨113❩, , @t{font}}@: (class).
@item
@ref{❨54❩, , @t{freeze}}@: (function).
@item
@ref{❨312❩, , @t{frozen}}@: (generic reader).
@item
@ref{❨72❩, , @t{get-character}}@: (function).
@item
@ref{❨358❩, , @t{get-kern}}@: (function).
@item
@ref{❨236❩, , @t{get-ligature}}@: (function).
@item
@ref{❨449❩, , @t{height}}@: (generic reader).
@item
@ref{❨396❩, , @t{index}}@: (generic reader).
@item
@ref{❨181❩, , @t{interword-shrink}}@: (generic reader).
@item
@ref{❨270❩, , @t{interword-space}}@: (generic reader).
@item
@ref{❨268❩, , @t{interword-stretch}}@: (generic reader).
@item
@ref{❨258❩, , @t{invalid-character-code}}@: (condition).
@item
@ref{❨86❩, , @t{invalid-character-range}}@: (condition).
@item
@ref{❨447❩, , @t{invalid-custom-design-size}}@: (condition).
@item
@ref{❨57❩, , @t{invalid-custom-name}}@: (condition).
@item
@ref{❨278❩, , @t{invalid-design-size}}@: (condition).
@item
@ref{❨49❩, , @t{invalid-header-length}}@: (condition).
@item
@ref{❨321❩, , @t{invalid-ligature-opcode}}@: (condition).
@item
@ref{❨366❩, , @t{invalid-original-design-size}}@: (condition).
@item
@ref{❨421❩, , @t{invalid-padded-string}}@: (condition).
@item
@ref{❨193❩, , @t{invalid-padded-string-length}}@: (condition).
@item
@ref{❨160❩, , @t{invalid-section-lengths}}@: (condition).
@item
@ref{❨260❩, , @t{invalid-table-index}}@: (condition).
@item
@ref{❨73❩, , @t{invalid-table-length}}@: (condition).
@item
@ref{❨214❩, , @t{invalid-table-start}}@: (condition).
@item
@ref{❨242❩, , @t{italic-correction}}@: (generic reader).
@item
@ref{❨363❩, , @t{largest}}@: (generic reader).
@item
@ref{❨289❩, , @t{lf}}@: (generic reader).
@item
@ref{❨303❩, , @t{lh}}@: (generic reader).
@item
@ref{❨430❩, , @t{ligature}}@: (generic reader).
@item
@ref{❨432❩, , @t{ligature}}@: (class).
@item
@ref{❨264❩, , @t{ligature-cycle}}@: (condition).
@item
@ref{❨143❩, , @t{load-font}}@: (function).
@item
@ref{❨146❩, , @t{math-extension-font}}@: (class).
@item
@ref{❨400❩, , @t{math-symbols-font}}@: (class).
@item
@ref{❨305❩, , @t{max-code}}@: (generic reader).
@item
@ref{❨108❩, , @t{middle-character}}@: (generic function).
@item
@ref{❨359❩, , @t{min-code}}@: (generic reader).
@item
@ref{❨248❩, , @t{name}}@: (generic reader).
@item
@ref{❨244❩, , @t{nc}}@: (generic reader).
@item
@ref{❨354❩, , @t{nd}}@: (generic reader).
@item
@ref{❨388❩, , @t{ne}}@: (generic reader).
@item
@ref{❨361❩, , @t{next-character}}@: (generic reader).
@item
@ref{❨204❩, , @t{nh}}@: (generic reader).
@item
@ref{❨78❩, , @t{ni}}@: (generic reader).
@item
@ref{❨326❩, , @t{nickname-package}}@: (function).
@item
@ref{❨283❩, , @t{nk}}@: (generic reader).
@item
@ref{❨221❩, , @t{nl}}@: (generic reader).
@item
@ref{❨285❩, , @t{no-boundary-character}}@: (condition).
@item
@ref{❨187❩, , @t{not-extensible}}@: (condition).
@item
@ref{❨65❩, , @t{np}}@: (generic reader).
@item
@ref{❨189❩, , @t{num1}}@: (generic reader).
@item
@ref{❨373❩, , @t{num2}}@: (generic reader).
@item
@ref{❨61❩, , @t{num3}}@: (generic reader).
@item
@ref{❨82❩, , @t{nw}}@: (generic reader).
@item
@ref{❨246❩, , @t{opcode}}@: (generic reader).
@item
@ref{❨276❩, , @t{original-design-size}}@: (generic reader).
@item
@ref{❨199❩, , @t{overflow}}@: (generic reader).
@item
@ref{❨59❩, , @t{pad}}@: (generic reader).
@item
@ref{❨98❩, , @t{padded-string}}@: (condition).
@item
@ref{❨237❩, , @t{padded-string-context}}@: (class).
@item
@ref{❨43❩, , @t{padded-string-overflow}}@: (condition).
@item
@ref{❨327❩, , @t{parameters}}@: (generic reader).
@item
@ref{❨317❩, , @t{pass-over}}@: (generic reader).
@item
@ref{❨424❩, , @t{remainder}}@: (generic reader).
@item
@ref{❨440❩, , @t{repeated-character}}@: (generic function).
@item
@ref{❨208❩, , @t{section}}@: (generic reader).
@item
@ref{❨177❩, , @t{size}}@: (generic reader).
@item
@ref{❨416❩, , @t{slant}}@: (generic reader).
@item
@ref{❨144❩, , @t{slope}}@: (generic reader).
@item
@ref{❨47❩, , @t{smallest}}@: (generic reader).
@item
@ref{❨380❩, , @t{spurious-char-info}}@: (condition).
@item
@ref{❨36❩, , @t{str}}@: (generic reader).
@item
@ref{❨398❩, , @t{sub1}}@: (generic reader).
@item
@ref{❨392❩, , @t{sub2}}@: (generic reader).
@item
@ref{❨191❩, , @t{subdrop}}@: (generic reader).
@item
@ref{❨158❩, , @t{sup1}}@: (generic reader).
@item
@ref{❨274❩, , @t{sup2}}@: (generic reader).
@item
@ref{❨38❩, , @t{sup3}}@: (generic reader).
@item
@ref{❨356❩, , @t{supdrop}}@: (generic reader).
@item
@ref{❨217❩, , @t{table-context}}@: (class).
@item
@ref{❨84❩, , @t{tag}}@: (generic reader).
@item
@ref{❨206❩, , @t{tfm}}@: (condition).
@item
@ref{❨70❩, , @t{tfm-compliance}}@: (condition).
@item
@ref{❨176❩, , @t{tfm-compliance-error}}@: (condition).
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}@: (condition).
@item
@ref{❨40❩, , @t{tfm-error}}@: (condition).
@item
@ref{❨445❩, , @t{tfm-table-error}}@: (condition).
@item
@ref{❨294❩, , @t{tfm-usage}}@: (condition).
@item
@ref{❨291❩, , @t{tfm-usage-error}}@: (condition).
@item
@ref{❨153❩, , @t{tfm-usage-warning}}@: (condition).
@item
@ref{❨154❩, , @t{tfm-warning}}@: (condition).
@item
@ref{❨307❩, , @t{top-character}}@: (generic function).
@item
@ref{❨67❩, , @t{u16-overflow}}@: (condition).
@item
@ref{❨314❩, , @t{unfreeze}}@: (function).
@item
@ref{❨329❩, , @t{value}}@: (generic reader).
@item
@ref{❨185❩, , @t{weight}}@: (generic reader).
@item
@ref{❨324❩, , @t{width}}@: (generic reader).
@end itemize
@item Internals
@itemize @bullet
@item
@ref{❨517❩, , @t{%run-ligature/kerning-program}}@: (function).
@item
@ref{❨518❩, , @t{*stream*}}@: (special variable).
@item
@ref{❨526❩, , @t{+character-metrics-dimension-slots+}}@: (constant).
@item
@ref{❨515❩, , @t{+font-dimension-slots+}}@: (constant).
@item
@ref{❨530❩, , @t{+math-extension-font-dimension-slots+}}@: (constant).
@item
@ref{❨559❩, , @t{+math-symbols-font-dimension-slots+}}@: (constant).
@item
@ref{❨493❩, , @t{apply-ligature}}@: (function).
@item
@ref{❨550❩, , @t{bot}}@: (reader).
@item
@ref{❨551❩, , @t{(setf bot)}}@: (writer).
@item
@ref{❨494❩, , @t{char-info-p}}@: (function).
@item
@ref{❨528❩, , @t{code-character}}@: (function).
@item
@ref{❨529❩, , @t{(setf code-character)}}@: (function).
@item
@ref{❨556❩, , @t{context-format}}@: (function).
@item
@ref{❨513❩, , @t{copy-char-info}}@: (function).
@item
@ref{❨534❩, , @t{copy-exten}}@: (function).
@item
@ref{❨538❩, , @t{copy-lig/kern}}@: (function).
@item
@ref{❨525❩, , @t{define-condition-report}}@: (macro).
@item
@ref{❨531❩, , @t{define-constant}}@: (macro).
@item
@ref{❨558❩, , @t{define-extension-recipe-pseudo-accessor}}@: (macro).
@item
@ref{❨532❩, , @t{depth-index}}@: (reader).
@item
@ref{❨533❩, , @t{(setf depth-index)}}@: (writer).
@item
@ref{❨560❩, , @t{exten}}@: (structure).
@item
@ref{❨519❩, , @t{exten-index}}@: (reader).
@item
@ref{❨520❩, , @t{(setf exten-index)}}@: (writer).
@item
@ref{❨491❩, , @t{exten-p}}@: (function).
@item
@ref{❨473❩, , @t{extension-recipe}}@: (generic reader).
@item
@ref{❨475❩, , @t{extension-recipe}}@: (class).
@item
@ref{❨537❩, , @t{font-extension-recipe}}@: (function).
@item
@ref{❨511❩, , @t{height-index}}@: (reader).
@item
@ref{❨512❩, , @t{(setf height-index)}}@: (writer).
@item
@ref{❨499❩, , @t{italic-index}}@: (reader).
@item
@ref{❨500❩, , @t{(setf italic-index)}}@: (writer).
@item
@ref{❨489❩, , @t{kerns}}@: (generic reader).
@item
@ref{❨543❩, , @t{lig/kern}}@: (structure).
@item
@ref{❨495❩, , @t{lig/kern-index}}@: (reader).
@item
@ref{❨496❩, , @t{(setf lig/kern-index)}}@: (writer).
@item
@ref{❨504❩, , @t{lig/kern-p}}@: (function).
@item
@ref{❨464❩, , @t{ligatures}}@: (generic reader).
@item
@ref{❨549❩, , @t{load-tfm-font}}@: (function).
@item
@ref{❨469❩, , @t{make-char-info}}@: (function).
@item
@ref{❨535❩, , @t{make-character-metrics}}@: (function).
@item
@ref{❨470❩, , @t{make-exten}}@: (function).
@item
@ref{❨472❩, , @t{make-extension-recipe}}@: (function).
@item
@ref{❨510❩, , @t{make-lig/kern}}@: (function).
@item
@ref{❨480❩, , @t{make-ligature}}@: (function).
@item
@ref{❨461❩, , @t{map-character-metrics-dimension-slots}}@: (macro).
@item
@ref{❨462❩, , @t{map-font-dimension-slots}}@: (macro).
@item
@ref{❨557❩, , @t{map-math-extension-font-dimension-slots}}@: (macro).
@item
@ref{❨548❩, , @t{map-math-symbols-font-dimension-slots}}@: (macro).
@item
@ref{❨522❩, , @t{map-slots}}@: (macro).
@item
@ref{❨567❩, , @t{mid}}@: (reader).
@item
@ref{❨568❩, , @t{(setf mid)}}@: (writer).
@item
@ref{❨497❩, , @t{next}}@: (reader).
@item
@ref{❨498❩, , @t{(setf next)}}@: (writer).
@item
@ref{❨483❩, , @t{next-char}}@: (reader).
@item
@ref{❨484❩, , @t{(setf next-char)}}@: (writer).
@item
@ref{❨539❩, , @t{op}}@: (reader).
@item
@ref{❨540❩, , @t{(setf op)}}@: (writer).
@item
@ref{❨501❩, , @t{parse-character-information}}@: (function).
@item
@ref{❨524❩, , @t{parse-header}}@: (function).
@item
@ref{❨505❩, , @t{parse-parameters}}@: (generic function).
@item
@ref{❨565❩, , @t{read-char-info}}@: (function).
@item
@ref{❨482❩, , @t{read-exten}}@: (function).
@item
@ref{❨466❩, , @t{read-fix-word}}@: (function).
@item
@ref{❨516❩, , @t{read-lig/kern}}@: (function).
@item
@ref{❨527❩, , @t{read-padded-string}}@: (function).
@item
@ref{❨481❩, , @t{read-u16}}@: (function).
@item
@ref{❨463❩, , @t{read-u32}}@: (function).
@item
@ref{❨521❩, , @t{read-u8}}@: (function).
@item
@ref{❨536❩, , @t{remove-keys}}@: (function).
@item
@ref{❨487❩, , @t{rep}}@: (reader).
@item
@ref{❨488❩, , @t{(setf rep)}}@: (writer).
@item
@ref{❨485❩, , @t{rmd}}@: (reader).
@item
@ref{❨486❩, , @t{(setf rmd)}}@: (writer).
@item
@ref{❨523❩, , @t{run-ligature/kerning-program}}@: (function).
@item
@ref{❨552❩, , @t{scale}}@: (generic function).
@item
@ref{❨514❩, , @t{set-kern}}@: (function).
@item
@ref{❨566❩, , @t{set-ligature}}@: (function).
@item
@ref{❨541❩, , @t{skip}}@: (reader).
@item
@ref{❨542❩, , @t{(setf skip)}}@: (writer).
@item
@ref{❨471❩, , @t{table-aref}}@: (function).
@item
@ref{❨502❩, , @t{top}}@: (reader).
@item
@ref{❨503❩, , @t{(setf top)}}@: (writer).
@item
@ref{❨492❩, , @t{tref}}@: (macro).
@item
@ref{❨467❩, , @t{width-index}}@: (reader).
@item
@ref{❨468❩, , @t{(setf width-index)}}@: (writer).
@item
@ref{❨460❩, , @t{with-condition-context}}@: (macro).
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Public Interface::
* Internals::
@end menu


@c ----------------
@c Public Interface
@c ----------------
@node Public Interface, Internals, Definitions, Definitions
@section Public Interface
@menu
* Public special variables::
* Public ordinary functions::
* Public generic functions::
* Public standalone methods::
* Public conditions::
* Public structures::
* Public classes::
@end menu

@node Public special variables, Public ordinary functions, Public Interface, Public Interface
@subsection Special variables
@defvr {Special Variable} {*copyright-years*}
@anchor{❨20❩}@c
@specialsubindex{*copyright-years*}@c
A string denoting the copyright years for the whole project.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-major-level*}
@anchor{❨23❩}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-minor-level*}
@anchor{❨25❩}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-name*}
@anchor{❨22❩}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for TFM is "Uncial Fonts"@comma{} from the LaTeX Font
Catalogue (https://www.tug.org/FontCatalogue/uncialfonts.Internal).
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status*}
@anchor{❨24❩}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*release-status-level*}
@anchor{❨21❩}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end defvr

@node Public ordinary functions, Public generic functions, Public special variables, Public Interface
@subsection Ordinary functions
@deffn {Function} {configuration} (key)
@anchor{❨26❩}@c
@functionsubindex{configuration}@c
Return KEY's value in the current TFM configuration.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {configure} (key value)
@anchor{❨28❩}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current TFM configuration.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end deffn
@deffn {Function} {extensiblep} (character)
@anchor{❨385❩}@c
@functionsubindex{extensiblep}@c
Return T if CHARACTER has an extension recipe.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Function} {freeze} (font)
@anchor{❨54❩}@c
@functionsubindex{freeze}@c
Freeze FONT@comma{} and return it.@*
Freezing a font means that all dimensions normally expressed in design size
units are multiplied by it@comma{} so as to lead values in TeX point units.@*
If FONT is already frozen@comma{} this function does nothing.@*
Otherwise@comma{} it returns T as a second value.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {get-character} (code font)
@anchor{❨72❩}@c
@functionsubindex{get-character}@c
Return FONT's CODE character@comma{} or NIL.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {get-kern} (character1 character2)
@anchor{❨358❩}@c
@functionsubindex{get-kern}@c
Return kern for CHARACTER1 and CHARACTER2@comma{} or NIL.@*
If CHARACTER1 and CHARACTER2 don't belong to the same font@comma{} signal a
DIFFERENT-FONTS error.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {get-ligature} (character1 character2)
@anchor{❨236❩}@c
@functionsubindex{get-ligature}@c
Return ligature for CHARACTER1 and CHARACTER2@comma{} or NIL.@*
If CHARACTER1 and CHARACTER2 don't belong to the same font@comma{} signal a
DIFFERENT-FONTS error.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {load-font} (file &rest keys &key name design-size freeze)
@anchor{❨143❩}@c
@functionsubindex{load-font}@c
Load FILE into a new font@comma{} and return it.@*
- FILE must be a pathname designator.@*
- The font's name (FILE's base name by default) may be overridden with NAME
  (a non-empty string).@*
- The font's original design size may be overridden with DESIGN-SIZE@*
  (a real greater or equal to 1).@*
- When FREEZE (NIL by default)@comma{} freeze the font immediately after loading it.
  See the eponymous function for more information.@*

Only plain TFM data is currently supported. If OFM or JFM data is detected@comma{}
this function signals an EXTENDED-TFM warning and returns NIL.@*

While loading TFM data@comma{} any signalled condition is restartable with
CANCEL-LOADING@comma{} in which case this function simply returns NIL.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {nickname-package} (&optional nickname)
@anchor{❨326❩}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:TFM by default) to the :NET.DIDIERVERNA.TFM package.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨8❩, , @t{package.lisp}}.
@end table
@end deffn
@deffn {Function} {unfreeze} (font)
@anchor{❨314❩}@c
@functionsubindex{unfreeze}@c
Unfreeze FONT and return it.@*
Unfreezing means performing the inverse of what FREEZE does.
If FONT is not frozen@comma{} this function does nothing.
Otherwise@comma{} it returns T as a second value.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {version} (&optional type)
@anchor{❨27❩}@c
@functionsubindex{version}@c
Return the current version of TFM.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "Artificial Uncial".@*
As for the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn

@node Public generic functions, Public standalone methods, Public ordinary functions, Public Interface
@subsection Generic functions
@deffn {Generic Reader} {7bits-safe} (object)
@anchor{❨94❩}@c
@genericsubindex{7bits-safe}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {7bits-safe} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨95❩}@c
@methodsubindex{7bits-safe}@c
Whether the font is 7 bits safe (0 or 1)@comma{} or NIL.@*
When 1@comma{} it means that no character of code lesser than 128 can lead to a
character of code greater than 128 by ways of ligatures or extensible
recipes.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨122❩, , @t{7bits-safe}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {actual-size} (condition)
@anchor{❨63❩}@c
@genericsubindex{actual-size}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {actual-size} ((condition @ref{❨375❩, , @t{file-size-mixin}}))
@anchor{❨64❩}@c
@methodsubindex{actual-size}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨377❩, , @t{actual-size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {axis-height} (object)
@anchor{❨96❩}@c
@genericsubindex{axis-height}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {axis-height} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨97❩}@c
@methodsubindex{axis-height}@c
The font's AXIS-HEIGHT parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨415❩, , @t{axis-height}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {bc} (condition)
@anchor{❨438❩}@c
@genericsubindex{bc}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {bc} ((condition @ref{❨86❩, , @t{invalid-character-range}}))
@anchor{❨439❩}@c
@methodsubindex{bc}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨88❩, , @t{bc}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {big-op-spacing1} (object)
@anchor{❨394❩}@c
@genericsubindex{big-op-spacing1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {big-op-spacing1} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨395❩}@c
@methodsubindex{big-op-spacing1}@c
The font's BIG-OP-SPACING1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨148❩, , @t{big-op-spacing1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {big-op-spacing2} (object)
@anchor{❨349❩}@c
@genericsubindex{big-op-spacing2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {big-op-spacing2} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨350❩}@c
@methodsubindex{big-op-spacing2}@c
The font's BIG-OP-SPACING2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨149❩, , @t{big-op-spacing2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {big-op-spacing3} (object)
@anchor{❨210❩}@c
@genericsubindex{big-op-spacing3}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {big-op-spacing3} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨211❩}@c
@methodsubindex{big-op-spacing3}@c
The font's BIG-OP-SPACING3 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨150❩, , @t{big-op-spacing3}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {big-op-spacing4} (object)
@anchor{❨319❩}@c
@genericsubindex{big-op-spacing4}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {big-op-spacing4} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨320❩}@c
@methodsubindex{big-op-spacing4}@c
The font's BIG-OP-SPACING4 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨151❩, , @t{big-op-spacing4}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {big-op-spacing5} (object)
@anchor{❨197❩}@c
@genericsubindex{big-op-spacing5}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {big-op-spacing5} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨198❩}@c
@methodsubindex{big-op-spacing5}@c
The font's BIG-OP-SPACING5 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨152❩, , @t{big-op-spacing5}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {bottom-character} (object)
@anchor{❨351❩}@c
@genericsubindex{bottom-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Method} {bottom-character} ((character @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨352❩}@c
@methodsubindex{bottom-character}@c
Return extensible CHARACTER's BOTTOM-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {bottom-character} ((extension-recipe @ref{❨475❩, , @t{extension-recipe}}))
@anchor{❨353❩}@c
@methodsubindex{bottom-character}@c
The recipe's bottom character@comma{} or NIL.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨478❩, , @t{bottom-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {boundary-character} (object)
@anchor{❨55❩}@c
@genericsubindex{boundary-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {boundary-character} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨56❩}@c
@methodsubindex{boundary-character}@c
The font's boundary character@comma{} or NIL.@*
This character is also accessible by code@comma{} like normal ones. However@comma{} it is
the only character the code of which may be outside [MIN-CODE@comma{}MAX-CODE] (see
TeX: the Program [545]). Finally@comma{} this character is not included in the
character count@comma{} unless it exists for real in the font (has non-zero
metrics).
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨142❩, , @t{boundary-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {char-info} (condition)
@anchor{❨223❩}@c
@genericsubindex{char-info}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {char-info} ((condition @ref{❨380❩, , @t{spurious-char-info}}))
@anchor{❨224❩}@c
@methodsubindex{char-info}@c
@table @strong
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨382❩, , @t{char-info}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {character-count} (object)
@anchor{❨52❩}@c
@genericsubindex{character-count}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {character-count} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨53❩}@c
@methodsubindex{character-count}@c
The font's number of characters.@*
The character count does not include the boundary character@comma{} unless that
character really exists in the font (has non-zerop metrics).
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨139❩, , @t{character-count}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {character-list} (condition)
@anchor{❨295❩}@c
@genericsubindex{character-list}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {character-list} ((condition @ref{❨239❩, , @t{character-list-cycle}}))
@anchor{❨296❩}@c
@methodsubindex{character-list}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨241❩, , @t{character-list}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {character1} (condition)
@anchor{❨256❩}@c
@genericsubindex{character1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {character1} ((condition @ref{❨173❩, , @t{different-fonts}}))
@anchor{❨257❩}@c
@methodsubindex{character1}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨174❩, , @t{character1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {character2} (condition)
@anchor{❨301❩}@c
@genericsubindex{character2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {character2} ((condition @ref{❨173❩, , @t{different-fonts}}))
@anchor{❨302❩}@c
@methodsubindex{character2}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨175❩, , @t{character2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {characters} (object)
@anchor{❨418❩}@c
@genericsubindex{characters}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {characters} ((condition @ref{❨264❩, , @t{ligature-cycle}}))
@anchor{❨419❩}@c
@methodsubindex{characters}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨267❩, , @t{characters}}.
@end table
@end deffn
@deffn {Reader Method} {characters} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨420❩}@c
@methodsubindex{characters}@c
The font's characters.@*
This is a hash table associating character codes with characters.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨138❩, , @t{characters}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {checksum} (object)
@anchor{❨287❩}@c
@genericsubindex{checksum}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {checksum} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨288❩}@c
@methodsubindex{checksum}@c
The font's checksum.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨116❩, , @t{checksum}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {chr} (condition)
@anchor{❨212❩}@c
@genericsubindex{chr}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {chr} ((condition @ref{❨187❩, , @t{not-extensible}}))
@anchor{❨213❩}@c
@methodsubindex{chr}@c
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨188❩, , @t{chr}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {code} (object)
@anchor{❨456❩}@c
@genericsubindex{code}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {code} ((char-info-table-context @ref{❨41❩, , @t{char-info-table-context}}))
@anchor{❨457❩}@c
@methodsubindex{code}@c
The corresponding character code.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨42❩, , @t{code}}.
@end table
@end deffn
@deffn {Reader Method} {code} ((condition @ref{❨258❩, , @t{invalid-character-code}}))
@anchor{❨458❩}@c
@methodsubindex{code}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨259❩, , @t{code}}.
@end table
@end deffn
@deffn {Reader Method} {code} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨459❩}@c
@methodsubindex{code}@c
The character's numerical code.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨341❩, , @t{code}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {composite} (object)
@anchor{❨183❩}@c
@genericsubindex{composite}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {composite} ((ligature @ref{❨432❩, , @t{ligature}}))
@anchor{❨184❩}@c
@methodsubindex{composite}@c
The character to insert between the two original ones.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨433❩, , @t{composite}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {context} (condition)
@anchor{❨233❩}@c
@genericsubindex{context}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {context} ((condition @ref{❨206❩, , @t{tfm}}))
@anchor{❨234❩}@c
@methodsubindex{context}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨207❩, , @t{context}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {context-string} (context)
@anchor{❨426❩}@c
@genericsubindex{context-string}@c
Return CONTEXT'string.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Methods
@deffn {Method} {context-string} ((context @ref{❨41❩, , @t{char-info-table-context}}))
@anchor{❨427❩}@c
@methodsubindex{context-string}@c
Return char info table CONTEXT string.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {context-string} ((context @ref{❨217❩, , @t{table-context}}))
@anchor{❨428❩}@c
@methodsubindex{context-string}@c
Return table CONTEXT string.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {context-string} ((context @ref{❨237❩, , @t{padded-string-context}}))
@anchor{❨429❩}@c
@methodsubindex{context-string}@c
Return padded string CONTEXT'string.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {declared-size} (condition)
@anchor{❨390❩}@c
@genericsubindex{declared-size}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {declared-size} ((condition @ref{❨375❩, , @t{file-size-mixin}}))
@anchor{❨391❩}@c
@methodsubindex{declared-size}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨376❩, , @t{declared-size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {default-rule-thickness} (object)
@anchor{❨90❩}@c
@genericsubindex{default-rule-thickness}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {default-rule-thickness} ((math-extension-font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨91❩}@c
@methodsubindex{default-rule-thickness}@c
The font's default rule thickness.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨147❩, , @t{default-rule-thickness}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {delete-after} (object)
@anchor{❨80❩}@c
@genericsubindex{delete-after}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {delete-after} ((ligature @ref{❨432❩, , @t{ligature}}))
@anchor{❨81❩}@c
@methodsubindex{delete-after}@c
Whether to delete the character after the ligature.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨435❩, , @t{delete-after}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {delete-before} (object)
@anchor{❨315❩}@c
@genericsubindex{delete-before}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {delete-before} ((ligature @ref{❨432❩, , @t{ligature}}))
@anchor{❨316❩}@c
@methodsubindex{delete-before}@c
Whether to delete the character before the ligature.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨434❩, , @t{delete-before}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {delim1} (object)
@anchor{❨310❩}@c
@genericsubindex{delim1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {delim1} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨311❩}@c
@methodsubindex{delim1}@c
The font's DELIM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨413❩, , @t{delim1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {delim2} (object)
@anchor{❨106❩}@c
@genericsubindex{delim2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {delim2} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨107❩}@c
@methodsubindex{delim2}@c
The font's DELIM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨414❩, , @t{delim2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {denom1} (object)
@anchor{❨369❩}@c
@genericsubindex{denom1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {denom1} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨370❩}@c
@methodsubindex{denom1}@c
The font's DENOM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨404❩, , @t{denom1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {denom2} (object)
@anchor{❨281❩}@c
@genericsubindex{denom2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {denom2} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨282❩}@c
@methodsubindex{denom2}@c
The font's DENOM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨405❩, , @t{denom2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {depth} (object)
@anchor{❨292❩}@c
@genericsubindex{depth}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {depth} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨293❩}@c
@methodsubindex{depth}@c
The character's depth.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨345❩, , @t{depth}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {design-size} (object)
@anchor{❨99❩}@c
@genericsubindex{design-size}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {design-size} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨100❩}@c
@methodsubindex{design-size}@c
The font's design size@comma{} in units of TeX points.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨118❩, , @t{design-size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {(setf design-size)} (object)
@anchor{❨101❩}@c
@genericsubindex{(setf design-size)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Method} {(setf design-size)} :around (font)
@anchor{❨102❩}@c
@methodsubindex{(setf design-size)}@c
Check that DESIGN-SIZE is a real greater or equal to 1.@*
Otherwise@comma{} signal and INVALID-CUSTOM-DESIGN-SIZE error. When the font's
original design size is itself valid@comma{} this error is immediately restartable
with USE-ORIGINAL-DESIGN-SIZE.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {(setf design-size)} :after (font)
@anchor{❨103❩}@c
@methodsubindex{(setf design-size)}@c
Rescale FONT if frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {(setf design-size)} :before (font)
@anchor{❨104❩}@c
@methodsubindex{(setf design-size)}@c
Unscale FONT if frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Writer Method} {(setf design-size)} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨105❩}@c
@methodsubindex{(setf design-size)}@c
The font's design size@comma{} in units of TeX points.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨118❩, , @t{design-size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ec} (condition)
@anchor{❨272❩}@c
@genericsubindex{ec}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ec} ((condition @ref{❨86❩, , @t{invalid-character-range}}))
@anchor{❨273❩}@c
@methodsubindex{ec}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨89❩, , @t{ec}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {em} (object)
@anchor{❨378❩}@c
@genericsubindex{em}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {em} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨379❩}@c
@methodsubindex{em}@c
The font's em size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨133❩, , @t{em}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {encoding} (object)
@anchor{❨443❩}@c
@genericsubindex{encoding}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {encoding} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨444❩}@c
@methodsubindex{encoding}@c
The font's character coding scheme (a BCPL string)@comma{} or NIL.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨120❩, , @t{encoding}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ex} (object)
@anchor{❨254❩}@c
@genericsubindex{ex}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ex} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨255❩}@c
@methodsubindex{ex}@c
The font's ex size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨132❩, , @t{ex}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {expansion} (object)
@anchor{❨179❩}@c
@genericsubindex{expansion}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {expansion} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨180❩}@c
@methodsubindex{expansion}@c
The font's expansion (:regular@comma{} :condensed@comma{} :extended)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨126❩, , @t{expansion}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {extra-space} (object)
@anchor{❨371❩}@c
@genericsubindex{extra-space}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {extra-space} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨372❩}@c
@methodsubindex{extra-space}@c
The font's extra space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.@*

This is the additional space to put at the end of sentences.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨134❩, , @t{extra-space}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {face-code} (object)
@anchor{❨45❩}@c
@genericsubindex{face-code}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {face-code} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨46❩}@c
@methodsubindex{face-code}@c
The font's 3-letters face code@comma{} or NIL.@*
When available@comma{} it is the concatenation of the upcased first letters of the
font's weight@comma{} slope@comma{} and expansion.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨127❩, , @t{face-code}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {face-number} (object)
@anchor{❨297❩}@c
@genericsubindex{face-number}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {face-number} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨298❩}@c
@methodsubindex{face-number}@c
The font's face number@comma{} or NIL.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨123❩, , @t{face-number}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {family} (object)
@anchor{❨92❩}@c
@genericsubindex{family}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {family} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨93❩}@c
@methodsubindex{family}@c
The font's family (a BCPL string)@comma{} or NIL.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨121❩, , @t{family}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {file} (object)
@anchor{❨201❩}@c
@genericsubindex{file}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {file} ((condition @ref{❨155❩, , @t{extended-tfm}}))
@anchor{❨202❩}@c
@methodsubindex{file}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨157❩, , @t{file}}.
@end table
@end deffn
@deffn {Reader Method} {file} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨203❩}@c
@methodsubindex{file}@c
The font's file.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨114❩, , @t{file}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {fmt} (condition)
@anchor{❨454❩}@c
@genericsubindex{fmt}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {fmt} ((condition @ref{❨155❩, , @t{extended-tfm}}))
@anchor{❨455❩}@c
@methodsubindex{fmt}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨156❩, , @t{fmt}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {font} (object)
@anchor{❨111❩}@c
@genericsubindex{font}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {font} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨112❩}@c
@methodsubindex{font}@c
The character's font.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨342❩, , @t{font}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {frozen} (object)
@anchor{❨312❩}@c
@genericsubindex{frozen}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {frozen} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨313❩}@c
@methodsubindex{frozen}@c
Whether the font is frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨117❩, , @t{frozen}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {height} (object)
@anchor{❨449❩}@c
@genericsubindex{height}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {height} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨450❩}@c
@methodsubindex{height}@c
The character's height.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨344❩, , @t{height}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {index} (object)
@anchor{❨396❩}@c
@genericsubindex{index}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {index} ((table-context @ref{❨217❩, , @t{table-context}}))
@anchor{❨397❩}@c
@methodsubindex{index}@c
The index in the table.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨219❩, , @t{index}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {interword-shrink} (object)
@anchor{❨181❩}@c
@genericsubindex{interword-shrink}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {interword-shrink} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨182❩}@c
@methodsubindex{interword-shrink}@c
The font's interword shrinkability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨131❩, , @t{interword-shrink}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {interword-space} (object)
@anchor{❨270❩}@c
@genericsubindex{interword-space}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {interword-space} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨271❩}@c
@methodsubindex{interword-space}@c
The font's normal interword space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨129❩, , @t{interword-space}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {interword-stretch} (object)
@anchor{❨268❩}@c
@genericsubindex{interword-stretch}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {interword-stretch} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨269❩}@c
@methodsubindex{interword-stretch}@c
The font's interword stretchability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨130❩, , @t{interword-stretch}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {italic-correction} (object)
@anchor{❨242❩}@c
@genericsubindex{italic-correction}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {italic-correction} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨243❩}@c
@methodsubindex{italic-correction}@c
The character's italic correction.@*
TeX uses this value for regular characters followed by the command /@comma{} and
also in math mode for superscript placement. It is expressed in design size
units@comma{} or in TeX point units if the font is frozen.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨346❩, , @t{italic-correction}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {largest} (condition)
@anchor{❨363❩}@c
@genericsubindex{largest}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {largest} ((condition @ref{❨73❩, , @t{invalid-table-length}}))
@anchor{❨364❩}@c
@methodsubindex{largest}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨77❩, , @t{largest}}.
@end table
@end deffn
@deffn {Reader Method} {largest} ((condition @ref{❨260❩, , @t{invalid-table-index}}))
@anchor{❨365❩}@c
@methodsubindex{largest}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨263❩, , @t{largest}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {lf} (condition)
@anchor{❨289❩}@c
@genericsubindex{lf}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {lf} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨290❩}@c
@methodsubindex{lf}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨162❩, , @t{lf}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {lh} (condition)
@anchor{❨303❩}@c
@genericsubindex{lh}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {lh} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨304❩}@c
@methodsubindex{lh}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨163❩, , @t{lh}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ligature} (condition)
@anchor{❨430❩}@c
@genericsubindex{ligature}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ligature} ((condition @ref{❨264❩, , @t{ligature-cycle}}))
@anchor{❨431❩}@c
@methodsubindex{ligature}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨266❩, , @t{ligature}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {max-code} (object)
@anchor{❨305❩}@c
@genericsubindex{max-code}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {max-code} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨306❩}@c
@methodsubindex{max-code}@c
The font's largest character code@comma{} or NIL if the font is empty.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨137❩, , @t{max-code}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {middle-character} (object)
@anchor{❨108❩}@c
@genericsubindex{middle-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Method} {middle-character} ((character @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨109❩}@c
@methodsubindex{middle-character}@c
Return extensible CHARACTER's MIDDLE-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {middle-character} ((extension-recipe @ref{❨475❩, , @t{extension-recipe}}))
@anchor{❨110❩}@c
@methodsubindex{middle-character}@c
The recipe's middle character@comma{} or NIL.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨477❩, , @t{middle-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {min-code} (object)
@anchor{❨359❩}@c
@genericsubindex{min-code}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {min-code} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨360❩}@c
@methodsubindex{min-code}@c
The font's smallest character code@comma{} or NIL if the font is empty.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨136❩, , @t{min-code}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {name} (object)
@anchor{❨248❩}@c
@genericsubindex{name}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {name} ((table-context @ref{❨217❩, , @t{table-context}}))
@anchor{❨249❩}@c
@methodsubindex{name}@c
The table name.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨218❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((condition @ref{❨445❩, , @t{tfm-table-error}}))
@anchor{❨250❩}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨446❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((padded-string-context @ref{❨237❩, , @t{padded-string-context}}))
@anchor{❨251❩}@c
@methodsubindex{name}@c
The string name.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨238❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((condition @ref{❨57❩, , @t{invalid-custom-name}}))
@anchor{❨252❩}@c
@methodsubindex{name}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨58❩, , @t{name}}.
@end table
@end deffn
@deffn {Reader Method} {name} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨253❩}@c
@methodsubindex{name}@c
The font's name.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨115❩, , @t{name}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nc} (condition)
@anchor{❨244❩}@c
@genericsubindex{nc}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nc} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨245❩}@c
@methodsubindex{nc}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨164❩, , @t{nc}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nd} (condition)
@anchor{❨354❩}@c
@genericsubindex{nd}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nd} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨355❩}@c
@methodsubindex{nd}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨167❩, , @t{nd}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ne} (condition)
@anchor{❨388❩}@c
@genericsubindex{ne}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ne} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨389❩}@c
@methodsubindex{ne}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨171❩, , @t{ne}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {next-character} (object)
@anchor{❨361❩}@c
@genericsubindex{next-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {next-character} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨362❩}@c
@methodsubindex{next-character}@c
The next character in a character list.@*
This slot is non-null only if the character is part of a chain of characters
of ascending size@comma{} and not the last one (see TeX: the Program [544]). It is
mutually exclusive with the EXTENSION-RECIPE slot@comma{} and also with the existence
of a ligature or kerning program for this character.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨347❩, , @t{next-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nh} (condition)
@anchor{❨204❩}@c
@genericsubindex{nh}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nh} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨205❩}@c
@methodsubindex{nh}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨166❩, , @t{nh}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ni} (condition)
@anchor{❨78❩}@c
@genericsubindex{ni}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ni} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨79❩}@c
@methodsubindex{ni}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨168❩, , @t{ni}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nk} (condition)
@anchor{❨283❩}@c
@genericsubindex{nk}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nk} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨284❩}@c
@methodsubindex{nk}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨170❩, , @t{nk}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nl} (condition)
@anchor{❨221❩}@c
@genericsubindex{nl}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nl} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨222❩}@c
@methodsubindex{nl}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨169❩, , @t{nl}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {np} (condition)
@anchor{❨65❩}@c
@genericsubindex{np}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {np} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨66❩}@c
@methodsubindex{np}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨172❩, , @t{np}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {num1} (object)
@anchor{❨189❩}@c
@genericsubindex{num1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {num1} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨190❩}@c
@methodsubindex{num1}@c
The font's NUM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨401❩, , @t{num1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {num2} (object)
@anchor{❨373❩}@c
@genericsubindex{num2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {num2} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨374❩}@c
@methodsubindex{num2}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨402❩, , @t{num2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {num3} (object)
@anchor{❨61❩}@c
@genericsubindex{num3}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {num3} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨62❩}@c
@methodsubindex{num3}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨403❩, , @t{num3}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {nw} (condition)
@anchor{❨82❩}@c
@genericsubindex{nw}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {nw} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}))
@anchor{❨83❩}@c
@methodsubindex{nw}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨165❩, , @t{nw}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {opcode} (condition)
@anchor{❨246❩}@c
@genericsubindex{opcode}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {opcode} ((condition @ref{❨321❩, , @t{invalid-ligature-opcode}}))
@anchor{❨247❩}@c
@methodsubindex{opcode}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨323❩, , @t{opcode}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {original-design-size} (object)
@anchor{❨276❩}@c
@genericsubindex{original-design-size}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {original-design-size} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨277❩}@c
@methodsubindex{original-design-size}@c
The font's original design size@comma{} in units of TeX points.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨119❩, , @t{original-design-size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {overflow} (condition)
@anchor{❨199❩}@c
@genericsubindex{overflow}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {overflow} ((condition @ref{❨43❩, , @t{padded-string-overflow}}))
@anchor{❨200❩}@c
@methodsubindex{overflow}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨44❩, , @t{overflow}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {pad} (condition)
@anchor{❨59❩}@c
@genericsubindex{pad}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {pad} ((condition @ref{❨193❩, , @t{invalid-padded-string-length}}))
@anchor{❨60❩}@c
@methodsubindex{pad}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨196❩, , @t{pad}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {parameters} (object)
@anchor{❨327❩}@c
@genericsubindex{parameters}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {parameters} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨328❩}@c
@methodsubindex{parameters}@c
The font's additional parameters array@comma{} or NIL.@*
Parameters are expressed in design size units@comma{} or in TeX point units if the
font is frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨135❩, , @t{parameters}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {pass-over} (object)
@anchor{❨317❩}@c
@genericsubindex{pass-over}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {pass-over} ((ligature @ref{❨432❩, , @t{ligature}}))
@anchor{❨318❩}@c
@methodsubindex{pass-over}@c
The number of characters to skip for reaching the next character.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨436❩, , @t{pass-over}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {remainder} (condition)
@anchor{❨424❩}@c
@genericsubindex{remainder}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {remainder} ((condition @ref{❨380❩, , @t{spurious-char-info}}))
@anchor{❨425❩}@c
@methodsubindex{remainder}@c
@table @strong
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨384❩, , @t{remainder}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {repeated-character} (object)
@anchor{❨440❩}@c
@genericsubindex{repeated-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Method} {repeated-character} ((character @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨441❩}@c
@methodsubindex{repeated-character}@c
Return extensible CHARACTER's REPEATED-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {repeated-character} ((extension-recipe @ref{❨475❩, , @t{extension-recipe}}))
@anchor{❨442❩}@c
@methodsubindex{repeated-character}@c
The recipe's repeated character.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨479❩, , @t{repeated-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {section} (condition)
@anchor{❨208❩}@c
@genericsubindex{section}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {section} ((condition @ref{❨70❩, , @t{tfm-compliance}}))
@anchor{❨209❩}@c
@methodsubindex{section}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨71❩, , @t{section}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {size} (object)
@anchor{❨177❩}@c
@genericsubindex{size}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {size} ((table-context @ref{❨217❩, , @t{table-context}}))
@anchor{❨178❩}@c
@methodsubindex{size}@c
The table size.
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨220❩, , @t{size}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {slant} (object)
@anchor{❨416❩}@c
@genericsubindex{slant}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {slant} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨417❩}@c
@methodsubindex{slant}@c
The font's slant (a scalar ratio).
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨128❩, , @t{slant}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {slope} (object)
@anchor{❨144❩}@c
@genericsubindex{slope}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {slope} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨145❩}@c
@methodsubindex{slope}@c
The font's slope (:roman@comma{} :italic)@comma{} or NIL.@*
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨125❩, , @t{slope}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {smallest} (condition)
@anchor{❨47❩}@c
@genericsubindex{smallest}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {smallest} ((condition @ref{❨73❩, , @t{invalid-table-length}}))
@anchor{❨48❩}@c
@methodsubindex{smallest}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨76❩, , @t{smallest}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {str} (condition)
@anchor{❨36❩}@c
@genericsubindex{str}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {str} ((condition @ref{❨421❩, , @t{invalid-padded-string}}))
@anchor{❨37❩}@c
@methodsubindex{str}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨423❩, , @t{str}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sub1} (object)
@anchor{❨398❩}@c
@genericsubindex{sub1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {sub1} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨399❩}@c
@methodsubindex{sub1}@c
The font's SUB1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨409❩, , @t{sub1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sub2} (object)
@anchor{❨392❩}@c
@genericsubindex{sub2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {sub2} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨393❩}@c
@methodsubindex{sub2}@c
The font's SUB2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨410❩, , @t{sub2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {subdrop} (object)
@anchor{❨191❩}@c
@genericsubindex{subdrop}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {subdrop} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨192❩}@c
@methodsubindex{subdrop}@c
The font's SUBDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨412❩, , @t{subdrop}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sup1} (object)
@anchor{❨158❩}@c
@genericsubindex{sup1}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {sup1} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨159❩}@c
@methodsubindex{sup1}@c
The font's SUP1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨406❩, , @t{sup1}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sup2} (object)
@anchor{❨274❩}@c
@genericsubindex{sup2}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {sup2} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨275❩}@c
@methodsubindex{sup2}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨407❩, , @t{sup2}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {sup3} (object)
@anchor{❨38❩}@c
@genericsubindex{sup3}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {sup3} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨39❩}@c
@methodsubindex{sup3}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨408❩, , @t{sup3}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {supdrop} (object)
@anchor{❨356❩}@c
@genericsubindex{supdrop}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {supdrop} ((math-symbols-font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨357❩}@c
@methodsubindex{supdrop}@c
The font's SUPDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨411❩, , @t{supdrop}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {tag} (condition)
@anchor{❨84❩}@c
@genericsubindex{tag}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {tag} ((condition @ref{❨380❩, , @t{spurious-char-info}}))
@anchor{❨85❩}@c
@methodsubindex{tag}@c
@table @strong
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨383❩, , @t{tag}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {top-character} (object)
@anchor{❨307❩}@c
@genericsubindex{top-character}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Method} {top-character} ((character @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨308❩}@c
@methodsubindex{top-character}@c
Return extensible CHARACTER's TOP-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Reader Method} {top-character} ((extension-recipe @ref{❨475❩, , @t{extension-recipe}}))
@anchor{❨309❩}@c
@methodsubindex{top-character}@c
The recipe's top character@comma{} or NIL.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨476❩, , @t{top-character}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {value} (condition)
@anchor{❨329❩}@c
@genericsubindex{value}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {value} ((condition @ref{❨73❩, , @t{invalid-table-length}}))
@anchor{❨330❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨75❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨49❩, , @t{invalid-header-length}}))
@anchor{❨331❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨51❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨214❩, , @t{invalid-table-start}}))
@anchor{❨332❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨216❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨260❩, , @t{invalid-table-index}}))
@anchor{❨333❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨262❩, , @t{index}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨366❩, , @t{invalid-original-design-size}}))
@anchor{❨334❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨368❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨278❩, , @t{invalid-design-size}}))
@anchor{❨335❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Target Slot
@ref{❨280❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨447❩, , @t{invalid-custom-design-size}}))
@anchor{❨336❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨448❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨193❩, , @t{invalid-padded-string-length}}))
@anchor{❨337❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨195❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨451❩, , @t{fix-word-overflow}}))
@anchor{❨338❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨453❩, , @t{value}}.
@end table
@end deffn
@deffn {Reader Method} {value} ((condition @ref{❨67❩, , @t{u16-overflow}}))
@anchor{❨339❩}@c
@methodsubindex{value}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Target Slot
@ref{❨69❩, , @t{value}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {weight} (object)
@anchor{❨185❩}@c
@genericsubindex{weight}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {weight} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨186❩}@c
@methodsubindex{weight}@c
The font's weight (:medium@comma{} :bold@comma{} :light)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨124❩, , @t{weight}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {width} (object)
@anchor{❨324❩}@c
@genericsubindex{width}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {width} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨325❩}@c
@methodsubindex{width}@c
The character's width.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨343❩, , @t{width}}.
@end table
@end deffn
@end table
@end deffn

@node Public standalone methods, Public conditions, Public generic functions, Public Interface
@subsection Standalone methods
@deffn {Method} {initialize-instance} :after ((font @ref{❨113❩, , @t{font}}) &key)
@anchor{❨583❩}@c
@methodsubindex{initialize-instance}@c
Check the validity of FONT's name and design-size.@*
- If the font's name is not a non-empty string@comma{} signal and INVALID-CUSTOM-NAME
  error. This error is immediately restartable with USE-FILE-BASE-NAME.@*
- IF the font's design-size is not NIL or a real greater or equal to 1@comma{} signal
  an INVALID-CUSTOM-DESIGN-SIZE error. This error is immediately restartable
  with USE-ORIGINAL-DESIGN-SIZE.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} :after ((condition @ref{❨43❩, , @t{padded-string-overflow}}) stream)
@anchor{❨573❩}@c
@methodsubindex{print-object}@c
Advertise padded string overflow CONDITION's relevant documentation.
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨43❩, , @t{padded-string-overflow}}) stream0)
@anchor{❨574❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨49❩, , @t{invalid-header-length}}) stream0)
@anchor{❨575❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨57❩, , @t{invalid-custom-name}}) stream0)
@anchor{❨576❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨67❩, , @t{u16-overflow}}) stream0)
@anchor{❨577❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} :after ((condition @ref{❨70❩, , @t{tfm-compliance}}) stream)
@anchor{❨578❩}@c
@methodsubindex{print-object}@c
Advertise CONDITION's relevant TFtoPL section.
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨73❩, , @t{invalid-table-length}}) stream0)
@anchor{❨579❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨86❩, , @t{invalid-character-range}}) stream0)
@anchor{❨580❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((font @ref{❨113❩, , @t{font}}) stream)
@anchor{❨584❩}@c
@methodsubindex{print-object}@c
Print FONT unreadably with its name to STREAM.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨155❩, , @t{extended-tfm}}) stream0)
@anchor{❨586❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨160❩, , @t{invalid-section-lengths}}) stream0)
@anchor{❨587❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨173❩, , @t{different-fonts}}) stream0)
@anchor{❨588❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨187❩, , @t{not-extensible}}) stream0)
@anchor{❨589❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨193❩, , @t{invalid-padded-string-length}}) stream0)
@anchor{❨590❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨214❩, , @t{invalid-table-start}}) stream0)
@anchor{❨592❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨239❩, , @t{character-list-cycle}}) stream0)
@anchor{❨594❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨258❩, , @t{invalid-character-code}}) stream0)
@anchor{❨595❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨260❩, , @t{invalid-table-index}}) stream0)
@anchor{❨596❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨264❩, , @t{ligature-cycle}}) stream0)
@anchor{❨597❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨278❩, , @t{invalid-design-size}}) stream0)
@anchor{❨598❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨285❩, , @t{no-boundary-character}}) stream0)
@anchor{❨599❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨299❩, , @t{file-overflow}}) stream0)
@anchor{❨600❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨321❩, , @t{invalid-ligature-opcode}}) stream0)
@anchor{❨601❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((character @ref{❨340❩, , @t{character-metrics}}) stream)
@anchor{❨602❩}@c
@methodsubindex{print-object}@c
Print CHARACTER unreadably with its code to STREAM.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨366❩, , @t{invalid-original-design-size}}) stream0)
@anchor{❨603❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨380❩, , @t{spurious-char-info}}) stream0)
@anchor{❨604❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨386❩, , @t{file-underflow}}) stream0)
@anchor{❨605❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨421❩, , @t{invalid-padded-string}}) stream0)
@anchor{❨606❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨447❩, , @t{invalid-custom-design-size}}) stream0)
@anchor{❨607❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((condition @ref{❨451❩, , @t{fix-word-overflow}}) stream0)
@anchor{❨608❩}@c
@methodsubindex{print-object}@c
@table @strong
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Method} {print-object} ((extension-recipe @ref{❨475❩, , @t{extension-recipe}}) stream)
@anchor{❨609❩}@c
@methodsubindex{print-object}@c
Print EXTENSION-RECIPE unreadably with its repeated character to STREAM.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn

@node Public conditions, Public structures, Public standalone methods, Public Interface
@subsection Conditions
@deftp {Condition} {character-list-cycle}
@anchor{❨239❩}@c
@conditionsubindex{character-list-cycle}@c
The Character List Cycle compliance error.@*
It signals that a cycle was found in a list of ascending character sizes.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨296❩, , @t{character-list}}.
@item
@ref{❨594❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨240❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 12)}
@end table
@end defvr
@defvr {Slot} {character-list}
@anchor{❨241❩}@c
@slotsubindex{character-list}@c
The cyclic character list.
@table @strong
@item Initargs
@t{:character-list}
@item Readers
@ref{❨296❩, , @t{character-list}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {different-fonts}
@anchor{❨173❩}@c
@conditionsubindex{different-fonts}@c
The Different Fonts usage error.@*
It signals an attempt at retrieving a ligature or kern for two characters
from different fonts.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{tfm-usage-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨257❩, , @t{character1}}.
@item
@ref{❨302❩, , @t{character2}}.
@item
@ref{❨588❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {character1}
@anchor{❨174❩}@c
@slotsubindex{character1}@c
The first character.
@table @strong
@item Initargs
@t{:character1}
@item Readers
@ref{❨257❩, , @t{character1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {character2}
@anchor{❨175❩}@c
@slotsubindex{character2}@c
The second character.
@table @strong
@item Initargs
@t{:character2}
@item Readers
@ref{❨302❩, , @t{character2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {extended-tfm}
@anchor{❨155❩}@c
@conditionsubindex{extended-tfm}@c
The Extended TFM warning.@*
It signals that a file contains extended TFM data (OFM or JFM) rather than
plain TFM data.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨154❩, , @t{tfm-warning}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨202❩, , @t{file}}.
@item
@ref{❨455❩, , @t{fmt}}.
@item
@ref{❨586❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {fmt}
@anchor{❨156❩}@c
@slotsubindex{fmt}@c
The unsupported format.
@table @strong
@item Initargs
@t{:fmt}
@item Readers
@ref{❨455❩, , @t{fmt}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {file}
@anchor{❨157❩}@c
@slotsubindex{file}@c
The extended TFM file.
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{❨202❩, , @t{file}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {file-overflow}
@anchor{❨299❩}@c
@conditionsubindex{file-overflow}@c
The File Overflow compliance warning.@*
It signals that the file size is longer than expected.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨375❩, , @t{file-size-mixin}}.
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@end itemize
@item Direct methods
@ref{❨600❩, , @t{print-object}}.
@item Direct slots
@defvr {Slot} {section}
@anchor{❨300❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {file-size-mixin}
@anchor{❨375❩}@c
@conditionsubindex{file-size-mixin}@c
The File Size Mixin condition.@*
It is used in both errors and warnings to report different declared and
actual file sizes.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@t{condition}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨299❩, , @t{file-overflow}}.
@item
@ref{❨386❩, , @t{file-underflow}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨64❩, , @t{actual-size}}.
@item
@ref{❨391❩, , @t{declared-size}}.
@end itemize
@item Direct slots
@defvr {Slot} {declared-size}
@anchor{❨376❩}@c
@slotsubindex{declared-size}@c
The declared file size@comma{} in bytes.
@table @strong
@item Initargs
@t{:declared-size}
@item Readers
@ref{❨391❩, , @t{declared-size}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {actual-size}
@anchor{❨377❩}@c
@slotsubindex{actual-size}@c
The actual file size@comma{} in bytes.
@table @strong
@item Initargs
@t{:actual-size}
@item Readers
@ref{❨64❩, , @t{actual-size}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {file-underflow}
@anchor{❨386❩}@c
@conditionsubindex{file-underflow}@c
The File Underflow compliance error.@*
It signals that the file size is shorter than expected.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨375❩, , @t{file-size-mixin}}.
@item
@ref{❨176❩, , @t{tfm-compliance-error}}.
@end itemize
@item Direct methods
@ref{❨605❩, , @t{print-object}}.
@item Direct slots
@defvr {Slot} {section}
@anchor{❨387❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {fix-word-overflow}
@anchor{❨451❩}@c
@conditionsubindex{fix-word-overflow}@c
The Fix Word Overflow compliance error.@*
It signals that a fix word is outside ]-16@comma{}+16[.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨608❩, , @t{print-object}}.
@item
@ref{❨338❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨452❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 9)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨453❩}@c
@slotsubindex{value}@c
The faulty value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨338❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-character-code}
@anchor{❨258❩}@c
@conditionsubindex{invalid-character-code}@c
The Invalid Character Code compliance error.@*
It signals a reference to a character code which does not exist in the font
being loaded.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨458❩, , @t{code}}.
@item
@ref{❨595❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {code}
@anchor{❨259❩}@c
@slotsubindex{code}@c
The invalid character code.
@table @strong
@item Initargs
@t{:code}
@item Readers
@ref{❨458❩, , @t{code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-character-range}
@anchor{❨86❩}@c
@conditionsubindex{invalid-character-range}@c
The Invalid Character Range compliance error.
It signals that BC-1 > EC@comma{} or that EC > 255.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨439❩, , @t{bc}}.
@item
@ref{❨273❩, , @t{ec}}.
@item
@ref{❨580❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨87❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@defvr {Slot} {bc}
@anchor{❨88❩}@c
@slotsubindex{bc}@c
The smallest character code.
@table @strong
@item Initargs
@t{:bc}
@item Readers
@ref{❨439❩, , @t{bc}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {ec}
@anchor{❨89❩}@c
@slotsubindex{ec}@c
The largest character code.
@table @strong
@item Initargs
@t{:ec}
@item Readers
@ref{❨273❩, , @t{ec}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-custom-design-size}
@anchor{❨447❩}@c
@conditionsubindex{invalid-custom-design-size}@c
The Invalid Custom Design Size usage error.@*
It signals that a custom design size is not a real greater or equal to 1.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{tfm-usage-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨607❩, , @t{print-object}}.
@item
@ref{❨336❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {value}
@anchor{❨448❩}@c
@slotsubindex{value}@c
The invalid custom design size.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨336❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-custom-name}
@anchor{❨57❩}@c
@conditionsubindex{invalid-custom-name}@c
The Invalid Custom Name usage error.@*
It signals that a custom name is not a non-empty string.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{tfm-usage-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨252❩, , @t{name}}.
@item
@ref{❨576❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {name}
@anchor{❨58❩}@c
@slotsubindex{name}@c
The invalid custom name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨252❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-design-size}
@anchor{❨278❩}@c
@conditionsubindex{invalid-design-size}@c
The Invalid Design Size compliance error.@*
It signals that a design size is too small (< 1pt).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨598❩, , @t{print-object}}.
@item
@ref{❨335❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨279❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 10)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨280❩}@c
@slotsubindex{value}@c
The invalid design size.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨335❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-header-length}
@anchor{❨49❩}@c
@conditionsubindex{invalid-header-length}@c
The Invalid Header Length compliance error.@*
It signals that a header length is too small (< 2 words).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨575❩, , @t{print-object}}.
@item
@ref{❨331❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨50❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨51❩}@c
@slotsubindex{value}@c
The invalid header length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨331❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-ligature-opcode}
@anchor{❨321❩}@c
@conditionsubindex{invalid-ligature-opcode}@c
The Invalid Ligature Opcode compliance error.
It signals that a ligature opcode is invalid.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨247❩, , @t{opcode}}.
@item
@ref{❨601❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨322❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 13)}
@end table
@end defvr
@defvr {Slot} {opcode}
@anchor{❨323❩}@c
@slotsubindex{opcode}@c
The invalid ligature opcode.
@table @strong
@item Initargs
@t{:opcode}
@item Readers
@ref{❨247❩, , @t{opcode}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-original-design-size}
@anchor{❨366❩}@c
@conditionsubindex{invalid-original-design-size}@c
The Invalid Original Design Size compliance warning.@*
It signals that@comma{} although overridden explicitly@comma{} an original design size was
too small (< 1pt).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨603❩, , @t{print-object}}.
@item
@ref{❨334❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨367❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 10)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨368❩}@c
@slotsubindex{value}@c
The invalid original design size.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨334❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-padded-string}
@anchor{❨421❩}@c
@conditionsubindex{invalid-padded-string}@c
The Invalid Padded String compliance error.@*
It signals that a padded string is not in BCPL format (it contains parentheses
or non-ASCII characters).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨98❩, , @t{padded-string}}.
@item
@ref{❨176❩, , @t{tfm-compliance-error}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨606❩, , @t{print-object}}.
@item
@ref{❨37❩, , @t{str}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨422❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 10)}
@end table
@end defvr
@defvr {Slot} {str}
@anchor{❨423❩}@c
@slotsubindex{str}@c
The invalid string.
@table @strong
@item Initargs
@t{:str}
@item Readers
@ref{❨37❩, , @t{str}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-padded-string-length}
@anchor{❨193❩}@c
@conditionsubindex{invalid-padded-string-length}@c
The Invalid Padded String Length compliance error.@*
It signals that the declared length of a padded string is greater than its
maximum.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨98❩, , @t{padded-string}}.
@item
@ref{❨176❩, , @t{tfm-compliance-error}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨60❩, , @t{pad}}.
@item
@ref{❨590❩, , @t{print-object}}.
@item
@ref{❨337❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨194❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 10)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨195❩}@c
@slotsubindex{value}@c
The invalid length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨337❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {pad}
@anchor{❨196❩}@c
@slotsubindex{pad}@c
The string's maximum length.
@table @strong
@item Initargs
@t{:pad}
@item Readers
@ref{❨60❩, , @t{pad}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-section-lengths}
@anchor{❨160❩}@c
@conditionsubindex{invalid-section-lengths}@c
The Section Lengths compliance error.@*
It signals that LF != 6 + LH + NC + NW + NH + ND + NI + NL + NK + NE + NP.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨290❩, , @t{lf}}.
@item
@ref{❨304❩, , @t{lh}}.
@item
@ref{❨245❩, , @t{nc}}.
@item
@ref{❨355❩, , @t{nd}}.
@item
@ref{❨389❩, , @t{ne}}.
@item
@ref{❨205❩, , @t{nh}}.
@item
@ref{❨79❩, , @t{ni}}.
@item
@ref{❨284❩, , @t{nk}}.
@item
@ref{❨222❩, , @t{nl}}.
@item
@ref{❨66❩, , @t{np}}.
@item
@ref{❨83❩, , @t{nw}}.
@item
@ref{❨587❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨161❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@defvr {Slot} {lf}
@anchor{❨162❩}@c
@slotsubindex{lf}@c
The declared length of the file.
@table @strong
@item Initargs
@t{:lf}
@item Readers
@ref{❨290❩, , @t{lf}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {lh}
@anchor{❨163❩}@c
@slotsubindex{lh}@c
The declared length of the file header.
@table @strong
@item Initargs
@t{:lh}
@item Readers
@ref{❨304❩, , @t{lh}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nc}
@anchor{❨164❩}@c
@slotsubindex{nc}@c
EC - BC + 1.
@table @strong
@item Initargs
@t{:nc}
@item Readers
@ref{❨245❩, , @t{nc}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nw}
@anchor{❨165❩}@c
@slotsubindex{nw}@c
The declared length of the width table.
@table @strong
@item Initargs
@t{:nw}
@item Readers
@ref{❨83❩, , @t{nw}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nh}
@anchor{❨166❩}@c
@slotsubindex{nh}@c
The declared length of the height table.
@table @strong
@item Initargs
@t{:nh}
@item Readers
@ref{❨205❩, , @t{nh}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nd}
@anchor{❨167❩}@c
@slotsubindex{nd}@c
The declared length of the depth table.
@table @strong
@item Initargs
@t{:nd}
@item Readers
@ref{❨355❩, , @t{nd}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {ni}
@anchor{❨168❩}@c
@slotsubindex{ni}@c
The declared length of the italic correction table.
@table @strong
@item Initargs
@t{:ni}
@item Readers
@ref{❨79❩, , @t{ni}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nl}
@anchor{❨169❩}@c
@slotsubindex{nl}@c
The declared length of the lig/kern table.
@table @strong
@item Initargs
@t{:nl}
@item Readers
@ref{❨222❩, , @t{nl}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {nk}
@anchor{❨170❩}@c
@slotsubindex{nk}@c
The declared length of the kern table.
@table @strong
@item Initargs
@t{:nk}
@item Readers
@ref{❨284❩, , @t{nk}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {ne}
@anchor{❨171❩}@c
@slotsubindex{ne}@c
The declared length of the extensible character table.
@table @strong
@item Initargs
@t{:ne}
@item Readers
@ref{❨389❩, , @t{ne}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {np}
@anchor{❨172❩}@c
@slotsubindex{np}@c
The declared length of the parameters section.
@table @strong
@item Initargs
@t{:np}
@item Readers
@ref{❨66❩, , @t{np}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-index}
@anchor{❨260❩}@c
@conditionsubindex{invalid-table-index}@c
The Invalid Table Index compliance error.@*
It signals that a table index is greater than its largest value.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨445❩, , @t{tfm-table-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨365❩, , @t{largest}}.
@item
@ref{❨596❩, , @t{print-object}}.
@item
@ref{❨333❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨261❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@defvr {Slot} {index}
@anchor{❨262❩}@c
@slotsubindex{index}@c
The invalid index.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨333❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {largest}
@anchor{❨263❩}@c
@slotsubindex{largest}@c
The largest index.
@table @strong
@item Initargs
@t{:largest}
@item Readers
@ref{❨365❩, , @t{largest}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-length}
@anchor{❨73❩}@c
@conditionsubindex{invalid-table-length}@c
The Invalid Table Length compliance error.@*
It signals that a declared TFM table's length is out of range.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨445❩, , @t{tfm-table-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨364❩, , @t{largest}}.
@item
@ref{❨579❩, , @t{print-object}}.
@item
@ref{❨48❩, , @t{smallest}}.
@item
@ref{❨330❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨74❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 11)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨75❩}@c
@slotsubindex{value}@c
The invalid table length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨330❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {smallest}
@anchor{❨76❩}@c
@slotsubindex{smallest}@c
The smallest table length.
@table @strong
@item Initargs
@t{:smallest}
@item Readers
@ref{❨48❩, , @t{smallest}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {largest}
@anchor{❨77❩}@c
@slotsubindex{largest}@c
The largest table length.
@table @strong
@item Initargs
@t{:largest}
@item Readers
@ref{❨364❩, , @t{largest}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-start}
@anchor{❨214❩}@c
@conditionsubindex{invalid-table-start}@c
The Invalid Table Start compliance error.@*
It signals that the first value in a TFM table is not 0.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨445❩, , @t{tfm-table-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨592❩, , @t{print-object}}.
@item
@ref{❨332❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨215❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 11)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨216❩}@c
@slotsubindex{value}@c
The invalid first table value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨332❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {ligature-cycle}
@anchor{❨264❩}@c
@conditionsubindex{ligature-cycle}@c
The Ligature Cycle compliance error.@*
It signals that a ligature introduces a cycle for a cons of characters.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨419❩, , @t{characters}}.
@item
@ref{❨431❩, , @t{ligature}}.
@item
@ref{❨597❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨265❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 13)}
@end table
@end defvr
@defvr {Slot} {ligature}
@anchor{❨266❩}@c
@slotsubindex{ligature}@c
The ligature introducing a cycle.
@table @strong
@item Initargs
@t{:ligature}
@item Readers
@ref{❨431❩, , @t{ligature}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {characters}
@anchor{❨267❩}@c
@slotsubindex{characters}@c
The cons of characters involved in the ligature.
@table @strong
@item Initargs
@t{:characters}
@item Readers
@ref{❨419❩, , @t{characters}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {no-boundary-character}
@anchor{❨285❩}@c
@conditionsubindex{no-boundary-character}@c
The No Boundary Character compliance error.@*
It signals that a boundary character ligature/kerning program was found@comma{}
without a boundary character being defined.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@ref{❨599❩, , @t{print-object}}.
@item Direct slots
@defvr {Slot} {section}
@anchor{❨286❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 13)}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {not-extensible}
@anchor{❨187❩}@c
@conditionsubindex{not-extensible}@c
The Not Extensible usage error.@*
It signals an attempt at accessing the extension recipe of a non extensible
character.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Direct superclasses
@ref{❨291❩, , @t{tfm-usage-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨213❩, , @t{chr}}.
@item
@ref{❨589❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {chr}
@anchor{❨188❩}@c
@slotsubindex{chr}@c
The non extensible character.
@table @strong
@item Initargs
@t{:chr}
@item Readers
@ref{❨213❩, , @t{chr}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {padded-string}
@anchor{❨98❩}@c
@conditionsubindex{padded-string}@c
The Padded String condition.@*
This is a mixin for all conditions related to padded strings.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@ref{❨206❩, , @t{tfm}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨421❩, , @t{invalid-padded-string}}.
@item
@ref{❨193❩, , @t{invalid-padded-string-length}}.
@item
@ref{❨43❩, , @t{padded-string-overflow}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {padded-string-overflow}
@anchor{❨43❩}@c
@conditionsubindex{padded-string-overflow}@c
The Padded String Overflow compliance warning.@*
It signals that a padded string contains non null characters after its
declared length.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨98❩, , @t{padded-string}}.
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨200❩, , @t{overflow}}.
@item
@ref{❨573❩, , @t{print-object}}.
@item
@ref{❨574❩, , @t{print-object}}.
@end itemize
@item Direct slots
@defvr {Slot} {overflow}
@anchor{❨44❩}@c
@slotsubindex{overflow}@c
The string's overflow.
@table @strong
@item Initargs
@t{:overflow}
@item Readers
@ref{❨200❩, , @t{overflow}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {spurious-char-info}
@anchor{❨380❩}@c
@conditionsubindex{spurious-char-info}@c
The Spurious Char Info compliance warning.@*
It signals that a char-info for a non-existent character (that is@comma{} with a
width-index of 0) is not completely zero'ed out.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Direct superclasses
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨224❩, , @t{char-info}}.
@item
@ref{❨604❩, , @t{print-object}}.
@item
@ref{❨425❩, , @t{remainder}}.
@item
@ref{❨85❩, , @t{tag}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨381❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 11)}
@end table
@end defvr
@defvr {Slot} {char-info}
@anchor{❨382❩}@c
@slotsubindex{char-info}@c
The culprit char-info structure.
@table @strong
@item Initargs
@t{:char-info}
@item Readers
@ref{❨224❩, , @t{char-info}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {tag}
@anchor{❨383❩}@c
@slotsubindex{tag}@c
The original tag.
@table @strong
@item Initargs
@t{:tag}
@item Readers
@ref{❨85❩, , @t{tag}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {remainder}
@anchor{❨384❩}@c
@slotsubindex{remainder}@c
The original remainder.
@table @strong
@item Initargs
@t{:remainder}
@item Readers
@ref{❨425❩, , @t{remainder}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm}
@anchor{❨206❩}@c
@conditionsubindex{tfm}@c
The TFM root condition.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@t{condition}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨98❩, , @t{padded-string}}.
@item
@ref{❨70❩, , @t{tfm-compliance}}.
@item
@ref{❨40❩, , @t{tfm-error}}.
@item
@ref{❨294❩, , @t{tfm-usage}}.
@item
@ref{❨154❩, , @t{tfm-warning}}.
@end itemize
@item Direct methods
@ref{❨234❩, , @t{context}}.
@item Direct slots
@defvr {Slot} {context}
@anchor{❨207❩}@c
@slotsubindex{context}@c
The context in which the condition was signalled.
@table @strong
@item Initform
@t{(quote nil)}
@item Readers
@ref{❨234❩, , @t{context}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm-compliance}
@anchor{❨70❩}@c
@conditionsubindex{tfm-compliance}@c
The TFM Compliance root condition.@*
This is the mixin for conditions related to TFM compliance.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@ref{❨206❩, , @t{tfm}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨578❩, , @t{print-object}}.
@item
@ref{❨209❩, , @t{section}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨71❩}@c
@slotsubindex{section}@c
The related TFtoPL section.
@table @strong
@item Allocation
@t{:class}
@item Initform
@t{(quote nil)}
@item Readers
@ref{❨209❩, , @t{section}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm-compliance-error}
@anchor{❨176❩}@c
@conditionsubindex{tfm-compliance-error}@c
The TFM compliance errors root condition.@*
This is the root condition for errors related to TFM compliance.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨70❩, , @t{tfm-compliance}}.
@item
@ref{❨40❩, , @t{tfm-error}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨239❩, , @t{character-list-cycle}}.
@item
@ref{❨386❩, , @t{file-underflow}}.
@item
@ref{❨451❩, , @t{fix-word-overflow}}.
@item
@ref{❨258❩, , @t{invalid-character-code}}.
@item
@ref{❨86❩, , @t{invalid-character-range}}.
@item
@ref{❨278❩, , @t{invalid-design-size}}.
@item
@ref{❨49❩, , @t{invalid-header-length}}.
@item
@ref{❨321❩, , @t{invalid-ligature-opcode}}.
@item
@ref{❨421❩, , @t{invalid-padded-string}}.
@item
@ref{❨193❩, , @t{invalid-padded-string-length}}.
@item
@ref{❨160❩, , @t{invalid-section-lengths}}.
@item
@ref{❨264❩, , @t{ligature-cycle}}.
@item
@ref{❨285❩, , @t{no-boundary-character}}.
@item
@ref{❨445❩, , @t{tfm-table-error}}.
@item
@ref{❨67❩, , @t{u16-overflow}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-compliance-warning}
@anchor{❨437❩}@c
@conditionsubindex{tfm-compliance-warning}@c
The TFM  compliance warnings root condition.@*
This is the root condition for warnings related to TFM compliance.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨70❩, , @t{tfm-compliance}}.
@item
@ref{❨154❩, , @t{tfm-warning}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨299❩, , @t{file-overflow}}.
@item
@ref{❨366❩, , @t{invalid-original-design-size}}.
@item
@ref{❨43❩, , @t{padded-string-overflow}}.
@item
@ref{❨380❩, , @t{spurious-char-info}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-error}
@anchor{❨40❩}@c
@conditionsubindex{tfm-error}@c
The TFM errors root condition.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@t{error}.
@item
@ref{❨206❩, , @t{tfm}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item
@ref{❨291❩, , @t{tfm-usage-error}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-table-error}
@anchor{❨445❩}@c
@conditionsubindex{tfm-table-error}@c
The TFM table errors root condition.@*
This is the root condition for errors related to TFM tables.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨260❩, , @t{invalid-table-index}}.
@item
@ref{❨73❩, , @t{invalid-table-length}}.
@item
@ref{❨214❩, , @t{invalid-table-start}}.
@end itemize
@item Direct methods
@ref{❨250❩, , @t{name}}.
@item Direct slots
@defvr {Slot} {name}
@anchor{❨446❩}@c
@slotsubindex{name}@c
The table's name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨250❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm-usage}
@anchor{❨294❩}@c
@conditionsubindex{tfm-usage}@c
The TFM Usage root condition.@*
This is the mixin for conditions related to the use of the library.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@ref{❨206❩, , @t{tfm}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨291❩, , @t{tfm-usage-error}}.
@item
@ref{❨153❩, , @t{tfm-usage-warning}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-usage-error}
@anchor{❨291❩}@c
@conditionsubindex{tfm-usage-error}@c
The TFM usage errors root condition.@*
This is the root condition for errors related to the use of the library.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨40❩, , @t{tfm-error}}.
@item
@ref{❨294❩, , @t{tfm-usage}}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨173❩, , @t{different-fonts}}.
@item
@ref{❨447❩, , @t{invalid-custom-design-size}}.
@item
@ref{❨57❩, , @t{invalid-custom-name}}.
@item
@ref{❨187❩, , @t{not-extensible}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-usage-warning}
@anchor{❨153❩}@c
@conditionsubindex{tfm-usage-warning}@c
The TFM usage warnings root condition.@*
This is the root condition for warnings related to the use of the library.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨294❩, , @t{tfm-usage}}.
@item
@ref{❨154❩, , @t{tfm-warning}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-warning}
@anchor{❨154❩}@c
@conditionsubindex{tfm-warning}@c
The TFM warnings root condition.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@itemize @bullet
@item
@ref{❨206❩, , @t{tfm}}.
@item
@t{warning}.
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{❨155❩, , @t{extended-tfm}}.
@item
@ref{❨437❩, , @t{tfm-compliance-warning}}.
@item
@ref{❨153❩, , @t{tfm-usage-warning}}.
@end itemize
@end table
@end deftp
@deftp {Condition} {u16-overflow}
@anchor{❨67❩}@c
@conditionsubindex{u16-overflow}@c
The U16 Overflow compliance error.@*
It signals that an unsigned 16 bits integer is greater than 2^15.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct superclasses
@ref{❨176❩, , @t{tfm-compliance-error}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨577❩, , @t{print-object}}.
@item
@ref{❨339❩, , @t{value}}.
@end itemize
@item Direct slots
@defvr {Slot} {section}
@anchor{❨68❩}@c
@slotsubindex{section}@c
@table @strong
@item Initform
@t{(quote 8)}
@end table
@end defvr
@defvr {Slot} {value}
@anchor{❨69❩}@c
@slotsubindex{value}@c
The faulty value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{❨339❩, , @t{value}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp

@node Public structures, Public classes, Public conditions, Public Interface
@subsection Structures
@deftp {Structure} {char-info}
@anchor{❨225❩}@c
@structuresubindex{char-info}@c
The Char Info structure.@*
This structure is used to store decoded information from the char-info table
(see TeX: the Program [543]). Only one of LIG/KERN-INDEX@comma{} NEXT-CHAR@comma{} and
  EXTEN-INDEX may be non-null at a time (see TeX: the Program [544]).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {width-index}
@anchor{❨226❩}@c
@slotsubindex{width-index}@c
@table @strong
@item Readers
@ref{❨467❩, , @t{width-index}}.
@item Writers
@ref{❨468❩, , @t{(setf width-index)}}.
@end table
@end defvr
@defvr {Slot} {height-index}
@anchor{❨227❩}@c
@slotsubindex{height-index}@c
@table @strong
@item Readers
@ref{❨511❩, , @t{height-index}}.
@item Writers
@ref{❨512❩, , @t{(setf height-index)}}.
@end table
@end defvr
@defvr {Slot} {depth-index}
@anchor{❨228❩}@c
@slotsubindex{depth-index}@c
@table @strong
@item Readers
@ref{❨532❩, , @t{depth-index}}.
@item Writers
@ref{❨533❩, , @t{(setf depth-index)}}.
@end table
@end defvr
@defvr {Slot} {italic-index}
@anchor{❨229❩}@c
@slotsubindex{italic-index}@c
@table @strong
@item Readers
@ref{❨499❩, , @t{italic-index}}.
@item Writers
@ref{❨500❩, , @t{(setf italic-index)}}.
@end table
@end defvr
@defvr {Slot} {lig/kern-index}
@anchor{❨230❩}@c
@slotsubindex{lig/kern-index}@c
@table @strong
@item Readers
@ref{❨495❩, , @t{lig/kern-index}}.
@item Writers
@ref{❨496❩, , @t{(setf lig/kern-index)}}.
@end table
@end defvr
@defvr {Slot} {next-char}
@anchor{❨231❩}@c
@slotsubindex{next-char}@c
@table @strong
@item Readers
@ref{❨483❩, , @t{next-char}}.
@item Writers
@ref{❨484❩, , @t{(setf next-char)}}.
@end table
@end defvr
@defvr {Slot} {exten-index}
@anchor{❨232❩}@c
@slotsubindex{exten-index}@c
@table @strong
@item Readers
@ref{❨519❩, , @t{exten-index}}.
@item Writers
@ref{❨520❩, , @t{(setf exten-index)}}.
@end table
@end defvr
@end table
@end deftp

@node Public classes, , Public structures, Public Interface
@subsection Classes
@deftp {Class} {char-info-table-context}
@anchor{❨41❩}@c
@classsubindex{char-info-table-context}@c
The Char Info Table Context class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨217❩, , @t{table-context}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨457❩, , @t{code}}.
@item
@ref{❨427❩, , @t{context-string}}.
@end itemize
@item Direct slots
@defvr {Slot} {code}
@anchor{❨42❩}@c
@slotsubindex{code}@c
The corresponding character code.
@table @strong
@item Initargs
@t{:code}
@item Readers
@ref{❨457❩, , @t{code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {character-metrics}
@anchor{❨340❩}@c
@classsubindex{character-metrics}@c
The Character Metrics class.@*
This class represents decoded character information. Within the context of
this library@comma{} the term "character" denotes an instance of this class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨352❩, , @t{bottom-character}}.
@item
@ref{❨459❩, , @t{code}}.
@item
@ref{❨293❩, , @t{depth}}.
@item
@ref{❨474❩, , @t{extension-recipe}}.
@item
@ref{❨112❩, , @t{font}}.
@item
@ref{❨450❩, , @t{height}}.
@item
@ref{❨243❩, , @t{italic-correction}}.
@item
@ref{❨109❩, , @t{middle-character}}.
@item
@ref{❨362❩, , @t{next-character}}.
@item
@ref{❨602❩, , @t{print-object}}.
@item
@ref{❨441❩, , @t{repeated-character}}.
@item
@ref{❨308❩, , @t{top-character}}.
@item
@ref{❨325❩, , @t{width}}.
@end itemize
@item Direct slots
@defvr {Slot} {code}
@anchor{❨341❩}@c
@slotsubindex{code}@c
The character's numerical code.
@table @strong
@item Initargs
@t{:code}
@item Readers
@ref{❨459❩, , @t{code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {font}
@anchor{❨342❩}@c
@slotsubindex{font}@c
The character's font.
@table @strong
@item Initargs
@t{:font}
@item Readers
@ref{❨112❩, , @t{font}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {width}
@anchor{❨343❩}@c
@slotsubindex{width}@c
The character's width.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:width}
@item Readers
@ref{❨325❩, , @t{width}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {height}
@anchor{❨344❩}@c
@slotsubindex{height}@c
The character's height.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:height}
@item Readers
@ref{❨450❩, , @t{height}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {depth}
@anchor{❨345❩}@c
@slotsubindex{depth}@c
The character's depth.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:depth}
@item Readers
@ref{❨293❩, , @t{depth}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {italic-correction}
@anchor{❨346❩}@c
@slotsubindex{italic-correction}@c
The character's italic correction.@*
TeX uses this value for regular characters followed by the command /@comma{} and
also in math mode for superscript placement. It is expressed in design size
units@comma{} or in TeX point units if the font is frozen.
@table @strong
@item Initargs
@t{:italic-correction}
@item Readers
@ref{❨243❩, , @t{italic-correction}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {next-character}
@anchor{❨347❩}@c
@slotsubindex{next-character}@c
The next character in a character list.@*
This slot is non-null only if the character is part of a chain of characters
of ascending size@comma{} and not the last one (see TeX: the Program [544]). It is
mutually exclusive with the EXTENSION-RECIPE slot@comma{} and also with the existence
of a ligature or kerning program for this character.
@table @strong
@item Readers
@ref{❨362❩, , @t{next-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {extension-recipe}
@anchor{❨348❩}@c
@slotsubindex{extension-recipe}@c
The character's extension recipe@comma{} or NIL.@*
This slot is non-null only if this character is extensible (see TeX: the
Program [544]). It is mutually exclusive with the NEXT-CHARACTER slot@comma{} and
also with the existence of a ligature or kerning program for this character.
@table @strong
@item Readers
@ref{❨474❩, , @t{extension-recipe}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {context}
@anchor{❨235❩}@c
@classsubindex{context}@c
The CONTEXT class.@*
This is the base class for classes representing contexts in which
conditions are signalled.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨237❩, , @t{padded-string-context}}.
@item
@ref{❨217❩, , @t{table-context}}.
@end itemize
@end table
@end deftp
@deftp {Class} {font}
@anchor{❨113❩}@c
@classsubindex{font}@c
The TeX Font Metrics class.@*
This class represents decoded font information. Within the context of this
library@comma{} the term "font" denotes an instance of this class@comma{} or of one of its
subclasses.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct subclasses
@itemize @bullet
@item
@ref{❨146❩, , @t{math-extension-font}}.
@item
@ref{❨400❩, , @t{math-symbols-font}}.
@end itemize
@item Direct methods
@itemize @bullet
@item
@ref{❨95❩, , @t{7bits-safe}}.
@item
@ref{❨56❩, , @t{boundary-character}}.
@item
@ref{❨53❩, , @t{character-count}}.
@item
@ref{❨420❩, , @t{characters}}.
@item
@ref{❨288❩, , @t{checksum}}.
@item
@ref{❨105❩, , @t{(setf design-size)}}.
@item
@ref{❨100❩, , @t{design-size}}.
@item
@ref{❨379❩, , @t{em}}.
@item
@ref{❨444❩, , @t{encoding}}.
@item
@ref{❨255❩, , @t{ex}}.
@item
@ref{❨180❩, , @t{expansion}}.
@item
@ref{❨372❩, , @t{extra-space}}.
@item
@ref{❨46❩, , @t{face-code}}.
@item
@ref{❨298❩, , @t{face-number}}.
@item
@ref{❨93❩, , @t{family}}.
@item
@ref{❨203❩, , @t{file}}.
@item
@ref{❨313❩, , @t{frozen}}.
@item
@ref{❨583❩, , @t{initialize-instance}}.
@item
@ref{❨182❩, , @t{interword-shrink}}.
@item
@ref{❨271❩, , @t{interword-space}}.
@item
@ref{❨269❩, , @t{interword-stretch}}.
@item
@ref{❨490❩, , @t{kerns}}.
@item
@ref{❨465❩, , @t{ligatures}}.
@item
@ref{❨306❩, , @t{max-code}}.
@item
@ref{❨360❩, , @t{min-code}}.
@item
@ref{❨253❩, , @t{name}}.
@item
@ref{❨277❩, , @t{original-design-size}}.
@item
@ref{❨328❩, , @t{parameters}}.
@item
@ref{❨584❩, , @t{print-object}}.
@item
@ref{❨417❩, , @t{slant}}.
@item
@ref{❨145❩, , @t{slope}}.
@item
@ref{❨186❩, , @t{weight}}.
@end itemize
@item Direct slots
@defvr {Slot} {file}
@anchor{❨114❩}@c
@slotsubindex{file}@c
The font's file.
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{❨203❩, , @t{file}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {name}
@anchor{❨115❩}@c
@slotsubindex{name}@c
The font's name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨253❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {checksum}
@anchor{❨116❩}@c
@slotsubindex{checksum}@c
The font's checksum.
@table @strong
@item Readers
@ref{❨288❩, , @t{checksum}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {frozen}
@anchor{❨117❩}@c
@slotsubindex{frozen}@c
Whether the font is frozen.
@table @strong
@item Readers
@ref{❨313❩, , @t{frozen}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {design-size}
@anchor{❨118❩}@c
@slotsubindex{design-size}@c
The font's design size@comma{} in units of TeX points.
@table @strong
@item Initargs
@t{:design-size}
@item Readers
@ref{❨100❩, , @t{design-size}}.
@item Writers
@ref{❨105❩, , @t{(setf design-size)}}.
@end table
@end defvr
@defvr {Slot} {original-design-size}
@anchor{❨119❩}@c
@slotsubindex{original-design-size}@c
The font's original design size@comma{} in units of TeX points.
@table @strong
@item Readers
@ref{❨277❩, , @t{original-design-size}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {encoding}
@anchor{❨120❩}@c
@slotsubindex{encoding}@c
The font's character coding scheme (a BCPL string)@comma{} or NIL.
@table @strong
@item Readers
@ref{❨444❩, , @t{encoding}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {family}
@anchor{❨121❩}@c
@slotsubindex{family}@c
The font's family (a BCPL string)@comma{} or NIL.
@table @strong
@item Readers
@ref{❨93❩, , @t{family}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {7bits-safe}
@anchor{❨122❩}@c
@slotsubindex{7bits-safe}@c
Whether the font is 7 bits safe (0 or 1)@comma{} or NIL.@*
When 1@comma{} it means that no character of code lesser than 128 can lead to a
character of code greater than 128 by ways of ligatures or extensible
recipes.
@table @strong
@item Readers
@ref{❨95❩, , @t{7bits-safe}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {face-number}
@anchor{❨123❩}@c
@slotsubindex{face-number}@c
The font's face number@comma{} or NIL.
@table @strong
@item Readers
@ref{❨298❩, , @t{face-number}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {weight}
@anchor{❨124❩}@c
@slotsubindex{weight}@c
The font's weight (:medium@comma{} :bold@comma{} :light)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{❨186❩, , @t{weight}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {slope}
@anchor{❨125❩}@c
@slotsubindex{slope}@c
The font's slope (:roman@comma{} :italic)@comma{} or NIL.@*
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{❨145❩, , @t{slope}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {expansion}
@anchor{❨126❩}@c
@slotsubindex{expansion}@c
The font's expansion (:regular@comma{} :condensed@comma{} :extended)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{❨180❩, , @t{expansion}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {face-code}
@anchor{❨127❩}@c
@slotsubindex{face-code}@c
The font's 3-letters face code@comma{} or NIL.@*
When available@comma{} it is the concatenation of the upcased first letters of the
font's weight@comma{} slope@comma{} and expansion.
@table @strong
@item Readers
@ref{❨46❩, , @t{face-code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {slant}
@anchor{❨128❩}@c
@slotsubindex{slant}@c
The font's slant (a scalar ratio).
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨417❩, , @t{slant}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {interword-space}
@anchor{❨129❩}@c
@slotsubindex{interword-space}@c
The font's normal interword space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨271❩, , @t{interword-space}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {interword-stretch}
@anchor{❨130❩}@c
@slotsubindex{interword-stretch}@c
The font's interword stretchability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨269❩, , @t{interword-stretch}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {interword-shrink}
@anchor{❨131❩}@c
@slotsubindex{interword-shrink}@c
The font's interword shrinkability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨182❩, , @t{interword-shrink}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {ex}
@anchor{❨132❩}@c
@slotsubindex{ex}@c
The font's ex size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨255❩, , @t{ex}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {em}
@anchor{❨133❩}@c
@slotsubindex{em}@c
The font's em size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨379❩, , @t{em}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {extra-space}
@anchor{❨134❩}@c
@slotsubindex{extra-space}@c
The font's extra space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.@*

This is the additional space to put at the end of sentences.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨372❩, , @t{extra-space}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {parameters}
@anchor{❨135❩}@c
@slotsubindex{parameters}@c
The font's additional parameters array@comma{} or NIL.@*
Parameters are expressed in design size units@comma{} or in TeX point units if the
font is frozen.
@table @strong
@item Readers
@ref{❨328❩, , @t{parameters}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {min-code}
@anchor{❨136❩}@c
@slotsubindex{min-code}@c
The font's smallest character code@comma{} or NIL if the font is empty.
@table @strong
@item Readers
@ref{❨360❩, , @t{min-code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {max-code}
@anchor{❨137❩}@c
@slotsubindex{max-code}@c
The font's largest character code@comma{} or NIL if the font is empty.
@table @strong
@item Readers
@ref{❨306❩, , @t{max-code}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {characters}
@anchor{❨138❩}@c
@slotsubindex{characters}@c
The font's characters.@*
This is a hash table associating character codes with characters.
@table @strong
@item Initform
@t{(make-hash-table :test (function eq))}
@item Readers
@ref{❨420❩, , @t{characters}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {character-count}
@anchor{❨139❩}@c
@slotsubindex{character-count}@c
The font's number of characters.@*
The character count does not include the boundary character@comma{} unless that
character really exists in the font (has non-zerop metrics).
@table @strong
@item Readers
@ref{❨53❩, , @t{character-count}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {ligatures}
@anchor{❨140❩}@c
@slotsubindex{ligatures}@c
The font's ligatures.@*
This is a hash table associating conses of characters with the corresponding
ligature.
@table @strong
@item Initform
@t{(make-hash-table :test (function equal))}
@item Readers
@ref{❨465❩, , @t{ligatures}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {kerns}
@anchor{❨141❩}@c
@slotsubindex{kerns}@c
The font's kerns.@*
This is a hash table associating conses of characters with the corresponding
kern. They are expressed in design size units@comma{} or in TeX point units if
the font is frozen.
@table @strong
@item Initform
@t{(make-hash-table :test (function equal))}
@item Readers
@ref{❨490❩, , @t{kerns}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {boundary-character}
@anchor{❨142❩}@c
@slotsubindex{boundary-character}@c
The font's boundary character@comma{} or NIL.@*
This character is also accessible by code@comma{} like normal ones. However@comma{} it is
the only character the code of which may be outside [MIN-CODE@comma{}MAX-CODE] (see
TeX: the Program [545]). Finally@comma{} this character is not included in the
character count@comma{} unless it exists for real in the font (has non-zero
metrics).
@table @strong
@item Readers
@ref{❨56❩, , @t{boundary-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {ligature}
@anchor{❨432❩}@c
@classsubindex{ligature}@c
The Ligature class.@*
This class represents a decoded ligature program. Within the context of this
library@comma{} the term "ligature" denotes an instance of this class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨184❩, , @t{composite}}.
@item
@ref{❨81❩, , @t{delete-after}}.
@item
@ref{❨316❩, , @t{delete-before}}.
@item
@ref{❨318❩, , @t{pass-over}}.
@end itemize
@item Direct slots
@defvr {Slot} {composite}
@anchor{❨433❩}@c
@slotsubindex{composite}@c
The character to insert between the two original ones.
@table @strong
@item Initargs
@t{:composite}
@item Readers
@ref{❨184❩, , @t{composite}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {delete-before}
@anchor{❨434❩}@c
@slotsubindex{delete-before}@c
Whether to delete the character before the ligature.
@table @strong
@item Initargs
@t{:delete-before}
@item Readers
@ref{❨316❩, , @t{delete-before}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {delete-after}
@anchor{❨435❩}@c
@slotsubindex{delete-after}@c
Whether to delete the character after the ligature.
@table @strong
@item Initargs
@t{:delete-after}
@item Readers
@ref{❨81❩, , @t{delete-after}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {pass-over}
@anchor{❨436❩}@c
@slotsubindex{pass-over}@c
The number of characters to skip for reaching the next character.
@table @strong
@item Initargs
@t{:pass-over}
@item Readers
@ref{❨318❩, , @t{pass-over}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {math-extension-font}
@anchor{❨146❩}@c
@classsubindex{math-extension-font}@c
The Math Extension Font class.@*
This class represents fonts with the "TeX math extension" character coding
scheme.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨113❩, , @t{font}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨395❩, , @t{big-op-spacing1}}.
@item
@ref{❨350❩, , @t{big-op-spacing2}}.
@item
@ref{❨211❩, , @t{big-op-spacing3}}.
@item
@ref{❨320❩, , @t{big-op-spacing4}}.
@item
@ref{❨198❩, , @t{big-op-spacing5}}.
@item
@ref{❨91❩, , @t{default-rule-thickness}}.
@item
@ref{❨508❩, , @t{parse-parameters}}.
@item
@ref{❨553❩, , @t{scale}}.
@end itemize
@item Direct slots
@defvr {Slot} {default-rule-thickness}
@anchor{❨147❩}@c
@slotsubindex{default-rule-thickness}@c
The font's default rule thickness.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨91❩, , @t{default-rule-thickness}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {big-op-spacing1}
@anchor{❨148❩}@c
@slotsubindex{big-op-spacing1}@c
The font's BIG-OP-SPACING1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨395❩, , @t{big-op-spacing1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {big-op-spacing2}
@anchor{❨149❩}@c
@slotsubindex{big-op-spacing2}@c
The font's BIG-OP-SPACING2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨350❩, , @t{big-op-spacing2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {big-op-spacing3}
@anchor{❨150❩}@c
@slotsubindex{big-op-spacing3}@c
The font's BIG-OP-SPACING3 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨211❩, , @t{big-op-spacing3}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {big-op-spacing4}
@anchor{❨151❩}@c
@slotsubindex{big-op-spacing4}@c
The font's BIG-OP-SPACING4 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨320❩, , @t{big-op-spacing4}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {big-op-spacing5}
@anchor{❨152❩}@c
@slotsubindex{big-op-spacing5}@c
The font's BIG-OP-SPACING5 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨198❩, , @t{big-op-spacing5}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {math-symbols-font}
@anchor{❨400❩}@c
@classsubindex{math-symbols-font}@c
The Math Symbols Font class.@*
This class represents fonts with the "TeX math symbols" character coding
scheme.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Direct superclasses
@ref{❨113❩, , @t{font}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨97❩, , @t{axis-height}}.
@item
@ref{❨311❩, , @t{delim1}}.
@item
@ref{❨107❩, , @t{delim2}}.
@item
@ref{❨370❩, , @t{denom1}}.
@item
@ref{❨282❩, , @t{denom2}}.
@item
@ref{❨190❩, , @t{num1}}.
@item
@ref{❨374❩, , @t{num2}}.
@item
@ref{❨62❩, , @t{num3}}.
@item
@ref{❨507❩, , @t{parse-parameters}}.
@item
@ref{❨554❩, , @t{scale}}.
@item
@ref{❨399❩, , @t{sub1}}.
@item
@ref{❨393❩, , @t{sub2}}.
@item
@ref{❨192❩, , @t{subdrop}}.
@item
@ref{❨159❩, , @t{sup1}}.
@item
@ref{❨275❩, , @t{sup2}}.
@item
@ref{❨39❩, , @t{sup3}}.
@item
@ref{❨357❩, , @t{supdrop}}.
@end itemize
@item Direct slots
@defvr {Slot} {num1}
@anchor{❨401❩}@c
@slotsubindex{num1}@c
The font's NUM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨190❩, , @t{num1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {num2}
@anchor{❨402❩}@c
@slotsubindex{num2}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨374❩, , @t{num2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {num3}
@anchor{❨403❩}@c
@slotsubindex{num3}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨62❩, , @t{num3}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {denom1}
@anchor{❨404❩}@c
@slotsubindex{denom1}@c
The font's DENOM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨370❩, , @t{denom1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {denom2}
@anchor{❨405❩}@c
@slotsubindex{denom2}@c
The font's DENOM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨282❩, , @t{denom2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sup1}
@anchor{❨406❩}@c
@slotsubindex{sup1}@c
The font's SUP1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨159❩, , @t{sup1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sup2}
@anchor{❨407❩}@c
@slotsubindex{sup2}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨275❩, , @t{sup2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sup3}
@anchor{❨408❩}@c
@slotsubindex{sup3}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨39❩, , @t{sup3}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sub1}
@anchor{❨409❩}@c
@slotsubindex{sub1}@c
The font's SUB1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨399❩, , @t{sub1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {sub2}
@anchor{❨410❩}@c
@slotsubindex{sub2}@c
The font's SUB2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨393❩, , @t{sub2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {supdrop}
@anchor{❨411❩}@c
@slotsubindex{supdrop}@c
The font's SUPDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨357❩, , @t{supdrop}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {subdrop}
@anchor{❨412❩}@c
@slotsubindex{subdrop}@c
The font's SUBDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨192❩, , @t{subdrop}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {delim1}
@anchor{❨413❩}@c
@slotsubindex{delim1}@c
The font's DELIM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨311❩, , @t{delim1}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {delim2}
@anchor{❨414❩}@c
@slotsubindex{delim2}@c
The font's DELIM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨107❩, , @t{delim2}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {axis-height}
@anchor{❨415❩}@c
@slotsubindex{axis-height}@c
The font's AXIS-HEIGHT parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{❨97❩, , @t{axis-height}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {padded-string-context}
@anchor{❨237❩}@c
@classsubindex{padded-string-context}@c
The Padded String Context class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨235❩, , @t{context}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨429❩, , @t{context-string}}.
@item
@ref{❨251❩, , @t{name}}.
@end itemize
@item Direct slots
@defvr {Slot} {name}
@anchor{❨238❩}@c
@slotsubindex{name}@c
The string name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨251❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {table-context}
@anchor{❨217❩}@c
@classsubindex{table-context}@c
The Table Context class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Direct superclasses
@ref{❨235❩, , @t{context}}.
@item Direct subclasses
@ref{❨41❩, , @t{char-info-table-context}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨428❩, , @t{context-string}}.
@item
@ref{❨397❩, , @t{index}}.
@item
@ref{❨249❩, , @t{name}}.
@item
@ref{❨178❩, , @t{size}}.
@end itemize
@item Direct slots
@defvr {Slot} {name}
@anchor{❨218❩}@c
@slotsubindex{name}@c
The table name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{❨249❩, , @t{name}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {index}
@anchor{❨219❩}@c
@slotsubindex{index}@c
The index in the table.
@table @strong
@item Initargs
@t{:index}
@item Readers
@ref{❨397❩, , @t{index}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {size}
@anchor{❨220❩}@c
@slotsubindex{size}@c
The table size.
@table @strong
@item Initargs
@t{:size}
@item Readers
@ref{❨178❩, , @t{size}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp


@c ---------
@c Internals
@c ---------
@node Internals, , Public Interface, Definitions
@section Internals
@menu
* Private constants::
* Private special variables::
* Private macros::
* Private ordinary functions::
* Private generic functions::
* Private structures::
* Private classes::
@end menu

@node Private constants, Private special variables, Internals, Internals
@subsection Constants
@defvr {Constant} {+character-metrics-dimension-slots+}
@anchor{❨526❩}@c
@constantsubindex{+character-metrics-dimension-slots+}@c
The list of dimension slot names in the CHARACTER-METRICS class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end defvr
@defvr {Constant} {+font-dimension-slots+}
@anchor{❨515❩}@c
@constantsubindex{+font-dimension-slots+}@c
The list of dimension slot names in the FONT class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end defvr
@defvr {Constant} {+math-extension-font-dimension-slots+}
@anchor{❨530❩}@c
@constantsubindex{+math-extension-font-dimension-slots+}@c
The list of dimension slot names in the MATH-EXTENSION-FONT class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end defvr
@defvr {Constant} {+math-symbols-font-dimension-slots+}
@anchor{❨559❩}@c
@constantsubindex{+math-symbols-font-dimension-slots+}@c
The list of dimension slot names in the MATH-SYMBOLS-FONT class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end defvr

@node Private special variables, Private macros, Private constants, Internals
@subsection Special variables
@defvr {Special Variable} {*configuration*}
@anchor{❨31❩}@c
@specialsubindex{*configuration*}@c
The TFM configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*

See Chapter 5 of the user manual for more information.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨15❩, , @t{configuration.lisp}}.
@end table
@end defvr
@defvr {Special Variable} {*stream*}
@anchor{❨518❩}@c
@specialsubindex{*stream*}@c
The stream being read.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end defvr

@node Private macros, Private ordinary functions, Private special variables, Internals
@subsection Macros
@deffn {Macro} {defindent} (symbol indent)
@anchor{❨33❩}@c
@macrosubindex{defindent}@c
Wrapper around `clindent' to avoid quoting SYMBOL and INDENT.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Macro} {define-condition-report} ((condition type) format-string &rest arguments)
@anchor{❨525❩}@c
@macrosubindex{define-condition-report}@c
Define a context-aware report function for a CONDITION of TYPE.@*
The reporting is ultimately done by calling FORMAT on FORMAT-STRING with
ARGUMENTS.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {define-constant} (name value &optional documentation)
@anchor{❨531❩}@c
@macrosubindex{define-constant}@c
Like DEFCONSTANT@comma{} but reuse existing value if any.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {define-extension-recipe-pseudo-accessor} (name)
@anchor{❨558❩}@c
@macrosubindex{define-extension-recipe-pseudo-accessor}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-character-metrics-dimension-slots} (var character &body body)
@anchor{❨461❩}@c
@macrosubindex{map-character-metrics-dimension-slots}@c
Map BODY on CHARACTER metrics dimension slots available as VAR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-font-dimension-slots} (var font &body body)
@anchor{❨462❩}@c
@macrosubindex{map-font-dimension-slots}@c
Map BODY on FONT dimension slots available as VAR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-math-extension-font-dimension-slots} (var font &body body)
@anchor{❨557❩}@c
@macrosubindex{map-math-extension-font-dimension-slots}@c
Map BODY on math extension FONT dimension slots available as VAR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-math-symbols-font-dimension-slots} (var font &body body)
@anchor{❨548❩}@c
@macrosubindex{map-math-symbols-font-dimension-slots}@c
Map BODY on FONT dimension slots available as VAR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Macro} {map-slots} (var object slots &body body)
@anchor{❨522❩}@c
@macrosubindex{map-slots}@c
Map BODY on OBJECT SLOTS@comma{} each in turn available as VAR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Macro} {tref} (table index)
@anchor{❨492❩}@c
@macrosubindex{tref}@c
Call TABLE-AREF@comma{} computing the table name from TABLE.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Macro} {with-condition-context} ((condition-type context-type &rest initargs) &body body)
@anchor{❨460❩}@c
@macrosubindex{with-condition-context}@c
Execute BODY within a particular condition signalling context.@*
While BODY is executing@comma{} conditions of type CONDITION-TYPE (not evaluated) are
caught and augmented with an instance of CONTEXT-TYPE (not evaluated)
initialized with INITARGS.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn

@node Private ordinary functions, Private generic functions, Private macros, Internals
@subsection Ordinary functions
@deffn {Function} {%run-ligature/kerning-program} (character index lig/kerns kerns)
@anchor{❨517❩}@c
@functionsubindex{%run-ligature/kerning-program}@c
Run a ligature/kerning program for CHARACTER.@*
The program starts at LIG/KERNS[INDEX] and uses the KERNS array. Running the
program eventually creates ligatures or kerns for CHARACTER and some other
character.@*

If an invalid index into LIG/KERNS is encountered@comma{} signal an
INVALID-TABLE-INDEX error. This error is immediately restartable with
ABORT-LIG/KERN-PROGRAM.@*

If an invalid ligature opcode is encountered@comma{} signal an
INVALID-LIGATURE-OPCODE error. This error is immediately restartable with
DISCARD-LIGATURE.@*

If an invalid index into KERNS is encountered@comma{} signal an INVALID-TABLE-INDEX
error. This error is immediately restartable with DISCARD-KERN.@*

Finally@comma{} if an invalid character code is encountered@comma{} signal an
INVALID-CHARACTER-CODE error. Depending on the context@comma{} this error is
immediately restartable with DISCARD-LIGATURE or DISCARD-KERN.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {%version} (type major minor status level name)
@anchor{❨34❩}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {apply-ligature} (ligature state)
@anchor{❨493❩}@c
@functionsubindex{apply-ligature}@c
Apply LIGATURE to STATE and return the new state.@*
STATE is a list of characters@comma{} the first two being subject to LIGATURE.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Reader} {bot} (instance)
@anchor{❨550❩}@c
@functionsubindex{bot}@c
@deffnx {Writer} {(setf bot)} (instance)
@anchor{❨551❩}@c
@functionsubindex{(setf bot)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨563❩, , @t{bot}}.
@end table
@end deffn
@deffn {Function} {char-info-p} (object)
@anchor{❨494❩}@c
@functionsubindex{char-info-p}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {clindent} (symbol indent)
@anchor{❨32❩}@c
@functionsubindex{clindent}@c
Send SYMBOL's INDENTation information to Emacs.@*
Emacs will set the 'common-lisp-indent-function property.@*
If INDENT is a symbol@comma{} use its indentation definition. Otherwise@comma{} INDENT is
considered as an indentation definition.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Function} {code-character} (code font &optional errorp)
@anchor{❨528❩}@c
@functionsubindex{code-character}@c
Return FONT's CODE character.@*
If ERRORP (the default)@comma{} check that the character exists@comma{} or signal an
INVALID-CHARACTER-CODE error. Note that a fake boundary character may be
retrieved by this function.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {(setf code-character)} (font)
@anchor{❨529❩}@c
@functionsubindex{(setf code-character)}@c
Make FONT's CHARACTER accessible by its code.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {context-format} (stream context format-string &rest arguments)
@anchor{❨556❩}@c
@functionsubindex{context-format}@c
Like FORMAT@comma{} but *STREAM* and CONTEXT-aware.@*
- When *STREAM*@comma{} report that we're reading from it to STREAM.
- When CONTEXT@comma{} report the context string to STREAM.@*
- Finally@comma{} print FORMAT-STRING with ARGUMENTS to STREAM.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-char-info} (instance)
@anchor{❨513❩}@c
@functionsubindex{copy-char-info}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-exten} (instance)
@anchor{❨534❩}@c
@functionsubindex{copy-exten}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {copy-lig/kern} (instance)
@anchor{❨538❩}@c
@functionsubindex{copy-lig/kern}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Reader} {depth-index} (instance)
@anchor{❨532❩}@c
@functionsubindex{depth-index}@c
@deffnx {Writer} {(setf depth-index)} (instance)
@anchor{❨533❩}@c
@functionsubindex{(setf depth-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨228❩, , @t{depth-index}}.
@end table
@end deffn
@deffn {Reader} {exten-index} (instance)
@anchor{❨519❩}@c
@functionsubindex{exten-index}@c
@deffnx {Writer} {(setf exten-index)} (instance)
@anchor{❨520❩}@c
@functionsubindex{(setf exten-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨232❩, , @t{exten-index}}.
@end table
@end deffn
@deffn {Function} {exten-p} (object)
@anchor{❨491❩}@c
@functionsubindex{exten-p}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {font-extension-recipe} (exten font)
@anchor{❨537❩}@c
@functionsubindex{font-extension-recipe}@c
Make an extension recipe based on EXTEN with FONT's characters.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Reader} {height-index} (instance)
@anchor{❨511❩}@c
@functionsubindex{height-index}@c
@deffnx {Writer} {(setf height-index)} (instance)
@anchor{❨512❩}@c
@functionsubindex{(setf height-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨227❩, , @t{height-index}}.
@end table
@end deffn
@deffn {Function} {i-reader} (stream subchar arg)
@anchor{❨29❩}@c
@functionsubindex{i-reader}@c
Construct a call to `defindent' by reading an argument list from STREAM.
This dispatch macro character function is installed on @hashchar{}i in the
NET.DIDIERVERNA.TFM named readtable.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn
@deffn {Reader} {italic-index} (instance)
@anchor{❨499❩}@c
@functionsubindex{italic-index}@c
@deffnx {Writer} {(setf italic-index)} (instance)
@anchor{❨500❩}@c
@functionsubindex{(setf italic-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨229❩, , @t{italic-index}}.
@end table
@end deffn
@deffn {Reader} {lig/kern-index} (instance)
@anchor{❨495❩}@c
@functionsubindex{lig/kern-index}@c
@deffnx {Writer} {(setf lig/kern-index)} (instance)
@anchor{❨496❩}@c
@functionsubindex{(setf lig/kern-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨230❩, , @t{lig/kern-index}}.
@end table
@end deffn
@deffn {Function} {lig/kern-p} (object)
@anchor{❨504❩}@c
@functionsubindex{lig/kern-p}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {load-tfm-font} (font lf)
@anchor{❨549❩}@c
@functionsubindex{load-tfm-font}@c
Parse *STREAM* of declared length LF into FONT@comma{} and return it.@*

If *STREAM* is shorter than expected@comma{} signal a FILE-UNDERFLOW error.@*
If *STREAM* is longer than expected@comma{} signal a FILE-OVERFLOW warning.@*

If the declared header length is less than 2@comma{} signal an INVALID-HEADER-LENGTH
error.@*

If BC and EC don't make sense@comma{} signal an INVALID-CHARACTER-RANGE error.@*

If the widths@comma{} heights@comma{} depths@comma{} italic corrections@comma{} or extens tables lengths
are not within the expected range@comma{} signal an INVALID-TABLE-LENGTH error.@*

Finally@comma{} if the declared sections lengths don't add up to the declared file
length@comma{} signal an INVALID-SECTION-LENGTHS error.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {make-char-info} (&key width-index height-index depth-index italic-index lig/kern-index next-char exten-index)
@anchor{❨469❩}@c
@functionsubindex{make-char-info}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {make-character-metrics} (code font width height depth italic-correction)
@anchor{❨535❩}@c
@functionsubindex{make-character-metrics}@c
Make a new CHARACTER-METRICS instance@comma{} and return it.@*
Initialize the character's CODE@comma{} FONT@comma{} WIDTH@comma{} HEIGHT@comma{} DEPTH@comma{} and
ITALIC-CORRECTION appropriately. The two remaining slots (NEXT-CHARACTER and
EXTENSION-RECIPE) will be initialized later if needed@comma{} when all character
metrics instances are created.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Function} {make-exten} (&key top mid bot rep)
@anchor{❨470❩}@c
@functionsubindex{make-exten}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {make-extension-recipe} (repeated-character &rest initargs &key top-character middle-character bottom-character)
@anchor{❨472❩}@c
@functionsubindex{make-extension-recipe}@c
Make a new EXTENSION-RECIPE with REPEATED-CHARACTER and return it.
The recipe may also have a TOP-@comma{} MIDDLE-@comma{} and BOTTOM-CHARACTER.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@end table
@end deffn
@deffn {Function} {make-lig/kern} (&key skip next op rmd)
@anchor{❨510❩}@c
@functionsubindex{make-lig/kern}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {make-ligature} (composite delete-before delete-after pass-over)
@anchor{❨480❩}@c
@functionsubindex{make-ligature}@c
Make a new LIGATURE instance@comma{} and return it.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Reader} {mid} (instance)
@anchor{❨567❩}@c
@functionsubindex{mid}@c
@deffnx {Writer} {(setf mid)} (instance)
@anchor{❨568❩}@c
@functionsubindex{(setf mid)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨562❩, , @t{mid}}.
@end table
@end deffn
@deffn {Reader} {next} (instance)
@anchor{❨497❩}@c
@functionsubindex{next}@c
@deffnx {Writer} {(setf next)} (instance)
@anchor{❨498❩}@c
@functionsubindex{(setf next)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨545❩, , @t{next}}.
@end table
@end deffn
@deffn {Reader} {next-char} (instance)
@anchor{❨483❩}@c
@functionsubindex{next-char}@c
@deffnx {Writer} {(setf next-char)} (instance)
@anchor{❨484❩}@c
@functionsubindex{(setf next-char)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨231❩, , @t{next-char}}.
@end table
@end deffn
@deffn {Reader} {op} (instance)
@anchor{❨539❩}@c
@functionsubindex{op}@c
@deffnx {Writer} {(setf op)} (instance)
@anchor{❨540❩}@c
@functionsubindex{(setf op)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨546❩, , @t{op}}.
@end table
@end deffn
@deffn {Function} {parse-character-information} (nc nw nh nd ni nl nk ne font)
@anchor{❨501❩}@c
@functionsubindex{parse-character-information}@c
Parse the 8 character information tables from *STREAM* into FONT.@*
NC (EC - BC + 1)@comma{} NW@comma{} NH@comma{} ND@comma{} NI@comma{} NL@comma{} NK@comma{} and NE are the declared numbers of
entries in the 8 tables@comma{} that is@comma{} the char infos@comma{} widths@comma{} heights@comma{} depths@comma{}
italic corrections@comma{} lig/kern instructions@comma{} kerns@comma{} and extens respectively.

If a char info structure with a width index of 0 is not completely zero'ed
out@comma{} signal an SPURIOUS-CHAR-INFO warning.@*

If the first entry in the widths@comma{} heights@comma{} depths@comma{} or italic corrections table
is not 0@comma{} signal an INVALID-TABLE-START error. This error is immediately
restartable with SET-TO-ZERO.@*

If an index into the widths@comma{} heights@comma{} depths@comma{} or italic corrections tables is
invalid@comma{} signal an INVALID-TABLE-INDEX error. This error is immediately
restartable with SET-TO-ZERO.@*

If a lig/kern program is found for a boundary character@comma{} but there is no such
character in the font@comma{} signal a NO-BOUNDARY-CHARACTER error. This error is
immediately restartable with ABORT-LIG/KERN-PROGRAM.@*

If an index into the extens table is invalid@comma{} signal an INVALID-TABLE-INDEX
error. This error is immediately restartable with DISCARD-EXTENSION-RECIPE.

If a cycle is found in a list of characters of ascending size@comma{} signal a
CHARACTER-LIST-CYCLE error. This error is immediately restartable with
DISCARD-NEXT-CHARACTER.@*

If a ligature is found to be cyclic@comma{} signal a LIGATURE-CYCLE error. This error
is immediately restartable with DISCARD-LIGATURE.@*

Finally@comma{} if an invalid character code is encountered@comma{} signal an
INVALID-CHARACTER-CODE error. Depending on the context@comma{} this error is
immediately restartable with DISCARD-NEXT-CHARACTER@comma{} or
DISCARD-EXTENSION-RECIPE.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {parse-header} (length font)
@anchor{❨524❩}@c
@functionsubindex{parse-header}@c
Parse a header of LENGTH words from *STREAM* into FONT.@*
If FONT's design size is less than 1pt@comma{} signal an INVALID-DESIGN-SIZE error.
This error is immediately restartable with SET-TO-TEN.@*
However@comma{} if FONT's design size was explicitly overridden@comma{} only signal an
INVALID-ORIGINAL-DESIGN-SIZE warning.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {read-char-info} ()
@anchor{❨565❩}@c
@functionsubindex{read-char-info}@c
Read one char-info from *STREAM* into a new CHAR-INFO instance.@*
If the char-info denotes a non-existent character (that is@comma{} it is has a width
index of 0) but is not completely blank@comma{} signal a SPURIOUS-CHAR-INFO warning.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {read-exten} ()
@anchor{❨482❩}@c
@functionsubindex{read-exten}@c
Read one exten from *STREAM* into a new EXTEN instance.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {read-fix-word} (&optional limit)
@anchor{❨466❩}@c
@functionsubindex{read-fix-word}@c
Read a fix word from *STREAM* and return it.@*
If LIMIT (the default)@comma{} check that the number lies within ]-16@comma{}+16[@comma{} or
signal a FIX-WORD-OVERFLOW error. This error is immediately restartable with
SET-TO-ZERO.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {read-lig/kern} ()
@anchor{❨516❩}@c
@functionsubindex{read-lig/kern}@c
Read one lig/kern from *stream* into a new LIG/KERN instance.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@end table
@end deffn
@deffn {Function} {read-padded-string} (pad)
@anchor{❨527❩}@c
@functionsubindex{read-padded-string}@c
Read a padded string out of PAD bytes from *STREAM*.@*
The first byte in *STREAM* indicates the actual length of the string.@*

If the declared string's length is too large@comma{} signal an
INVALID-PADDED-STRING-LENGTH error. This error is immediately restartable with
READ-MAXIMUM-LENGTH or DISCARD-STRING.@*

If the string is not in BCPL format (it contains parentheses or non-ASCII
characters@comma{} signal an INVALID-PADDED-STRING error. This error is immediately
restartable with KEEP-STRING@comma{} FIX-STRING (replacing parentheses with slashes@comma{}
and non-ASCII characters with question marks)@comma{} or DISCARD-STRING.@*

If the string is not padded with zeros@comma{} signal a PADDED-STRING-OVERFLOW
warning.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {read-u16} ()
@anchor{❨481❩}@c
@functionsubindex{read-u16}@c
Read an unsigned 16 bits Big Endian integer from *STREAM* and return it.
If >= 2^15@comma{} signal a U16-OVERFLOW error.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {read-u32} ()
@anchor{❨463❩}@c
@functionsubindex{read-u32}@c
Read an unsigned 32 bits Big Endian integer from *STREAM*.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {read-u8} ()
@anchor{❨521❩}@c
@functionsubindex{read-u8}@c
Read an unsigned 8 bits integer from *STREAM*.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Function} {release-status-number} (release-status)
@anchor{❨30❩}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨17❩, , @t{version.lisp}}.
@end table
@end deffn
@deffn {Function} {remove-keys} (keys &rest removed)
@anchor{❨536❩}@c
@functionsubindex{remove-keys}@c
Return a new property list from KEYS without REMOVED ones.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨9❩, , @t{util.lisp}}.
@end table
@end deffn
@deffn {Reader} {rep} (instance)
@anchor{❨487❩}@c
@functionsubindex{rep}@c
@deffnx {Writer} {(setf rep)} (instance)
@anchor{❨488❩}@c
@functionsubindex{(setf rep)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨564❩, , @t{rep}}.
@end table
@end deffn
@deffn {Reader} {rmd} (instance)
@anchor{❨485❩}@c
@functionsubindex{rmd}@c
@deffnx {Writer} {(setf rmd)} (instance)
@anchor{❨486❩}@c
@functionsubindex{(setf rmd)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨547❩, , @t{rmd}}.
@end table
@end deffn
@deffn {Function} {run-ligature/kerning-program} (character index lig/kerns kerns)
@anchor{❨523❩}@c
@functionsubindex{run-ligature/kerning-program}@c
Find the real start of a ligature/kerning program and run it.@*
See %run-ligature/kerning-program for more information.@*

If INDEX is invalid@comma{} signal an INVALID-TABLE-INDEX error. This error is
immediately restartable with ABORT-LIG/KERN-PROGRAM.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Function} {set-kern} (character1 character2 kern)
@anchor{❨514❩}@c
@functionsubindex{set-kern}@c
Set KERN for CHARACTER1 and CHARACTER2.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Function} {set-ligature} (character1 character2 ligature)
@anchor{❨566❩}@c
@functionsubindex{set-ligature}@c
Set LIGATURE for CHARACTER1 and CHARACTER2.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@end table
@end deffn
@deffn {Reader} {skip} (instance)
@anchor{❨541❩}@c
@functionsubindex{skip}@c
@deffnx {Writer} {(setf skip)} (instance)
@anchor{❨542❩}@c
@functionsubindex{(setf skip)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨544❩, , @t{skip}}.
@end table
@end deffn
@deffn {Function} {table-aref} (name table index)
@anchor{❨471❩}@c
@functionsubindex{table-aref}@c
Access NAMEd TABLE at INDEX.@*
If INDEX is out of bounds@comma{} signal an INVALID-TABLE-INDEX error.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@end table
@end deffn
@deffn {Reader} {top} (instance)
@anchor{❨502❩}@c
@functionsubindex{top}@c
@deffnx {Writer} {(setf top)} (instance)
@anchor{❨503❩}@c
@functionsubindex{(setf top)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨561❩, , @t{top}}.
@end table
@end deffn
@deffn {Reader} {width-index} (instance)
@anchor{❨467❩}@c
@functionsubindex{width-index}@c
@deffnx {Writer} {(setf width-index)} (instance)
@anchor{❨468❩}@c
@functionsubindex{(setf width-index)}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Target Slot
@ref{❨226❩, , @t{width-index}}.
@end table
@end deffn
@deffn {Function} {~-reader} (stream char)
@anchor{❨35❩}@c
@functionsubindex{~-reader}@c
Read a series of ~"string" to be concatenated together.
@table @strong
@item Package
@ref{❨18❩, , @t{net.didierverna.tfm.setup}}.
@item Source
@ref{❨16❩, , @t{readtable.lisp}}.
@end table
@end deffn

@node Private generic functions, Private structures, Private ordinary functions, Internals
@subsection Generic functions
@deffn {Generic Reader} {extension-recipe} (object)
@anchor{❨473❩}@c
@genericsubindex{extension-recipe}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {extension-recipe} ((character-metrics @ref{❨340❩, , @t{character-metrics}}))
@anchor{❨474❩}@c
@methodsubindex{extension-recipe}@c
The character's extension recipe@comma{} or NIL.@*
This slot is non-null only if this character is extensible (see TeX: the
Program [544]). It is mutually exclusive with the NEXT-CHARACTER slot@comma{} and
also with the existence of a ligature or kerning program for this character.
@table @strong
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Target Slot
@ref{❨348❩, , @t{extension-recipe}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {kerns} (object)
@anchor{❨489❩}@c
@genericsubindex{kerns}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {kerns} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨490❩}@c
@methodsubindex{kerns}@c
The font's kerns.@*
This is a hash table associating conses of characters with the corresponding
kern. They are expressed in design size units@comma{} or in TeX point units if
the font is frozen.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨141❩, , @t{kerns}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Reader} {ligatures} (object)
@anchor{❨464❩}@c
@genericsubindex{ligatures}@c
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Methods
@deffn {Reader Method} {ligatures} ((font @ref{❨113❩, , @t{font}}))
@anchor{❨465❩}@c
@methodsubindex{ligatures}@c
The font's ligatures.@*
This is a hash table associating conses of characters with the corresponding
ligature.
@table @strong
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Target Slot
@ref{❨140❩, , @t{ligatures}}.
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {parse-parameters} (length font)
@anchor{❨505❩}@c
@genericsubindex{parse-parameters}@c
Parse a parameters section of LENGTH words from *STREAM* into FONT.
Return remaining LENGTH.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨13❩, , @t{file.lisp}}.
@item Methods
@deffn {Method} {parse-parameters} (length font)
@anchor{❨506❩}@c
@methodsubindex{parse-parameters}@c
Parse the 7 regular FONT parameters. Return remaining LENGTH.
@table @strong
@end table
@end deffn
@deffn {Method} {parse-parameters} (length (font @ref{❨400❩, , @t{math-symbols-font}}))
@anchor{❨507❩}@c
@methodsubindex{parse-parameters}@c
Parse the 15 additional TeX math symbols FONT parameters.
@table @strong
@end table
@end deffn
@deffn {Method} {parse-parameters} (length (font @ref{❨146❩, , @t{math-extension-font}}))
@anchor{❨508❩}@c
@methodsubindex{parse-parameters}@c
Parse the 6 additional TeX math extension FONT parameters.
@table @strong
@end table
@end deffn
@deffn {Method} {parse-parameters} :around (length font)
@anchor{❨509❩}@c
@methodsubindex{parse-parameters}@c
Read remaining parameters into a parameters array.
@table @strong
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {scale} (font factor)
@anchor{❨552❩}@c
@genericsubindex{scale}@c
Scale all FONT dimensions by FACTOR.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨12❩, , @t{font.lisp}}.
@item Methods
@deffn {Method} {scale} :around ((font @ref{❨146❩, , @t{math-extension-font}}) factor)
@anchor{❨553❩}@c
@methodsubindex{scale}@c
Scaling method for MATH-EXTENSION-FONTs.
@table @strong
@end table
@end deffn
@deffn {Method} {scale} :around ((font @ref{❨400❩, , @t{math-symbols-font}}) factor)
@anchor{❨554❩}@c
@methodsubindex{scale}@c
Scaling method for MATH-SYMBOL-FONTs.
@table @strong
@end table
@end deffn
@deffn {Method} {scale} (font factor)
@anchor{❨555❩}@c
@methodsubindex{scale}@c
Scaling method for regular FONTs.
@table @strong
@end table
@end deffn
@end table
@end deffn

@node Private structures, Private classes, Private generic functions, Internals
@subsection Structures
@deftp {Structure} {exten}
@anchor{❨560❩}@c
@structuresubindex{exten}@c
The Exten structure.@*
This structure is used to store decoded information from the exten table
(see TeX: the Program [546]).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {top}
@anchor{❨561❩}@c
@slotsubindex{top}@c
@table @strong
@item Readers
@ref{❨502❩, , @t{top}}.
@item Writers
@ref{❨503❩, , @t{(setf top)}}.
@end table
@end defvr
@defvr {Slot} {mid}
@anchor{❨562❩}@c
@slotsubindex{mid}@c
@table @strong
@item Readers
@ref{❨567❩, , @t{mid}}.
@item Writers
@ref{❨568❩, , @t{(setf mid)}}.
@end table
@end defvr
@defvr {Slot} {bot}
@anchor{❨563❩}@c
@slotsubindex{bot}@c
@table @strong
@item Readers
@ref{❨550❩, , @t{bot}}.
@item Writers
@ref{❨551❩, , @t{(setf bot)}}.
@end table
@end defvr
@defvr {Slot} {rep}
@anchor{❨564❩}@c
@slotsubindex{rep}@c
@table @strong
@item Readers
@ref{❨487❩, , @t{rep}}.
@item Writers
@ref{❨488❩, , @t{(setf rep)}}.
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {lig/kern}
@anchor{❨543❩}@c
@structuresubindex{lig/kern}@c
The Lig/Kern structure.@*
This structure is used to store decoded information from the lig/kern table
(see TeX: the Program [545]).
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨10❩, , @t{intermediate.lisp}}.
@item Direct superclasses
@t{structure-object}.
@item Direct slots
@defvr {Slot} {skip}
@anchor{❨544❩}@c
@slotsubindex{skip}@c
@table @strong
@item Readers
@ref{❨541❩, , @t{skip}}.
@item Writers
@ref{❨542❩, , @t{(setf skip)}}.
@end table
@end defvr
@defvr {Slot} {next}
@anchor{❨545❩}@c
@slotsubindex{next}@c
@table @strong
@item Readers
@ref{❨497❩, , @t{next}}.
@item Writers
@ref{❨498❩, , @t{(setf next)}}.
@end table
@end defvr
@defvr {Slot} {op}
@anchor{❨546❩}@c
@slotsubindex{op}@c
@table @strong
@item Readers
@ref{❨539❩, , @t{op}}.
@item Writers
@ref{❨540❩, , @t{(setf op)}}.
@end table
@end defvr
@defvr {Slot} {rmd}
@anchor{❨547❩}@c
@slotsubindex{rmd}@c
@table @strong
@item Readers
@ref{❨485❩, , @t{rmd}}.
@item Writers
@ref{❨486❩, , @t{(setf rmd)}}.
@end table
@end defvr
@end table
@end deftp

@node Private classes, , Private structures, Internals
@subsection Classes
@deftp {Class} {extension-recipe}
@anchor{❨475❩}@c
@classsubindex{extension-recipe}@c
The Extension Recipe class.@*
This class represents decoded information for extensible characters. Within
the context of this library@comma{} the expression "extension recipe" denotes an
instance of this class.
@table @strong
@item Package
@ref{❨19❩, , @t{net.didierverna.tfm}}.
@item Source
@ref{❨11❩, , @t{character.lisp}}.
@item Direct methods
@itemize @bullet
@item
@ref{❨353❩, , @t{bottom-character}}.
@item
@ref{❨110❩, , @t{middle-character}}.
@item
@ref{❨609❩, , @t{print-object}}.
@item
@ref{❨442❩, , @t{repeated-character}}.
@item
@ref{❨309❩, , @t{top-character}}.
@end itemize
@item Direct slots
@defvr {Slot} {top-character}
@anchor{❨476❩}@c
@slotsubindex{top-character}@c
The recipe's top character@comma{} or NIL.
@table @strong
@item Initargs
@t{:top-character}
@item Readers
@ref{❨309❩, , @t{top-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {middle-character}
@anchor{❨477❩}@c
@slotsubindex{middle-character}@c
The recipe's middle character@comma{} or NIL.
@table @strong
@item Initargs
@t{:middle-character}
@item Readers
@ref{❨110❩, , @t{middle-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {bottom-character}
@anchor{❨478❩}@c
@slotsubindex{bottom-character}@c
The recipe's bottom character@comma{} or NIL.
@table @strong
@item Initargs
@t{:bottom-character}
@item Readers
@ref{❨353❩, , @t{bottom-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@defvr {Slot} {repeated-character}
@anchor{❨479❩}@c
@slotsubindex{repeated-character}@c
The recipe's repeated character.
@table @strong
@item Initargs
@t{:repeated-character}
@item Readers
@ref{❨442❩, , @t{repeated-character}}.
@item Writers
@i{This slot is read-only.}
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
