\input texinfo

@c reference.texi --- Reference manual

@c Copyright (C) 2018, 2019 Didier Verna

@c This file is part of TFM.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.
@c 
@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:

@c Generated automatically by Declt version 3.0 "Montgomery Scott"
@c on Thu Mar 25 15:48:21 2021 GMT+1.


@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename tfm-reference.info
@settitle The TFM Reference Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Format Specific Tweaks
@c ====================================================================
@tex
%% Declt uses several Unicode characters to "reveal" blanks. This
%% works fine in HTML or Info output, but TeX will have problems with
%% these. The code below translates those characters to something that
%% TeX can handle.

%% U+23B5 (Bottom Square Bracket), used to reveal white spaces, is
%% translated to its Computer Modern teletype version.
\DeclareUnicodeCharacter{23B5}{{\tt\char'040}}

%% U+21B5 (Downwards Arrow With Corner Leftwards), used to reveal
%% carriage returns, is translated to \hookleftarrow in math mode.
\DeclareUnicodeCharacter{21B5}{\ensuremath\hookleftarrow}

%% U+21E5 (Rightwards Arrow To Bar), used to reveal tabs, is
%% translated to something that looks similar, based on a rightarrow
%% and a vertical bar from the math extension font.
\DeclareUnicodeCharacter{21E5}{%
  \ensuremath{\rightarrow\kern-.5em\mathchar\"130C}}


%% Declt uses several Unicode characters to replace "fragile" ones in
%% anchor names and references. These characters are chosen to resemble
%% the original ones, without interfering with Info syntax. In TeX
%% however, we can switch them back to the original versions, because
%% cross-references are done differently. In theory, I think we could do
%% something similar for HTML output (again, only the Info syntax poses
%% problems), but I don't know how to do something similar to what's
%% below.

%% U+2024 (One Dot Leader) replaces periods.
\DeclareUnicodeCharacter{2024}{.}

%% U+2236 (Ratio) replaces colons.
\DeclareUnicodeCharacter{2236}{:}

%% U+2768 (Medium Left Parenthesis Ornament) replaces left parenthesis.
\DeclareUnicodeCharacter{2768}{(}

%% U+2769 (Medium Right Parenthesis Ornament) replaces right parenthesis.
\DeclareUnicodeCharacter{2769}{)}

%% U+214B (Turned Ampersand) replaces ampersands.
\DeclareUnicodeCharacter{214B}{&}

%% U+2216 (Set Minus) replaces backslashes.
\DeclareUnicodeCharacter{2216}{\char"5C}

%% The following ones are already defined in texinfo.tex so we have nothing
%% more to do:
%% U+201A (Single Low-9 Quotation Mark) replaces commas.
%% U+2205 (Empty Set) replaces empty symbol names.

@end tex



@c ====================================================================
@c Settings
@c ====================================================================
@setchapternewpage odd
@documentdescription
The TFM Reference Manual, version 1.1 "Carolingan Miniscules".
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@c ---------------
@c Indexing macros
@c ---------------

@c Packages
@macro packageindex{name}
@tpindex \name\
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro systemindex{name}
@tpindex \name\
@tpindex @r{System, }\name\
@end macro

@c Modules
@macro moduleindex{name}
@cindex @t{\name\}
@cindex Module, @t{\name\}
@end macro

@c Other files
@macro otherfileindex{name}
@cindex @t{\name\}
@cindex Other File, @t{\name\}
@cindex File, other, @t{\name\}
@end macro

@c Lisp files
@macro lispfileindex{name}
@cindex @t{\name\}
@cindex Lisp File, @t{\name\}
@cindex File, Lisp, @t{\name\}
@end macro

@c C files
@macro cfileindex{name}
@cindex @t{\name\}
@cindex C File, @t{\name\}
@cindex File, C, @t{\name\}
@end macro

@c Java files
@macro javafileindex{name}
@cindex @t{\name\}
@cindex Java File, @t{\name\}
@cindex File, Java, @t{\name\}
@end macro

@c Static files
@macro staticfileindex{name}
@cindex @t{\name\}
@cindex Static File, @t{\name\}
@cindex File, static, @t{\name\}
@end macro

@c Doc files
@macro docfileindex{name}
@cindex @t{\name\}
@cindex Doc File, @t{\name\}
@cindex File, doc, @t{\name\}
@end macro

@c HTML files
@macro htmlfileindex{name}
@cindex @t{\name\}
@cindex HTML File, @t{\name\}
@cindex File, html, @t{\name\}
@end macro

@c The following macros are meant to be used within @defxxx environments.
@c Texinfo performs half the indexing job and we do the other half.

@c Constants
@macro constantsubindex{name}
@vindex @r{Constant, }\name\
@end macro

@c Special variables
@macro specialsubindex{name}
@vindex @r{Special Variable, }\name\
@end macro

@c Symbol macros
@macro symbolmacrosubindex{name}
@vindex @r{Symbol Macro, }\name\
@end macro

@c Slots
@macro slotsubindex{name}
@vindex @r{Slot, }\name\
@end macro

@c Macros
@macro macrosubindex{name}
@findex @r{Macro, }\name\
@end macro

@c Compiler Macros
@macro compilermacrosubindex{name}
@findex @r{Compiler Macro, }\name\
@end macro

@c Functions
@macro functionsubindex{name}
@findex @r{Function, }\name\
@end macro

@c Methods
@macro methodsubindex{name}
@findex @r{Method, }\name\
@end macro

@c Generic Functions
@macro genericsubindex{name}
@findex @r{Generic Function, }\name\
@end macro

@c Setf Expanders
@macro setfexpandersubindex{name}
@findex @r{Setf Expander, }\name\
@end macro

@c Method Combinations
@macro shortcombinationsubindex{name}
@tpindex @r{Short Method Combination, }\name\
@tpindex @r{Method Combination, Short, }\name\
@end macro

@macro longcombinationsubindex{name}
@tpindex @r{Long Method Combination, }\name\
@tpindex @r{Method Combination, Long, }\name\
@end macro

@c Conditions
@macro conditionsubindex{name}
@tpindex @r{Condition, }\name\
@end macro

@c Structures
@macro structuresubindex{name}
@tpindex @r{Structure, }\name\
@end macro

@c Types
@macro typesubindex{name}
@tpindex @r{Type, }\name\
@end macro

@c Classes
@macro classsubindex{name}
@tpindex @r{Class, }\name\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* TFM Reference: (tfm-reference). The TFM Reference Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} 2018@comma{} 2019 Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The TFM Reference Manual
@subtitle TeX Font Metrics, version 1.1 "Carolingan Miniscules"

@author Didier Verna <@email{didier@atchar{}didierverna.net}>

@page
@quotation
This manual was generated automatically by Declt 3.0 "Montgomery Scott" on Thu Mar 25 15:48:21 2021 GMT+1.
@end quotation
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Top
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The TFM Reference Manual
This is the TFM Reference Manual, version 1.1 "Carolingan Miniscules",
generated automatically by Declt version 3.0 "Montgomery Scott"
on Thu Mar 25 15:48:21 2021 GMT+1.

@menu
* Copying:: The BSD License
* Introduction:: What TFM is all about
* Systems:: The systems documentation
* Modules:: The modules documentation
* Files:: The files documentation
* Packages:: The packages documentation
* Definitions:: The symbols documentation
* Indexes:: Concepts, functions, variables and data types
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use@comma{} copy@comma{} modify@comma{} and distribute this software for any
purpose with or without fee is hereby granted@comma{} provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL@comma{} DIRECT@comma{} INDIRECT@comma{} OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE@comma{} DATA OR PROFITS@comma{} WHETHER IN AN
ACTION OF CONTRACT@comma{} NEGLIGENCE OR OTHER TORTIOUS ACTION@comma{} ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Systems, Copying, Top
@chapter Introduction
@macro tfm
@sc{Tfm}
@end macro

@macro cl
Common-Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@tfm{} is a @cl{} interface to the @TeX{} Font Metrics format. It decodes the
contents of @code{tfm} files, and returns an abstract data structure storing
the corresponding font information in an easily accessible way.

This is the @tfm{} Reference Manual.
@ifinfo
See @xref{Top, , The @tfm{} User Manual, tfm-user},
@end ifinfo
@ifhtml
See @xref{Top, , The @tfm{} User Manual, user},
@end ifhtml
@ifnotinfo
@ifnothtml
@xref{Top, , , user, The @tfm{} User Manual},
@end ifnothtml
@end ifnotinfo
for a more human-readable guide to using @tfm{}.



@c ====================================================================
@c Systems
@c ====================================================================
@node Systems, Modules, Introduction, Top
@chapter Systems
The main system appears first, followed by any subsystem dependency.

@menu
* The net.didierverna.tfm system: The net․didierverna․tfm system.
* The net.didierverna.tfm.core system: The net․didierverna․tfm․core system.
* The net.didierverna.tfm.setup system: The net․didierverna․tfm․setup system.
@end menu


@c ------------------------------
@c The net.didierverna.tfm system
@c ------------------------------
@node The net․didierverna․tfm system, The net․didierverna․tfm․core system, Systems, Systems
@section @t{net.didierverna.tfm}
@anchor{go to the net․didierverna․tfm system}@c
@systemindex{net.didierverna.tfm}@c
@table @strong
@item Long Name
TeX Font Metrics
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Description
A Common Lisp interface to the TeX Font Metrics format
@item Long Description

TFM (for TeX Font Metrics) is the standard font description format used by
TeX. The TFM library parses and decodes TFM files into an abstract data
structure@comma{} providing easy access to the corresponding font information in
Common Lisp.
@item Version
1.1
@item Dependencies
@itemize @bullet
@item
@ref{go to the net․didierverna․tfm․setup system, , @t{net.didierverna.tfm.setup}} (system)
@item
@ref{go to the net․didierverna․tfm․core system, , @t{net.didierverna.tfm.core}} (system)
@end itemize
@item Source
@ref{go to the net․didierverna․tfm․asd file, , @t{net.didierverna.tfm.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/}}
@end table


@c -----------------------------------
@c The net.didierverna.tfm.core system
@c -----------------------------------
@node The net․didierverna․tfm․core system, The net․didierverna․tfm․setup system, The net․didierverna․tfm system, Systems
@section @t{net.didierverna.tfm.core}
@anchor{go to the net․didierverna․tfm․core system}@c
@systemindex{net.didierverna.tfm.core}@c
@table @strong
@item Long Name
TeX Font Metrics Core
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Description
TFM's core library
@item Long Description
The TeX Font Metrics core library.@*
For a more complete description of TFM@comma{} see the net.didierverna.tfm system.
@item Version
1.1
@item Dependency
@ref{go to the net․didierverna․tfm․setup system, , @t{net.didierverna.tfm.setup}} (system)
@item Source
@ref{go to the net․didierverna․tfm․core․asd file, , @t{net.didierverna.tfm.core.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@item
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@end itemize
@end table


@c ------------------------------------
@c The net.didierverna.tfm.setup system
@c ------------------------------------
@node The net․didierverna․tfm․setup system, , The net․didierverna․tfm․core system, Systems
@section @t{net.didierverna.tfm.setup}
@anchor{go to the net․didierverna․tfm․setup system}@c
@systemindex{net.didierverna.tfm.setup}@c
@table @strong
@item Long Name
TeX Font Metrics Setup
@item Author
Didier Verna
@item Contact
@email{didier@atchar{}didierverna.net}
@item Home Page
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php@hashchar{}tfm}
@item Source Control
@uref{https://github.com/didierverna/tfm}
@item License
BSD
@item Description
TFM's setup library
@item Long Description
The TeX Font Metrics setup library.@*
For a more complete description of TFM@comma{} see the net.didierverna.tfm system.
@item Source
@ref{go to the net․didierverna․tfm․setup․asd file, , @t{net.didierverna.tfm.setup.asd}} (file)
@item Directory
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/setup/, ignore, @t{/Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/setup/}}
@item Component
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table



@c ====================================================================
@c Modules
@c ====================================================================
@node Modules, Files, Systems, Top
@chapter Modules
Modules are listed depth-first from the system components tree.

@menu
* The net.didierverna.tfm.core/src module: The net․didierverna․tfm․core/src module.
@end menu


@c ---------------------------------------
@c The net.didierverna.tfm.core/src module
@c ---------------------------------------
@node The net․didierverna․tfm․core/src module, , Modules, Modules
@section @t{net.didierverna.tfm.core/src}
@anchor{go to the net․didierverna․tfm․core/src module}@c
@moduleindex{net.didierverna.tfm.core/src}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․tfm․core system, , @t{net.didierverna.tfm.core}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/, ignore, @t{core/src/}}
@item Components
@itemize @bullet
@item
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@item
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@item
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end itemize
@end table



@c ====================================================================
@c Files
@c ====================================================================
@node Files, Packages, Modules, Top
@chapter Files
Files are sorted by type and then listed depth-first from the systems
components trees.

@menu
* Lisp files::
@end menu


@c ----------
@c Lisp files
@c ----------
@node Lisp files, , Files, Files
@section Lisp
@menu
* The net.didierverna.tfm.asd file: The net․didierverna․tfm․asd file.
* The net.didierverna.tfm.core.asd file: The net․didierverna․tfm․core․asd file.
* The net.didierverna.tfm.setup.asd file: The net․didierverna․tfm․setup․asd file.
* The net.didierverna.tfm.core/meta.lisp file: The net․didierverna․tfm․core/meta․lisp file.
* The net.didierverna.tfm.core/src/util.lisp file: The net․didierverna․tfm․core/src/util․lisp file.
* The net.didierverna.tfm.core/src/intermediate.lisp file: The net․didierverna․tfm․core/src/intermediate․lisp file.
* The net.didierverna.tfm.core/src/character.lisp file: The net․didierverna․tfm․core/src/character․lisp file.
* The net.didierverna.tfm.core/src/font.lisp file: The net․didierverna․tfm․core/src/font․lisp file.
* The net.didierverna.tfm.core/src/file.lisp file: The net․didierverna․tfm․core/src/file․lisp file.
* The net.didierverna.tfm.setup/setup.lisp file: The net․didierverna․tfm․setup/setup․lisp file.
@end menu

@node The net․didierverna․tfm․asd file, The net․didierverna․tfm․core․asd file, Lisp files, Lisp files
@subsection @t{net.didierverna.tfm.asd}
@anchor{go to the net․didierverna․tfm․asd file}@c
@lispfileindex{net.didierverna.tfm.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/net.didierverna.tfm.asd, ignore, @t{net.didierverna.tfm.asd}}
@item Systems
@ref{go to the net․didierverna․tfm system, , @t{net.didierverna.tfm}} (system)
@end table

@node The net․didierverna․tfm․core․asd file, The net․didierverna․tfm․setup․asd file, The net․didierverna․tfm․asd file, Lisp files
@subsection @t{net.didierverna.tfm.core.asd}
@anchor{go to the net․didierverna․tfm․core․asd file}@c
@lispfileindex{net.didierverna.tfm.core.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/net.didierverna.tfm.core.asd, ignore, @t{core/net.didierverna.tfm.core.asd}}
@item Systems
@ref{go to the net․didierverna․tfm․core system, , @t{net.didierverna.tfm.core}} (system)
@end table

@node The net․didierverna․tfm․setup․asd file, The net․didierverna․tfm․core/meta․lisp file, The net․didierverna․tfm․core․asd file, Lisp files
@subsection @t{net.didierverna.tfm.setup.asd}
@anchor{go to the net․didierverna․tfm․setup․asd file}@c
@lispfileindex{net.didierverna.tfm.setup.asd}@c
@table @strong
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/setup/net.didierverna.tfm.setup.asd, ignore, @t{setup/net.didierverna.tfm.setup.asd}}
@item Systems
@ref{go to the net․didierverna․tfm․setup system, , @t{net.didierverna.tfm.setup}} (system)
@end table

@node The net․didierverna․tfm․core/meta․lisp file, The net․didierverna․tfm․core/src/util․lisp file, The net․didierverna․tfm․setup․asd file, Lisp files
@subsection @t{net.didierverna.tfm.core/meta.lisp}
@anchor{go to the net․didierverna․tfm․core/meta․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/meta.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․tfm․core system, , @t{net.didierverna.tfm.core}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/meta.lisp, ignore, @t{core/meta.lisp}}
@item Packages
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Exported Definitions
@ref{go to the NET․DIDIERVERNA․TFM∶∶NICKNAME-PACKAGE function, , @t{nickname-package}} (function)
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶*READTABLE* special variable, , @t{*readtable*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CLINDENT function, , @t{clindent}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINDENT macro, , @t{defindent}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶I-READER function, , @t{i-reader}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶IN-READTABLE macro, , @t{in-readtable}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TILDE-READER function, , @t{tilde-reader}} (function)
@end itemize
@end table

@node The net․didierverna․tfm․core/src/util․lisp file, The net․didierverna․tfm․core/src/intermediate․lisp file, The net․didierverna․tfm․core/meta․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/util.lisp}
@anchor{go to the net․didierverna․tfm․core/src/util․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/src/util.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/util.lisp, ignore, @t{core/src/util.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW condition, , @t{fix-word-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING condition, , @t{invalid-bcpl-string}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH condition, , @t{invalid-string-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PADDING NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{(setf padding)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition, , @t{tfm-compliance}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition, , @t{tfm-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition, , @t{tfm-usage}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-WARNING condition, , @t{tfm-usage-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW condition, , @t{u16-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method, , @t{(setf value)}} (method)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶*STREAM* special variable, , @t{*stream*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-CONSTANT macro, , @t{define-constant}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-ACCESSORS macro, , @t{map-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-FIX-WORD function, , @t{read-fix-word}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-PADDED-STRING function, , @t{read-padded-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-U16 function, , @t{read-u16}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-U32 function, , @t{read-u32}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPORT function, , @t{report}} (function)
@end itemize
@end table

@node The net․didierverna․tfm․core/src/intermediate․lisp file, The net․didierverna․tfm․core/src/character․lisp file, The net․didierverna․tfm․core/src/util․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/intermediate.lisp}
@anchor{go to the net․didierverna․tfm․core/src/intermediate․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/src/intermediate.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/intermediate.lisp, ignore, @t{core/src/intermediate.lisp}}
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOT function, , @t{bot}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOT❩ function, , @t{(setf bot)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO structure, , @t{char-info}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO-P function, , @t{char-info-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-CHAR-INFO function, , @t{copy-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-EXTEN function, , @t{copy-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-LIG/KERN function, , @t{copy-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-CHAR-INFO function, , @t{decode-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-EXTEN function, , @t{decode-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-LIG/KERN function, , @t{decode-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH-INDEX function, , @t{depth-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH-INDEX❩ function, , @t{(setf depth-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN structure, , @t{exten}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-INDEX function, , @t{exten-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTEN-INDEX❩ function, , @t{(setf exten-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-P function, , @t{exten-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT-INDEX function, , @t{height-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT-INDEX❩ function, , @t{(setf height-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-INDEX function, , @t{italic-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-INDEX❩ function, , @t{(setf italic-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN structure, , @t{lig/kern}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-INDEX function, , @t{lig/kern-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIG/KERN-INDEX❩ function, , @t{(setf lig/kern-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-P function, , @t{lig/kern-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHAR-INFO function, , @t{make-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTEN function, , @t{make-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIG/KERN function, , @t{make-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MID function, , @t{mid}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MID❩ function, , @t{(setf mid)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT function, , @t{next}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT❩ function, , @t{(setf next)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHAR function, , @t{next-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHAR❩ function, , @t{(setf next-char)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶OP function, , @t{op}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF OP❩ function, , @t{(setf op)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REMAINDER function, , @t{remainder}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REMAINDER❩ function, , @t{(setf remainder)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REP function, , @t{rep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REP❩ function, , @t{(setf rep)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SKIP function, , @t{skip}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SKIP❩ function, , @t{(setf skip)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP function, , @t{top}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP❩ function, , @t{(setf top)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH-INDEX function, , @t{width-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH-INDEX❩ function, , @t{(setf width-index)}} (function)
@end itemize
@end table

@node The net․didierverna․tfm․core/src/character․lisp file, The net․didierverna․tfm․core/src/font․lisp file, The net․didierverna․tfm․core/src/intermediate․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/character.lisp}
@anchor{go to the net․didierverna․tfm․core/src/character․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/src/character.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/character.lisp, ignore, @t{core/src/character.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{bottom-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{bottom-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf bottom-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS class, , @t{character-metrics}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{depth}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf depth)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSIBLEP function, , @t{extensiblep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{font}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{height}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf height)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{italic-correction}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf italic-correction)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{middle-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{middle-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf middle-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{next-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf next-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE condition, , @t{not-extensible}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{repeated-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{repeated-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf repeated-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{top-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{top-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf top-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf width)}} (method)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+CHARACTER-METRICS-DIMENSION-ACCESSORS+ constant, , @t{+character-metrics-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-EXTENSION-RECIPE-PSEUDO-ACCESSOR macro, , @t{define-extension-recipe-pseudo-accessor}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{extension-recipe}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf extension-recipe)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE class, , @t{extension-recipe}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHARACTER-METRICS function, , @t{make-character-metrics}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTENSION-RECIPE function, , @t{make-extension-recipe}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-CHARACTER-METRICS-DIMENSION-ACCESSORS macro, , @t{map-character-metrics-dimension-accessors}} (macro)
@end itemize
@end table

@node The net․didierverna․tfm․core/src/font․lisp file, The net․didierverna․tfm․core/src/file․lisp file, The net․didierverna․tfm․core/src/character․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/font.lisp}
@anchor{go to the net․didierverna․tfm․core/src/font․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/src/font.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/font.lisp, ignore, @t{core/src/font.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{7bits-safe}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf 7bits-safe)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{axis-height}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf axis-height)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing4}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing4)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing5}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing5)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{boundary-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf boundary-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{character-count}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf character-count)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{(setf character1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{(setf character2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{characters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf characters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{checksum}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf checksum)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{composite}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{default-rule-thickness}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf default-rule-thickness)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-after}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-before}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf delim1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf delim2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf denom1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf denom2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{design-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AFTER method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS condition, , @t{different-fonts}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{em}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf em)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ENCODING NET․DIDIERVERNA․TFM∶∶FONT method, , @t{encoding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf encoding)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EX NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ex}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf ex)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION NET․DIDIERVERNA․TFM∶∶FONT method, , @t{expansion}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf expansion)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{extra-space}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf extra-space)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf face-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-number}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf face-number)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FAMILY NET․DIDIERVERNA․TFM∶∶FONT method, , @t{family}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf family)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{file}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf file)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT class, , @t{font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FREEZE function, , @t{freeze}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FROZEN NET․DIDIERVERNA․TFM∶∶FONT method, , @t{frozen}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf frozen)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶GET-CHARACTER function, , @t{get-character}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-shrink}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-shrink)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-space}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-space)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-stretch}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-stretch)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE condition, , @t{invalid-character-code}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNING function, , @t{kerning}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNING❩ function, , @t{(setf kerning)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE function, , @t{ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURE❩ function, , @t{(setf ligature)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE class, , @t{ligature}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT class, , @t{math-extension-font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT class, , @t{math-symbols-font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{max-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf max-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{min-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf min-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶FONT method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf name)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{original-design-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf original-design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf parameters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{pass-over}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLANT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slant}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf slant)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLOPE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slope}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf slope)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sub1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sub2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{subdrop}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf subdrop)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{supdrop}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf supdrop)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶UNFREEZE function, , @t{unfreeze}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{weight}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf weight)}} (method)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+FONT-DIMENSION-ACCESSORS+ constant, , @t{+font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+MATH-EXTENSION-FONT-DIMENSION-ACCESSORS+ constant, , @t{+math-extension-font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS+ constant, , @t{+math-symbols-font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ANONYMOUS-FONT condition, , @t{anonymous-font}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶APPLY-LIGATURE function, , @t{apply-ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE-CHARACTER function, , @t{code-character}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CODE-CHARACTER❩ function, , @t{(setf code-character)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{kernings}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf kernings)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ligatures}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf ligatures)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-FONT function, , @t{make-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIGATURE function, , @t{make-ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-FONT-DIMENSION-ACCESSORS macro, , @t{map-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-EXTENSION-FONT-DIMENSION-ACCESSORS macro, , @t{map-math-extension-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS macro, , @t{map-math-symbols-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE generic function, , @t{scale}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{scale}} (method)
@end itemize
@end table

@node The net․didierverna․tfm․core/src/file․lisp file, The net․didierverna․tfm․setup/setup․lisp file, The net․didierverna․tfm․core/src/font․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.core/src/file.lisp}
@anchor{go to the net․didierverna․tfm․core/src/file․lisp file}@c
@lispfileindex{net.didierverna.tfm.core/src/file.lisp}@c
@table @strong
@item Dependency
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Parent
@ref{go to the net․didierverna․tfm․core/src module, , @t{src}} (module)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/core/src/file.lisp, ignore, @t{core/src/file.lisp}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{actual-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{(setf actual-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{bc}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{(setf bc)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE condition, , @t{character-list-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{characters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{(setf characters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{declared-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{(setf declared-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{ec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{(setf ec)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM condition, , @t{extended-tfm}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{file}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{(setf file)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-OVERFLOW condition, , @t{file-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-UNDERFLOW condition, , @t{file-underflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO condition, , @t{invalid-char-info}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE condition, , @t{invalid-character-range}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE condition, , @t{invalid-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH condition, , @t{invalid-header-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE condition, , @t{invalid-ligature-opcode}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS condition, , @t{invalid-section-lengths}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX condition, , @t{invalid-table-index}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH condition, , @t{invalid-table-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START condition, , @t{invalid-table-start}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{largest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf largest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{largest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{(setf largest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LF NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lf}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf lf)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lh}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf lh)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE condition, , @t{ligature-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LOAD-FONT function, , @t{load-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method, , @t{(setf name)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NC NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nc}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nc)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ND NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nd}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nd)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NE NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ne}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf ne)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nh}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nh)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NI NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ni}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf ni)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NK NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nk}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nk)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NL NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nl}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nl)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NO-BOUNDARY-CHARACTER condition, , @t{no-boundary-character}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NP NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{np}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf np)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NW NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nw}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nw)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{smallest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf smallest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method, , @t{(setf value)}} (method)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶%RUN-LIGATURE/KERNING-PROGRAM function, , @t{%run-ligature/kerning-program}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN condition, , @t{file-size-mixin}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT-EXTENSION-RECIPE function, , @t{font-extension-recipe}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE condition, , @t{invalid-original-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LOAD-TFM-FONT function, , @t{load-tfm-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-CHARACTER-INFORMATION function, , @t{parse-character-information}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-HEADER function, , @t{parse-header}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS generic function, , @t{parse-parameters}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶RUN-LIGATURE/KERNING-PROGRAM function, , @t{run-ligature/kerning-program}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TABLE-AREF function, , @t{table-aref}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TREF macro, , @t{tref}} (macro)
@end itemize
@end table

@node The net․didierverna․tfm․setup/setup․lisp file, , The net․didierverna․tfm․core/src/file․lisp file, Lisp files
@subsection @t{net.didierverna.tfm.setup/setup.lisp}
@anchor{go to the net․didierverna․tfm․setup/setup․lisp file}@c
@lispfileindex{net.didierverna.tfm.setup/setup.lisp}@c
@table @strong
@item Parent
@ref{go to the net․didierverna․tfm․setup system, , @t{net.didierverna.tfm.setup}} (system)
@item Location
@url{file:///Users/didier/Documents/Science/Software/Common⎵Lisp/tfm/setup/setup.lisp, ignore, @t{setup/setup.lisp}}
@item Packages
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-NAME* special variable, , @t{*release-name*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS* special variable, , @t{*release-status*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURATION function, , @t{configuration}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURE function, , @t{configure}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶VERSION function, , @t{version}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶%VERSION function, , @t{%version}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} (function)
@end itemize
@end table



@c ====================================================================
@c Packages
@c ====================================================================
@node Packages, Definitions, Files, Top
@chapter Packages
Packages are listed by definition order.

@menu
* The net.didierverna.tfm package: The net․didierverna․tfm package.
* The net.didierverna.tfm.setup package: The net․didierverna․tfm․setup package.
@end menu


@c -------------------------------
@c The net.didierverna.tfm package
@c -------------------------------
@node The net․didierverna․tfm package, The net․didierverna․tfm․setup package, Packages, Packages
@section @t{net.didierverna.tfm}
@anchor{go to the NET․DIDIERVERNA․TFM package}@c
@packageindex{net.didierverna.tfm}@c
The TeX Font Metrics package.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@item Nickname
@t{tfm}
@item Use List
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item
@t{common-lisp}
@end itemize
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE generic function, , @t{7bits-safe}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{7bits-safe}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf 7bits-safe)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ generic function, , @t{(setf 7bits-safe)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE generic function, , @t{actual-size}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{actual-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{(setf actual-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ generic function, , @t{(setf actual-size)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT generic function, , @t{axis-height}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{axis-height}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf axis-height)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ generic function, , @t{(setf axis-height)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BC generic function, , @t{bc}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{bc}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{(setf bc)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ generic function, , @t{(setf bc)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 generic function, , @t{big-op-spacing1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ generic function, , @t{(setf big-op-spacing1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 generic function, , @t{big-op-spacing2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ generic function, , @t{(setf big-op-spacing2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 generic function, , @t{big-op-spacing3}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ generic function, , @t{(setf big-op-spacing3)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 generic function, , @t{big-op-spacing4}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing4}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing4)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ generic function, , @t{(setf big-op-spacing4)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 generic function, , @t{big-op-spacing5}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing5}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf big-op-spacing5)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ generic function, , @t{(setf big-op-spacing5)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER generic function, , @t{bottom-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{bottom-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{bottom-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf bottom-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ generic function, , @t{(setf bottom-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER generic function, , @t{boundary-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{boundary-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf boundary-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ generic function, , @t{(setf boundary-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT generic function, , @t{character-count}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{character-count}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf character-count)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ generic function, , @t{(setf character-count)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE condition, , @t{character-list-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS class, , @t{character-metrics}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 generic function, , @t{character1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{(setf character1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ generic function, , @t{(setf character1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 generic function, , @t{character2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{(setf character2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ generic function, , @t{(setf character2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS generic function, , @t{characters}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{characters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{(setf characters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{characters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf characters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ generic function, , @t{(setf characters)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM generic function, , @t{checksum}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{checksum}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf checksum)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ generic function, , @t{(setf checksum)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE generic function, , @t{code}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE generic function, , @t{composite}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{composite}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE generic function, , @t{declared-size}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{declared-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{(setf declared-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ generic function, , @t{(setf declared-size)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS generic function, , @t{default-rule-thickness}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{default-rule-thickness}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{(setf default-rule-thickness)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ generic function, , @t{(setf default-rule-thickness)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER generic function, , @t{delete-after}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-after}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE generic function, , @t{delete-before}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-before}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 generic function, , @t{delim1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf delim1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ generic function, , @t{(setf delim1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 generic function, , @t{delim2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf delim2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ generic function, , @t{(setf delim2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 generic function, , @t{denom1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf denom1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ generic function, , @t{(setf denom1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 generic function, , @t{denom2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf denom2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ generic function, , @t{(setf denom2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH generic function, , @t{depth}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{depth}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf depth)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ generic function, , @t{(setf depth)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE generic function, , @t{design-size}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{design-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ generic function, , @t{(setf design-size)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AFTER method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method, , @t{(setf design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS condition, , @t{different-fonts}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EC generic function, , @t{ec}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{ec}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{(setf ec)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ generic function, , @t{(setf ec)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EM generic function, , @t{em}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{em}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf em)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ generic function, , @t{(setf em)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ENCODING generic function, , @t{encoding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ENCODING NET․DIDIERVERNA․TFM∶∶FONT method, , @t{encoding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf encoding)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ generic function, , @t{(setf encoding)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EX generic function, , @t{ex}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EX NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ex}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf ex)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ generic function, , @t{(setf ex)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION generic function, , @t{expansion}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION NET․DIDIERVERNA․TFM∶∶FONT method, , @t{expansion}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf expansion)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ generic function, , @t{(setf expansion)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM condition, , @t{extended-tfm}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSIBLEP function, , @t{extensiblep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE generic function, , @t{extra-space}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{extra-space}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf extra-space)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ generic function, , @t{(setf extra-space)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE generic function, , @t{face-code}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf face-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ generic function, , @t{(setf face-code)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER generic function, , @t{face-number}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-number}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf face-number)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ generic function, , @t{(setf face-number)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FAMILY generic function, , @t{family}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FAMILY NET․DIDIERVERNA․TFM∶∶FONT method, , @t{family}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf family)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ generic function, , @t{(setf family)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE generic function, , @t{file}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{file}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{(setf file)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{file}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf file)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ generic function, , @t{(setf file)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-OVERFLOW condition, , @t{file-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-UNDERFLOW condition, , @t{file-underflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW condition, , @t{fix-word-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT generic function, , @t{font}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{font}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT class, , @t{font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FREEZE function, , @t{freeze}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FROZEN generic function, , @t{frozen}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FROZEN NET․DIDIERVERNA․TFM∶∶FONT method, , @t{frozen}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf frozen)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ generic function, , @t{(setf frozen)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶GET-CHARACTER function, , @t{get-character}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT generic function, , @t{height}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{height}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf height)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ generic function, , @t{(setf height)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK generic function, , @t{interword-shrink}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-shrink}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-shrink)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ generic function, , @t{(setf interword-shrink)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE generic function, , @t{interword-space}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-space}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-space)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ generic function, , @t{(setf interword-space)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH generic function, , @t{interword-stretch}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-stretch}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf interword-stretch)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ generic function, , @t{(setf interword-stretch)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING condition, , @t{invalid-bcpl-string}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO condition, , @t{invalid-char-info}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE condition, , @t{invalid-character-code}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE condition, , @t{invalid-character-range}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE condition, , @t{invalid-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH condition, , @t{invalid-header-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE condition, , @t{invalid-ligature-opcode}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS condition, , @t{invalid-section-lengths}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH condition, , @t{invalid-string-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX condition, , @t{invalid-table-index}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH condition, , @t{invalid-table-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START condition, , @t{invalid-table-start}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION generic function, , @t{italic-correction}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{italic-correction}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf italic-correction)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ generic function, , @t{(setf italic-correction)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNING function, , @t{kerning}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNING❩ function, , @t{(setf kerning)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST generic function, , @t{largest}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{largest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf largest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{largest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{(setf largest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ generic function, , @t{(setf largest)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LF generic function, , @t{lf}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LF NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lf}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf lf)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ generic function, , @t{(setf lf)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LH generic function, , @t{lh}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lh}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf lh)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ generic function, , @t{(setf lh)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE function, , @t{ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURE❩ function, , @t{(setf ligature)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE class, , @t{ligature}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE condition, , @t{ligature-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LOAD-FONT function, , @t{load-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT class, , @t{math-extension-font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT class, , @t{math-symbols-font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE generic function, , @t{max-code}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{max-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf max-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ generic function, , @t{(setf max-code)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER generic function, , @t{middle-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{middle-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{middle-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf middle-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ generic function, , @t{(setf middle-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE generic function, , @t{min-code}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{min-code}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf min-code)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ generic function, , @t{(setf min-code)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME generic function, , @t{name}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method, , @t{(setf name)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶FONT method, , @t{name}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf name)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ generic function, , @t{(setf name)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NC generic function, , @t{nc}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NC NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nc}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nc)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ generic function, , @t{(setf nc)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ND generic function, , @t{nd}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ND NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nd}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nd)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ generic function, , @t{(setf nd)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NE generic function, , @t{ne}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NE NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ne}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf ne)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ generic function, , @t{(setf ne)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER generic function, , @t{next-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{next-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf next-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ generic function, , @t{(setf next-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NH generic function, , @t{nh}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nh}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nh)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ generic function, , @t{(setf nh)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NI generic function, , @t{ni}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NI NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ni}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf ni)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ generic function, , @t{(setf ni)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NICKNAME-PACKAGE function, , @t{nickname-package}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NK generic function, , @t{nk}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NK NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nk}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nk)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ generic function, , @t{(setf nk)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NL generic function, , @t{nl}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NL NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nl}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nl)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ generic function, , @t{(setf nl)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NO-BOUNDARY-CHARACTER condition, , @t{no-boundary-character}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE condition, , @t{not-extensible}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NP generic function, , @t{np}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NP NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{np}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf np)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ generic function, , @t{(setf np)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM1 generic function, , @t{num1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ generic function, , @t{(setf num1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM2 generic function, , @t{num2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ generic function, , @t{(setf num2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM3 generic function, , @t{num3}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf num3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ generic function, , @t{(setf num3)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NW generic function, , @t{nw}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NW NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nw}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{(setf nw)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ generic function, , @t{(setf nw)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE generic function, , @t{original-design-size}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{original-design-size}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf original-design-size)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ generic function, , @t{(setf original-design-size)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PADDING generic function, , @t{padding}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PADDING NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{padding}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{(setf padding)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ generic function, , @t{(setf padding)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS generic function, , @t{parameters}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf parameters)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ generic function, , @t{(setf parameters)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER generic function, , @t{pass-over}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{pass-over}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER generic function, , @t{repeated-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{repeated-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{repeated-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf repeated-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ generic function, , @t{(setf repeated-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLANT generic function, , @t{slant}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLANT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slant}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf slant)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ generic function, , @t{(setf slant)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLOPE generic function, , @t{slope}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLOPE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slope}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf slope)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ generic function, , @t{(setf slope)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST generic function, , @t{smallest}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{smallest}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf smallest)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ generic function, , @t{(setf smallest)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB1 generic function, , @t{sub1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sub1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ generic function, , @t{(setf sub1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB2 generic function, , @t{sub2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sub2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ generic function, , @t{(setf sub2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP generic function, , @t{subdrop}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{subdrop}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf subdrop)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ generic function, , @t{(setf subdrop)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP1 generic function, , @t{sup1}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup1}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup1)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ generic function, , @t{(setf sup1)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP2 generic function, , @t{sup2}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup2}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup2)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ generic function, , @t{(setf sup2)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP3 generic function, , @t{sup3}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup3}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf sup3)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ generic function, , @t{(setf sup3)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP generic function, , @t{supdrop}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{supdrop}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{(setf supdrop)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ generic function, , @t{(setf supdrop)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition, , @t{tfm-compliance}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition, , @t{tfm-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition, , @t{tfm-usage}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-WARNING condition, , @t{tfm-usage-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER generic function, , @t{top-character}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{top-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{top-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{(setf top-character)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ generic function, , @t{(setf top-character)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW condition, , @t{u16-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶UNFREEZE function, , @t{unfreeze}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method, , @t{value}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method, , @t{(setf value)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT generic function, , @t{weight}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{weight}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf weight)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ generic function, , @t{(setf weight)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH generic function, , @t{width}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf width)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ generic function, , @t{(setf width)}} (generic function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶%RUN-LIGATURE/KERNING-PROGRAM function, , @t{%run-ligature/kerning-program}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶*READTABLE* special variable, , @t{*readtable*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶*STREAM* special variable, , @t{*stream*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+CHARACTER-METRICS-DIMENSION-ACCESSORS+ constant, , @t{+character-metrics-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+FONT-DIMENSION-ACCESSORS+ constant, , @t{+font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+MATH-EXTENSION-FONT-DIMENSION-ACCESSORS+ constant, , @t{+math-extension-font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶+MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS+ constant, , @t{+math-symbols-font-dimension-accessors+}} (constant)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ANONYMOUS-FONT condition, , @t{anonymous-font}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶APPLY-LIGATURE function, , @t{apply-ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOT function, , @t{bot}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOT❩ function, , @t{(setf bot)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO structure, , @t{char-info}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO-P function, , @t{char-info-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CLINDENT function, , @t{clindent}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE-CHARACTER function, , @t{code-character}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CODE-CHARACTER❩ function, , @t{(setf code-character)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-CHAR-INFO function, , @t{copy-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-EXTEN function, , @t{copy-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COPY-LIG/KERN function, , @t{copy-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-CHAR-INFO function, , @t{decode-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-EXTEN function, , @t{decode-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECODE-LIG/KERN function, , @t{decode-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINDENT macro, , @t{defindent}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-CONSTANT macro, , @t{define-constant}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-EXTENSION-RECIPE-PSEUDO-ACCESSOR macro, , @t{define-extension-recipe-pseudo-accessor}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH-INDEX function, , @t{depth-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH-INDEX❩ function, , @t{(setf depth-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN structure, , @t{exten}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-INDEX function, , @t{exten-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTEN-INDEX❩ function, , @t{(setf exten-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-P function, , @t{exten-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE generic function, , @t{extension-recipe}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{extension-recipe}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{(setf extension-recipe)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ generic function, , @t{(setf extension-recipe)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE class, , @t{extension-recipe}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN condition, , @t{file-size-mixin}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT-EXTENSION-RECIPE function, , @t{font-extension-recipe}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT-INDEX function, , @t{height-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT-INDEX❩ function, , @t{(setf height-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶I-READER function, , @t{i-reader}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶IN-READTABLE macro, , @t{in-readtable}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE condition, , @t{invalid-original-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-INDEX function, , @t{italic-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-INDEX❩ function, , @t{(setf italic-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS generic function, , @t{kernings}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{kernings}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf kernings)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ generic function, , @t{(setf kernings)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN structure, , @t{lig/kern}} (structure)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-INDEX function, , @t{lig/kern-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIG/KERN-INDEX❩ function, , @t{(setf lig/kern-index)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-P function, , @t{lig/kern-p}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES generic function, , @t{ligatures}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ligatures}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method, , @t{(setf ligatures)}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ generic function, , @t{(setf ligatures)}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LOAD-TFM-FONT function, , @t{load-tfm-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHAR-INFO function, , @t{make-char-info}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHARACTER-METRICS function, , @t{make-character-metrics}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTEN function, , @t{make-exten}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTENSION-RECIPE function, , @t{make-extension-recipe}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-FONT function, , @t{make-font}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIG/KERN function, , @t{make-lig/kern}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIGATURE function, , @t{make-ligature}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-ACCESSORS macro, , @t{map-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-CHARACTER-METRICS-DIMENSION-ACCESSORS macro, , @t{map-character-metrics-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-FONT-DIMENSION-ACCESSORS macro, , @t{map-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-EXTENSION-FONT-DIMENSION-ACCESSORS macro, , @t{map-math-extension-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS macro, , @t{map-math-symbols-font-dimension-accessors}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MID function, , @t{mid}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MID❩ function, , @t{(setf mid)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT function, , @t{next}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT❩ function, , @t{(setf next)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHAR function, , @t{next-char}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHAR❩ function, , @t{(setf next-char)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶OP function, , @t{op}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF OP❩ function, , @t{(setf op)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-CHARACTER-INFORMATION function, , @t{parse-character-information}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-HEADER function, , @t{parse-header}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS generic function, , @t{parse-parameters}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-FIX-WORD function, , @t{read-fix-word}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-PADDED-STRING function, , @t{read-padded-string}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-U16 function, , @t{read-u16}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶READ-U32 function, , @t{read-u32}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REMAINDER function, , @t{remainder}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REMAINDER❩ function, , @t{(setf remainder)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REP function, , @t{rep}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REP❩ function, , @t{(setf rep)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPORT function, , @t{report}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶RUN-LIGATURE/KERNING-PROGRAM function, , @t{run-ligature/kerning-program}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE generic function, , @t{scale}} (generic function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE COMMON-LISP∶∶T COMMON-LISP∶∶T method, , @t{scale}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SKIP function, , @t{skip}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SKIP❩ function, , @t{(setf skip)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TABLE-AREF function, , @t{table-aref}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TILDE-READER function, , @t{tilde-reader}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP function, , @t{top}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP❩ function, , @t{(setf top)}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TREF macro, , @t{tref}} (macro)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH-INDEX function, , @t{width-index}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH-INDEX❩ function, , @t{(setf width-index)}} (function)
@end itemize
@end table


@c -------------------------------------
@c The net.didierverna.tfm.setup package
@c -------------------------------------
@node The net․didierverna․tfm․setup package, , The net․didierverna․tfm package, Packages
@section @t{net.didierverna.tfm.setup}
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP package}@c
@packageindex{net.didierverna.tfm.setup}@c
The TFM setup package.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@item Use List
@t{common-lisp}
@item Used By List
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Exported Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable, , @t{*release-major-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable, , @t{*release-minor-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-NAME* special variable, , @t{*release-name*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS* special variable, , @t{*release-status*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable, , @t{*release-status-level*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURATION function, , @t{configuration}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURE function, , @t{configure}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶VERSION function, , @t{version}} (function)
@end itemize
@item Internal Definitions
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶%VERSION function, , @t{%version}} (function)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*CONFIGURATION* special variable, , @t{*configuration*}} (special variable)
@item
@ref{go to the NET․DIDIERVERNA․TFM․SETUP∶∶RELEASE-STATUS-NUMBER function, , @t{release-status-number}} (function)
@end itemize
@end table



@c ====================================================================
@c Definitions
@c ====================================================================
@node Definitions, Indexes, Packages, Top
@chapter Definitions
Definitions are sorted by export status, category, package, and then by
lexicographic order.

@menu
* Exported definitions::
* Internal definitions::
@end menu


@c --------------------
@c Exported definitions
@c --------------------
@node Exported definitions, Internal definitions, Definitions, Definitions
@section Exported definitions
@menu
* Exported special variables::
* Exported functions::
* Exported generic functions::
* Exported conditions::
* Exported classes::
@end menu

@node Exported special variables, Exported functions, Exported definitions, Exported definitions
@subsection Special variables
@defvr {Special Variable} *release-major-level*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MAJOR-LEVEL* special variable}@c
@specialsubindex{*release-major-level*}@c
The major level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-minor-level*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-MINOR-LEVEL* special variable}@c
@specialsubindex{*release-minor-level*}@c
The minor level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-name*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-NAME* special variable}@c
@specialsubindex{*release-name*}@c
The name of this release.@*
The general naming theme for TFM is "Uncial Fonts"@comma{} from the LaTeX Font
Catalogue (https://www.tug.org/FontCatalogue/uncialfonts.html).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-status*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS* special variable}@c
@specialsubindex{*release-status*}@c
The status of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *release-status-level*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*RELEASE-STATUS-LEVEL* special variable}@c
@specialsubindex{*release-status-level*}@c
The status level of this release.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr

@node Exported functions, Exported generic functions, Exported special variables, Exported definitions
@subsection Functions
@deffn {Function} {configuration} KEY
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURATION function}@c
@functionsubindex{configuration}@c
Return KEY's value in the current TFM configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end deffn
@deffn {Function} {configure} KEY VALUE
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶CONFIGURE function}@c
@functionsubindex{configure}@c
Set KEY to VALUE in the current TFM configuration.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end deffn
@deffn {Function} {extensiblep} CHARACTER
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTENSIBLEP function}@c
@functionsubindex{extensiblep}@c
Return T if CHARACTER has an extension recipe.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Function} {freeze} FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FREEZE function}@c
@functionsubindex{freeze}@c
Freeze FONT.@*
Freezing a font means that all dimensions normally expressed in design size
units are multiplied by it@comma{} so as to lead values in TeX point units.@*
If FONT is already frozen@comma{} this function does nothing and returns NIL.
Otherwise@comma{} it returns T.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {get-character} CODE FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶GET-CHARACTER function}@c
@functionsubindex{get-character}@c
Return FONT's CODE character@comma{} or NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {kerning} CHARACTER1 CHARACTER2
@anchor{go to the NET․DIDIERVERNA․TFM∶∶KERNING function}@c
@functionsubindex{kerning}@c
Return kerning for CHARACTER1 and CHARACTER2@comma{} or NIL.@*
If CHARACTER1 and CHARACTER2 don't belong to the same font@comma{} signal a
DIFFERENT-FONTS error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Writer
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNING❩ function, , @t{(setf kerning)}} (function)
@end table
@end deffn
@deffn {Function} {(setf kerning)} KERNING CHARACTER1 CHARACTER2
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNING❩ function}@c
@functionsubindex{(setf kerning)}@c
Set KERNING for CHARACTER1 and CHARACTER2.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Reader
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNING function, , @t{kerning}} (function)
@end table
@end deffn
@deffn {Function} {ligature} CHARACTER1 CHARACTER2
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE function}@c
@functionsubindex{ligature}@c
Return ligature for CHARACTER1 and CHARACTER2@comma{} or NIL.@*
If CHARACTER1 and CHARACTER2 don't belong to the same font@comma{} signal a
DIFFERENT-FONTS error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Writer
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURE❩ function, , @t{(setf ligature)}} (function)
@end table
@end deffn
@deffn {Function} {(setf ligature)} LIGATURE CHARACTER1 CHARACTER2
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURE❩ function}@c
@functionsubindex{(setf ligature)}@c
Set LIGATURE for CHARACTER1 and CHARACTER2.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Reader
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE function, , @t{ligature}} (function)
@end table
@end deffn
@deffn {Function} {load-font} FILE &rest ARGUMENTS &key DESIGN-SIZE FREEZE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LOAD-FONT function}@c
@functionsubindex{load-font}@c
Load FILE into a new font@comma{} and return it.@*
- If provided@comma{} DESIGN-SIZE overrides the font's original value. It must be a
  real greater or equal to 1.@*
- When FREEZE (NIL by default)@comma{} freeze the font immediately after creation.
  See the eponymous function for more information.@*

Only actual TFM data is currently supported. If OFM or JFM data is detected@comma{}
this function signals an EXTENDED-TFM warning and returns NIL.@*

While loading TFM data@comma{} any signalled condition is restartable with
CANCEL-LOADING@comma{} in which case this function simply returns NIL.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {nickname-package} &optional NICKNAME
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NICKNAME-PACKAGE function}@c
@functionsubindex{nickname-package}@c
Add NICKNAME (:TFM by default) to the :NET.DIDIERVERNA.TFM package.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Function} {unfreeze} FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶UNFREEZE function}@c
@functionsubindex{unfreeze}@c
Unfreeze FONT.@*
Unfreezing means performing the inverse of what FREEZE does.@*
If FONT is not frozen@comma{} this function does nothing and returns NIL. Otherwise@comma{}
it returns T.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {version} &optional TYPE
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶VERSION function}@c
@functionsubindex{version}@c
Return the current version of TFM.@*
TYPE can be one of :number@comma{} :short or :long.@*

A version number is computed as major*10000 + minor*100 + patchlevel@comma{} leaving
two digits for each level. Alpha@comma{} beta and rc status are ignored in version
numbers.@*

A short version is something like 1.3@lbracechar{}a@comma{}b@comma{}rc@rbracechar{}4@comma{} or 1.3.4 for patchlevel.
Alpha@comma{} beta or rc levels start at 1. Patchlevels start at 0 but are ignored
in the output@comma{} so that 1.3.0 appears as just 1.3.@*

A long version is something like@*
1.3 @lbracechar{}alpha@comma{}beta@comma{}release candidate@comma{}patchlevel@rbracechar{} 4 "Artificial Uncial".@*
As for the short version@comma{} a patchlevel of 0 is ignored in the output.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end deffn

@node Exported generic functions, Exported conditions, Exported functions, Exported definitions
@subsection Generic functions
@deffn {Generic Function} {7bits-safe} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE generic function}@c
@genericsubindex{7bits-safe}@c
@deffnx {Generic Function} {(setf 7bits-safe)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ generic function}@c
@genericsubindex{(setf 7bits-safe)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {7bits-safe} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{7bits-safe}@c
@deffnx {Method} {(setf 7bits-safe)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf 7bits-safe)}@c
Whether the font is 7 bits safe (0 or 1)@comma{} or NIL.@*
When 1@comma{} it means that no character of code lesser than 128 can lead to a
character of code greater than 128 by ways of ligatures or extensible
recipes.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {actual-size} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE generic function}@c
@genericsubindex{actual-size}@c
@deffnx {Generic Function} {(setf actual-size)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ generic function}@c
@genericsubindex{(setf actual-size)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {actual-size} (CONDITION @t{file-size-mixin})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method}@c
@methodsubindex{actual-size}@c
@deffnx {Method} {(setf actual-size)} NEW-VALUE (CONDITION @t{file-size-mixin})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method}@c
@methodsubindex{(setf actual-size)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {axis-height} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT generic function}@c
@genericsubindex{axis-height}@c
@deffnx {Generic Function} {(setf axis-height)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ generic function}@c
@genericsubindex{(setf axis-height)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {axis-height} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{axis-height}@c
@deffnx {Method} {(setf axis-height)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf axis-height)}@c
The font's AXIS-HEIGHT parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {bc} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BC generic function}@c
@genericsubindex{bc}@c
@deffnx {Generic Function} {(setf bc)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ generic function}@c
@genericsubindex{(setf bc)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {bc} (CONDITION @t{invalid-character-range})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method}@c
@methodsubindex{bc}@c
@deffnx {Method} {(setf bc)} NEW-VALUE (CONDITION @t{invalid-character-range})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method}@c
@methodsubindex{(setf bc)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {big-op-spacing1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 generic function}@c
@genericsubindex{big-op-spacing1}@c
@deffnx {Generic Function} {(setf big-op-spacing1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ generic function}@c
@genericsubindex{(setf big-op-spacing1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {big-op-spacing1} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{big-op-spacing1}@c
@deffnx {Method} {(setf big-op-spacing1)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf big-op-spacing1)}@c
The font's BIG-OP-SPACING1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {big-op-spacing2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 generic function}@c
@genericsubindex{big-op-spacing2}@c
@deffnx {Generic Function} {(setf big-op-spacing2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ generic function}@c
@genericsubindex{(setf big-op-spacing2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {big-op-spacing2} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{big-op-spacing2}@c
@deffnx {Method} {(setf big-op-spacing2)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf big-op-spacing2)}@c
The font's BIG-OP-SPACING2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {big-op-spacing3} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 generic function}@c
@genericsubindex{big-op-spacing3}@c
@deffnx {Generic Function} {(setf big-op-spacing3)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ generic function}@c
@genericsubindex{(setf big-op-spacing3)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {big-op-spacing3} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{big-op-spacing3}@c
@deffnx {Method} {(setf big-op-spacing3)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf big-op-spacing3)}@c
The font's BIG-OP-SPACING3 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {big-op-spacing4} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 generic function}@c
@genericsubindex{big-op-spacing4}@c
@deffnx {Generic Function} {(setf big-op-spacing4)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ generic function}@c
@genericsubindex{(setf big-op-spacing4)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {big-op-spacing4} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{big-op-spacing4}@c
@deffnx {Method} {(setf big-op-spacing4)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf big-op-spacing4)}@c
The font's BIG-OP-SPACING4 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {big-op-spacing5} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 generic function}@c
@genericsubindex{big-op-spacing5}@c
@deffnx {Generic Function} {(setf big-op-spacing5)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ generic function}@c
@genericsubindex{(setf big-op-spacing5)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {big-op-spacing5} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{big-op-spacing5}@c
@deffnx {Method} {(setf big-op-spacing5)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf big-op-spacing5)}@c
The font's BIG-OP-SPACING5 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {bottom-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER generic function}@c
@genericsubindex{bottom-character}@c
@deffnx {Generic Function} {(setf bottom-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ generic function}@c
@genericsubindex{(setf bottom-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {bottom-character} (CHARACTER @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{bottom-character}@c
Return extensible CHARACTER's BOTTOM-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Method} {bottom-character} (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{bottom-character}@c
@deffnx {Method} {(setf bottom-character)} NEW-VALUE (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{(setf bottom-character)}@c
The recipe's bottom character@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {boundary-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER generic function}@c
@genericsubindex{boundary-character}@c
@deffnx {Generic Function} {(setf boundary-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ generic function}@c
@genericsubindex{(setf boundary-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {boundary-character} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{boundary-character}@c
@deffnx {Method} {(setf boundary-character)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf boundary-character)}@c
The font's boundary character@comma{} or NIL.@*
This character is also accessible by code@comma{} like normal ones. However@comma{} it is
the only character the code of which may be outside [MIN-CODE@comma{}MAX-CODE] (see
TeX: the Program [545]). Finally@comma{} this character is not included in the
character count@comma{} unless it exists for real in the font (has non-zero
metrics).
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {character-count} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT generic function}@c
@genericsubindex{character-count}@c
@deffnx {Generic Function} {(setf character-count)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ generic function}@c
@genericsubindex{(setf character-count)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {character-count} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{character-count}@c
@deffnx {Method} {(setf character-count)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf character-count)}@c
The font's number of characters.@*
The character count does not include the boundary character@comma{} unless that
character really exists in the font (has non-zerop metrics).
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {character1} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 generic function}@c
@genericsubindex{character1}@c
@deffnx {Generic Function} {(setf character1)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ generic function}@c
@genericsubindex{(setf character1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {character1} (CONDITION @t{different-fonts})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method}@c
@methodsubindex{character1}@c
@deffnx {Method} {(setf character1)} NEW-VALUE (CONDITION @t{different-fonts})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method}@c
@methodsubindex{(setf character1)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {character2} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 generic function}@c
@genericsubindex{character2}@c
@deffnx {Generic Function} {(setf character2)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ generic function}@c
@genericsubindex{(setf character2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {character2} (CONDITION @t{different-fonts})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method}@c
@methodsubindex{character2}@c
@deffnx {Method} {(setf character2)} NEW-VALUE (CONDITION @t{different-fonts})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method}@c
@methodsubindex{(setf character2)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {characters} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS generic function}@c
@genericsubindex{characters}@c
@deffnx {Generic Function} {(setf characters)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ generic function}@c
@genericsubindex{(setf characters)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {characters} (CONDITION @t{ligature-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method}@c
@methodsubindex{characters}@c
@deffnx {Method} {(setf characters)} NEW-VALUE (CONDITION @t{ligature-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method}@c
@methodsubindex{(setf characters)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {characters} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{characters}@c
@deffnx {Method} {(setf characters)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf characters)}@c
The font's characters.@*
This is a hash table associating character codes with characters.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {checksum} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM generic function}@c
@genericsubindex{checksum}@c
@deffnx {Generic Function} {(setf checksum)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ generic function}@c
@genericsubindex{(setf checksum)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {checksum} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{checksum}@c
@deffnx {Method} {(setf checksum)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf checksum)}@c
The font's checksum@comma{} as provided by Metafont.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {code} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CODE generic function}@c
@genericsubindex{code}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {code} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CODE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{code}@c
The character's numerical code.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {composite} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE generic function}@c
@genericsubindex{composite}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {composite} (LIGATURE @t{ligature})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE NET․DIDIERVERNA․TFM∶∶LIGATURE method}@c
@methodsubindex{composite}@c
The character to insert between the two original ones.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {declared-size} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE generic function}@c
@genericsubindex{declared-size}@c
@deffnx {Generic Function} {(setf declared-size)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ generic function}@c
@genericsubindex{(setf declared-size)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {declared-size} (CONDITION @t{file-size-mixin})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method}@c
@methodsubindex{declared-size}@c
@deffnx {Method} {(setf declared-size)} NEW-VALUE (CONDITION @t{file-size-mixin})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method}@c
@methodsubindex{(setf declared-size)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {default-rule-thickness} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS generic function}@c
@genericsubindex{default-rule-thickness}@c
@deffnx {Generic Function} {(setf default-rule-thickness)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ generic function}@c
@genericsubindex{(setf default-rule-thickness)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {default-rule-thickness} (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{default-rule-thickness}@c
@deffnx {Method} {(setf default-rule-thickness)} NEW-VALUE (MATH-EXTENSION-FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{(setf default-rule-thickness)}@c
The font's default rule thickness.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {delete-after} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER generic function}@c
@genericsubindex{delete-after}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {delete-after} (LIGATURE @t{ligature})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER NET․DIDIERVERNA․TFM∶∶LIGATURE method}@c
@methodsubindex{delete-after}@c
Whether to delete the character after the ligature.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {delete-before} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE generic function}@c
@genericsubindex{delete-before}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {delete-before} (LIGATURE @t{ligature})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE NET․DIDIERVERNA․TFM∶∶LIGATURE method}@c
@methodsubindex{delete-before}@c
Whether to delete the character before the ligature.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {delim1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 generic function}@c
@genericsubindex{delim1}@c
@deffnx {Generic Function} {(setf delim1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ generic function}@c
@genericsubindex{(setf delim1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {delim1} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{delim1}@c
@deffnx {Method} {(setf delim1)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf delim1)}@c
The font's DELIM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {delim2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 generic function}@c
@genericsubindex{delim2}@c
@deffnx {Generic Function} {(setf delim2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ generic function}@c
@genericsubindex{(setf delim2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {delim2} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{delim2}@c
@deffnx {Method} {(setf delim2)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf delim2)}@c
The font's DELIM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {denom1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 generic function}@c
@genericsubindex{denom1}@c
@deffnx {Generic Function} {(setf denom1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ generic function}@c
@genericsubindex{(setf denom1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {denom1} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{denom1}@c
@deffnx {Method} {(setf denom1)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf denom1)}@c
The font's DENOM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {denom2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 generic function}@c
@genericsubindex{denom2}@c
@deffnx {Generic Function} {(setf denom2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ generic function}@c
@genericsubindex{(setf denom2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {denom2} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{denom2}@c
@deffnx {Method} {(setf denom2)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf denom2)}@c
The font's DENOM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {depth} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEPTH generic function}@c
@genericsubindex{depth}@c
@deffnx {Generic Function} {(setf depth)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ generic function}@c
@genericsubindex{(setf depth)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {depth} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEPTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{depth}@c
@deffnx {Method} {(setf depth)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf depth)}@c
The character's depth.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {design-size} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE generic function}@c
@genericsubindex{design-size}@c
@deffnx {Generic Function} {(setf design-size)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ generic function}@c
@genericsubindex{(setf design-size)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {design-size} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{design-size}@c
@deffnx {Method} {(setf design-size)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf design-size)}@c
The font's design size@comma{} in units of TeX points.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Method} {(setf design-size)} DESIGN-SIZE FONT @t{around}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method}@c
@methodsubindex{(setf design-size)}@c
Check that DESIGN-SIZE is a real greater or equal to 1.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Method} {(setf design-size)} DESIGN-SIZE FONT @t{after}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T AFTER method}@c
@methodsubindex{(setf design-size)}@c
Rescale FONT if frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Method} {(setf design-size)} DESIGN-SIZE FONT @t{before}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ COMMON-LISP∶∶T COMMON-LISP∶∶T BEFORE method}@c
@methodsubindex{(setf design-size)}@c
Unscale FONT if frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {ec} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EC generic function}@c
@genericsubindex{ec}@c
@deffnx {Generic Function} {(setf ec)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ generic function}@c
@genericsubindex{(setf ec)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {ec} (CONDITION @t{invalid-character-range})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method}@c
@methodsubindex{ec}@c
@deffnx {Method} {(setf ec)} NEW-VALUE (CONDITION @t{invalid-character-range})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method}@c
@methodsubindex{(setf ec)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {em} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EM generic function}@c
@genericsubindex{em}@c
@deffnx {Generic Function} {(setf em)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ generic function}@c
@genericsubindex{(setf em)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {em} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EM NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{em}@c
@deffnx {Method} {(setf em)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf em)}@c
The font's em size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {encoding} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ENCODING generic function}@c
@genericsubindex{encoding}@c
@deffnx {Generic Function} {(setf encoding)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ generic function}@c
@genericsubindex{(setf encoding)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {encoding} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ENCODING NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{encoding}@c
@deffnx {Method} {(setf encoding)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf encoding)}@c
The font's character coding scheme (a BCPL string)@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {ex} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EX generic function}@c
@genericsubindex{ex}@c
@deffnx {Generic Function} {(setf ex)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ generic function}@c
@genericsubindex{(setf ex)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {ex} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EX NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{ex}@c
@deffnx {Method} {(setf ex)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf ex)}@c
The font's ex size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {expansion} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION generic function}@c
@genericsubindex{expansion}@c
@deffnx {Generic Function} {(setf expansion)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ generic function}@c
@genericsubindex{(setf expansion)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {expansion} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{expansion}@c
@deffnx {Method} {(setf expansion)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf expansion)}@c
The font's expansion (:regular@comma{} :condensed@comma{} :extended)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {extra-space} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE generic function}@c
@genericsubindex{extra-space}@c
@deffnx {Generic Function} {(setf extra-space)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ generic function}@c
@genericsubindex{(setf extra-space)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {extra-space} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{extra-space}@c
@deffnx {Method} {(setf extra-space)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf extra-space)}@c
The font's extra space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.@*

This is the additional space to put at the end of sentences.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {face-code} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE generic function}@c
@genericsubindex{face-code}@c
@deffnx {Generic Function} {(setf face-code)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ generic function}@c
@genericsubindex{(setf face-code)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {face-code} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{face-code}@c
@deffnx {Method} {(setf face-code)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf face-code)}@c
The font's 3-letters face code@comma{} or NIL.@*
When available@comma{} it is the concatenation of the upcased first letters of the
font's weight@comma{} slope@comma{} and expansion.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {face-number} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER generic function}@c
@genericsubindex{face-number}@c
@deffnx {Generic Function} {(setf face-number)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ generic function}@c
@genericsubindex{(setf face-number)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {face-number} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{face-number}@c
@deffnx {Method} {(setf face-number)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf face-number)}@c
The font's face number@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {family} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FAMILY generic function}@c
@genericsubindex{family}@c
@deffnx {Generic Function} {(setf family)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ generic function}@c
@genericsubindex{(setf family)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {family} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FAMILY NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{family}@c
@deffnx {Method} {(setf family)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf family)}@c
The font's family (a BCPL string)@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {file} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE generic function}@c
@genericsubindex{file}@c
@deffnx {Generic Function} {(setf file)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ generic function}@c
@genericsubindex{(setf file)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {file} (CONDITION @t{extended-tfm})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method}@c
@methodsubindex{file}@c
@deffnx {Method} {(setf file)} NEW-VALUE (CONDITION @t{extended-tfm})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method}@c
@methodsubindex{(setf file)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {file} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{file}@c
@deffnx {Method} {(setf file)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf file)}@c
The file from which the font was loaded@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {font} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FONT generic function}@c
@genericsubindex{font}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {font} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FONT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{font}@c
The character's font.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {frozen} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FROZEN generic function}@c
@genericsubindex{frozen}@c
@deffnx {Generic Function} {(setf frozen)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ generic function}@c
@genericsubindex{(setf frozen)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {frozen} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FROZEN NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{frozen}@c
@deffnx {Method} {(setf frozen)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf frozen)}@c
Whether the font is frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {height} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT generic function}@c
@genericsubindex{height}@c
@deffnx {Generic Function} {(setf height)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ generic function}@c
@genericsubindex{(setf height)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {height} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{height}@c
@deffnx {Method} {(setf height)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf height)}@c
The character's height.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {interword-shrink} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK generic function}@c
@genericsubindex{interword-shrink}@c
@deffnx {Generic Function} {(setf interword-shrink)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ generic function}@c
@genericsubindex{(setf interword-shrink)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {interword-shrink} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{interword-shrink}@c
@deffnx {Method} {(setf interword-shrink)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf interword-shrink)}@c
The font's interword shrinkability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {interword-space} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE generic function}@c
@genericsubindex{interword-space}@c
@deffnx {Generic Function} {(setf interword-space)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ generic function}@c
@genericsubindex{(setf interword-space)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {interword-space} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{interword-space}@c
@deffnx {Method} {(setf interword-space)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf interword-space)}@c
The font's normal interword space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {interword-stretch} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH generic function}@c
@genericsubindex{interword-stretch}@c
@deffnx {Generic Function} {(setf interword-stretch)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ generic function}@c
@genericsubindex{(setf interword-stretch)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {interword-stretch} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{interword-stretch}@c
@deffnx {Method} {(setf interword-stretch)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf interword-stretch)}@c
The font's interword stretchability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {italic-correction} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION generic function}@c
@genericsubindex{italic-correction}@c
@deffnx {Generic Function} {(setf italic-correction)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ generic function}@c
@genericsubindex{(setf italic-correction)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {italic-correction} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{italic-correction}@c
@deffnx {Method} {(setf italic-correction)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf italic-correction)}@c
The character's italic correction.@*
TeX uses this value for regular characters followed by the command /@comma{} and
also in math mode for superscript placement. It is expressed in design size
units@comma{} or in TeX point units if the font is frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {largest} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LARGEST generic function}@c
@genericsubindex{largest}@c
@deffnx {Generic Function} {(setf largest)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ generic function}@c
@genericsubindex{(setf largest)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {largest} (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{largest}@c
@deffnx {Method} {(setf largest)} NEW-VALUE (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{(setf largest)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {largest} (CONDITION @t{invalid-table-index})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method}@c
@methodsubindex{largest}@c
@deffnx {Method} {(setf largest)} NEW-VALUE (CONDITION @t{invalid-table-index})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method}@c
@methodsubindex{(setf largest)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {lf} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LF generic function}@c
@genericsubindex{lf}@c
@deffnx {Generic Function} {(setf lf)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ generic function}@c
@genericsubindex{(setf lf)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {lf} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LF NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{lf}@c
@deffnx {Method} {(setf lf)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf lf)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {lh} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LH generic function}@c
@genericsubindex{lh}@c
@deffnx {Generic Function} {(setf lh)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ generic function}@c
@genericsubindex{(setf lh)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {lh} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{lh}@c
@deffnx {Method} {(setf lh)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf lh)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {max-code} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE generic function}@c
@genericsubindex{max-code}@c
@deffnx {Generic Function} {(setf max-code)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ generic function}@c
@genericsubindex{(setf max-code)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {max-code} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{max-code}@c
@deffnx {Method} {(setf max-code)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf max-code)}@c
The font's largest character code.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {middle-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER generic function}@c
@genericsubindex{middle-character}@c
@deffnx {Generic Function} {(setf middle-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ generic function}@c
@genericsubindex{(setf middle-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {middle-character} (CHARACTER @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{middle-character}@c
Return extensible CHARACTER's MIDDLE-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Method} {middle-character} (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{middle-character}@c
@deffnx {Method} {(setf middle-character)} NEW-VALUE (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{(setf middle-character)}@c
The recipe's middle character@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {min-code} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE generic function}@c
@genericsubindex{min-code}@c
@deffnx {Generic Function} {(setf min-code)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ generic function}@c
@genericsubindex{(setf min-code)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {min-code} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{min-code}@c
@deffnx {Method} {(setf min-code)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf min-code)}@c
The font's smallest character code.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {name} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NAME generic function}@c
@genericsubindex{name}@c
@deffnx {Generic Function} {(setf name)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ generic function}@c
@genericsubindex{(setf name)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {name} (CONDITION @t{tfm-table-error})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method}@c
@methodsubindex{name}@c
@deffnx {Method} {(setf name)} NEW-VALUE (CONDITION @t{tfm-table-error})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method}@c
@methodsubindex{(setf name)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {name} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{name}@c
@deffnx {Method} {(setf name)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf name)}@c
The font's name.@*
When the font is loaded from a file@comma{} it defaults to the file's base name@comma{}
along with potential scaling information.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nc} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NC generic function}@c
@genericsubindex{nc}@c
@deffnx {Generic Function} {(setf nc)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ generic function}@c
@genericsubindex{(setf nc)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nc} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NC NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nc}@c
@deffnx {Method} {(setf nc)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nc)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nd} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ND generic function}@c
@genericsubindex{nd}@c
@deffnx {Generic Function} {(setf nd)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ generic function}@c
@genericsubindex{(setf nd)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nd} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ND NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nd}@c
@deffnx {Method} {(setf nd)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nd)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {ne} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NE generic function}@c
@genericsubindex{ne}@c
@deffnx {Generic Function} {(setf ne)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ generic function}@c
@genericsubindex{(setf ne)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {ne} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NE NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{ne}@c
@deffnx {Method} {(setf ne)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf ne)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {next-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER generic function}@c
@genericsubindex{next-character}@c
@deffnx {Generic Function} {(setf next-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ generic function}@c
@genericsubindex{(setf next-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {next-character} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{next-character}@c
@deffnx {Method} {(setf next-character)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf next-character)}@c
The next character in a character list.@*
This slot is non-null only if the character is part of a chain of characters
of ascending size@comma{} and not the last one (see TeX: the Program [544]). It is
mutually exclusive with the EXTENSION-RECIPE slot@comma{} and also with the existence
of a ligature or kerning program for this character.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nh} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NH generic function}@c
@genericsubindex{nh}@c
@deffnx {Generic Function} {(setf nh)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ generic function}@c
@genericsubindex{(setf nh)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nh} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nh}@c
@deffnx {Method} {(setf nh)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nh)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {ni} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NI generic function}@c
@genericsubindex{ni}@c
@deffnx {Generic Function} {(setf ni)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ generic function}@c
@genericsubindex{(setf ni)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {ni} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NI NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{ni}@c
@deffnx {Method} {(setf ni)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf ni)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nk} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NK generic function}@c
@genericsubindex{nk}@c
@deffnx {Generic Function} {(setf nk)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ generic function}@c
@genericsubindex{(setf nk)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nk} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NK NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nk}@c
@deffnx {Method} {(setf nk)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nk)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nl} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NL generic function}@c
@genericsubindex{nl}@c
@deffnx {Generic Function} {(setf nl)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ generic function}@c
@genericsubindex{(setf nl)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nl} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NL NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nl}@c
@deffnx {Method} {(setf nl)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nl)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {np} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NP generic function}@c
@genericsubindex{np}@c
@deffnx {Generic Function} {(setf np)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ generic function}@c
@genericsubindex{(setf np)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {np} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NP NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{np}@c
@deffnx {Method} {(setf np)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf np)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {num1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM1 generic function}@c
@genericsubindex{num1}@c
@deffnx {Generic Function} {(setf num1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ generic function}@c
@genericsubindex{(setf num1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {num1} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{num1}@c
@deffnx {Method} {(setf num1)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf num1)}@c
The font's NUM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {num2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM2 generic function}@c
@genericsubindex{num2}@c
@deffnx {Generic Function} {(setf num2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ generic function}@c
@genericsubindex{(setf num2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {num2} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{num2}@c
@deffnx {Method} {(setf num2)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf num2)}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {num3} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM3 generic function}@c
@genericsubindex{num3}@c
@deffnx {Generic Function} {(setf num3)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ generic function}@c
@genericsubindex{(setf num3)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {num3} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NUM3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{num3}@c
@deffnx {Method} {(setf num3)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf num3)}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {nw} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NW generic function}@c
@genericsubindex{nw}@c
@deffnx {Generic Function} {(setf nw)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ generic function}@c
@genericsubindex{(setf nw)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {nw} (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NW NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{nw}@c
@deffnx {Method} {(setf nw)} NEW-VALUE (CONDITION @t{invalid-section-lengths})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method}@c
@methodsubindex{(setf nw)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {original-design-size} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE generic function}@c
@genericsubindex{original-design-size}@c
@deffnx {Generic Function} {(setf original-design-size)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ generic function}@c
@genericsubindex{(setf original-design-size)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {original-design-size} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{original-design-size}@c
@deffnx {Method} {(setf original-design-size)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf original-design-size)}@c
The font's original design size@comma{} in units of TeX points.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {padding} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PADDING generic function}@c
@genericsubindex{padding}@c
@deffnx {Generic Function} {(setf padding)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ generic function}@c
@genericsubindex{(setf padding)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {padding} (CONDITION @t{invalid-string-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PADDING NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method}@c
@methodsubindex{padding}@c
@deffnx {Method} {(setf padding)} NEW-VALUE (CONDITION @t{invalid-string-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method}@c
@methodsubindex{(setf padding)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {parameters} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS generic function}@c
@genericsubindex{parameters}@c
@deffnx {Generic Function} {(setf parameters)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ generic function}@c
@genericsubindex{(setf parameters)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {parameters} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{parameters}@c
@deffnx {Method} {(setf parameters)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf parameters)}@c
The font's additional parameters array@comma{} or NIL.@*
Parameters are expressed in design size units@comma{} or in TeX point units if the
font is frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {pass-over} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER generic function}@c
@genericsubindex{pass-over}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {pass-over} (LIGATURE @t{ligature})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER NET․DIDIERVERNA․TFM∶∶LIGATURE method}@c
@methodsubindex{pass-over}@c
The number of characters to skip for reaching the next character.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {repeated-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER generic function}@c
@genericsubindex{repeated-character}@c
@deffnx {Generic Function} {(setf repeated-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ generic function}@c
@genericsubindex{(setf repeated-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {repeated-character} (CHARACTER @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{repeated-character}@c
Return extensible CHARACTER's REPEATED-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Method} {repeated-character} (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{repeated-character}@c
@deffnx {Method} {(setf repeated-character)} NEW-VALUE (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{(setf repeated-character)}@c
The recipe's repeated character.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {slant} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SLANT generic function}@c
@genericsubindex{slant}@c
@deffnx {Generic Function} {(setf slant)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ generic function}@c
@genericsubindex{(setf slant)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {slant} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SLANT NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{slant}@c
@deffnx {Method} {(setf slant)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf slant)}@c
The font's slant (a scalar ratio).
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {slope} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SLOPE generic function}@c
@genericsubindex{slope}@c
@deffnx {Generic Function} {(setf slope)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ generic function}@c
@genericsubindex{(setf slope)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {slope} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SLOPE NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{slope}@c
@deffnx {Method} {(setf slope)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf slope)}@c
The font's slope (:roman@comma{} :italic)@comma{} or NIL.@*
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {smallest} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST generic function}@c
@genericsubindex{smallest}@c
@deffnx {Generic Function} {(setf smallest)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ generic function}@c
@genericsubindex{(setf smallest)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {smallest} (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{smallest}@c
@deffnx {Method} {(setf smallest)} NEW-VALUE (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{(setf smallest)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sub1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUB1 generic function}@c
@genericsubindex{sub1}@c
@deffnx {Generic Function} {(setf sub1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ generic function}@c
@genericsubindex{(setf sub1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {sub1} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUB1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{sub1}@c
@deffnx {Method} {(setf sub1)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf sub1)}@c
The font's SUB1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sub2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUB2 generic function}@c
@genericsubindex{sub2}@c
@deffnx {Generic Function} {(setf sub2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ generic function}@c
@genericsubindex{(setf sub2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {sub2} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUB2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{sub2}@c
@deffnx {Method} {(setf sub2)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf sub2)}@c
The font's SUB2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {subdrop} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP generic function}@c
@genericsubindex{subdrop}@c
@deffnx {Generic Function} {(setf subdrop)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ generic function}@c
@genericsubindex{(setf subdrop)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {subdrop} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{subdrop}@c
@deffnx {Method} {(setf subdrop)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf subdrop)}@c
The font's SUBDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sup1} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP1 generic function}@c
@genericsubindex{sup1}@c
@deffnx {Generic Function} {(setf sup1)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ generic function}@c
@genericsubindex{(setf sup1)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {sup1} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{sup1}@c
@deffnx {Method} {(setf sup1)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf sup1)}@c
The font's SUP1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sup2} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP2 generic function}@c
@genericsubindex{sup2}@c
@deffnx {Generic Function} {(setf sup2)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ generic function}@c
@genericsubindex{(setf sup2)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {sup2} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{sup2}@c
@deffnx {Method} {(setf sup2)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf sup2)}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {sup3} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP3 generic function}@c
@genericsubindex{sup3}@c
@deffnx {Generic Function} {(setf sup3)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ generic function}@c
@genericsubindex{(setf sup3)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {sup3} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUP3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{sup3}@c
@deffnx {Method} {(setf sup3)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf sup3)}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {supdrop} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP generic function}@c
@genericsubindex{supdrop}@c
@deffnx {Generic Function} {(setf supdrop)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ generic function}@c
@genericsubindex{(setf supdrop)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {supdrop} (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{supdrop}@c
@deffnx {Method} {(setf supdrop)} NEW-VALUE (MATH-SYMBOLS-FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{(setf supdrop)}@c
The font's SUPDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {top-character} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER generic function}@c
@genericsubindex{top-character}@c
@deffnx {Generic Function} {(setf top-character)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ generic function}@c
@genericsubindex{(setf top-character)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {top-character} (CHARACTER @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{top-character}@c
Return extensible CHARACTER's TOP-CHARACTER.@*
If CHARACTER is not extensible@comma{} signal a NOT-EXTENSIBLE error.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Method} {top-character} (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{top-character}@c
@deffnx {Method} {(setf top-character)} NEW-VALUE (EXTENSION-RECIPE @t{extension-recipe})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method}@c
@methodsubindex{(setf top-character)}@c
The recipe's top character@comma{} or NIL.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {value} CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function}@c
@genericsubindex{value}@c
@deffnx {Generic Function} {(setf value)} NEW-VALUE CONDITION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function}@c
@genericsubindex{(setf value)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {value} (CONDITION @t{extended-tfm})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{extended-tfm})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-table-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-header-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-header-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{ligature-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{ligature-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{character-list-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{character-list-cycle})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-table-start})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-table-start})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-char-info})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-char-info})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-ligature-opcode})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-ligature-opcode})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-table-index})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-table-index})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-original-design-size})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-original-design-size})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-design-size})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-design-size})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-character-code})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-character-code})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{not-extensible})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{not-extensible})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-bcpl-string})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-bcpl-string})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{invalid-string-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{invalid-string-length})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{fix-word-overflow})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{fix-word-overflow})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Method} {value} (CONDITION @t{u16-overflow})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method}@c
@methodsubindex{value}@c
@deffnx {Method} {(setf value)} NEW-VALUE (CONDITION @t{u16-overflow})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method}@c
@methodsubindex{(setf value)}@c
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {weight} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT generic function}@c
@genericsubindex{weight}@c
@deffnx {Generic Function} {(setf weight)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ generic function}@c
@genericsubindex{(setf weight)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {weight} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{weight}@c
@deffnx {Method} {(setf weight)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf weight)}@c
The font's weight (:medium@comma{} :bold@comma{} :light)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {width} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶WIDTH generic function}@c
@genericsubindex{width}@c
@deffnx {Generic Function} {(setf width)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ generic function}@c
@genericsubindex{(setf width)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {width} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶WIDTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{width}@c
@deffnx {Method} {(setf width)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf width)}@c
The character's width.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn

@node Exported conditions, Exported classes, Exported generic functions, Exported definitions
@subsection Conditions
@deftp {Condition} {character-list-cycle} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE condition}@c
@conditionsubindex{character-list-cycle}@c
The Character List Cycle compliance error.@*
It signals that a cycle was found in a list of ascending character sizes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The cyclic character list.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {different-fonts} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS condition}@c
@conditionsubindex{different-fonts}@c
The Different Fonts usage error.@*
It signals an attempt at retrieving a ligature or kerning for two characters
from different fonts.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{character2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character2}} (method)
@item
@t{character1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS method, , @t{character1}} (method)
@end itemize
@item Direct slots
@defvr {Slot} character1
@slotsubindex{character1}@c
The first character.
@table @strong
@item Initargs
@t{:character1}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER1 generic function, , @t{character1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER1❩ generic function, , @t{(setf character1)}} (generic function)
@end table
@end defvr
@defvr {Slot} character2
@slotsubindex{character2}@c
The second character.
@table @strong
@item Initargs
@t{:character2}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER2 generic function, , @t{character2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER2❩ generic function, , @t{(setf character2)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {extended-tfm} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM condition}@c
@conditionsubindex{extended-tfm}@c
The Extended TFM warning.@*
It signals that a file contains extended TFM data (OFM or JFM) rather than
plain TFM data.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{file} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{file}} (method)
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The TFM extension.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@defvr {Slot} file
@slotsubindex{file}@c
The extended TFM file.
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE generic function, , @t{file}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ generic function, , @t{(setf file)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {file-overflow} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE-OVERFLOW condition}@c
@conditionsubindex{file-overflow}@c
The File Overflow compliance warning.@*
It signals that the file size is longer than expected.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN condition, , @t{file-size-mixin}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {file-underflow} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE-UNDERFLOW condition}@c
@conditionsubindex{file-underflow}@c
The File Underflow compliance error.@*
It signals that the file size is shorter than expected.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN condition, , @t{file-size-mixin}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {fix-word-overflow} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW condition}@c
@conditionsubindex{fix-word-overflow}@c
The Fix Word Overflow compliance error.@*
It signals that a fix word is outside ]-16@comma{}+16[.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The faulty value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-bcpl-string} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING condition}@c
@conditionsubindex{invalid-bcpl-string}@c
The Invalid BCPL String compliance error.@*
It signals that a BCPL string contains parentheses or non-ASCII characters.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid string.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-char-info} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO condition}@c
@conditionsubindex{invalid-char-info}@c
The Invalid Char Info compliance error.@*
It signals that a char-info with a width-index of 0 is not completely
zero'ed out.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid char-info structure.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-character-code} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE condition}@c
@conditionsubindex{invalid-character-code}@c
The Invalid Character Code compliance error.@*
It signals a reference to a character code which does not exist in the font
being loaded.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid character code.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-character-range} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE condition}@c
@conditionsubindex{invalid-character-range}@c
The Invalid Character Range compliance error.
It signals that BC-1 > EC@comma{} or that EC > 255.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{ec} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{ec}} (method)
@item
@t{bc} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BC NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE method, , @t{bc}} (method)
@end itemize
@item Direct slots
@defvr {Slot} bc
@slotsubindex{bc}@c
The smallest character code.
@table @strong
@item Initargs
@t{:bc}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BC generic function, , @t{bc}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BC❩ generic function, , @t{(setf bc)}} (generic function)
@end table
@end defvr
@defvr {Slot} ec
@slotsubindex{ec}@c
The largest character code.
@table @strong
@item Initargs
@t{:ec}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EC generic function, , @t{ec}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EC❩ generic function, , @t{(setf ec)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-design-size} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE condition}@c
@conditionsubindex{invalid-design-size}@c
The Invalid Design Size compliance error.@*
It signals that a design size is too small (< 1pt).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid design size.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-header-length} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH condition}@c
@conditionsubindex{invalid-header-length}@c
The Invalid Header Length compliance error.@*
It signals that a header length is too small (< 2 words).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid header length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-ligature-opcode} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE condition}@c
@conditionsubindex{invalid-ligature-opcode}@c
The Invalid Ligature Opcode compliance error.
It signals that a ligature opcode is invalid.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid ligature opcode.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-section-lengths} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS condition}@c
@conditionsubindex{invalid-section-lengths}@c
The Section Lengths compliance error.@*
It signals that LF != 6 + LH + NC + NW + NH + ND + NI + NL + NK + NE + NP.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{np} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NP NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{np}} (method)
@item
@t{ne} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NE NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ne}} (method)
@item
@t{nk} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NK NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nk}} (method)
@item
@t{nl} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NL NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nl}} (method)
@item
@t{ni} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NI NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{ni}} (method)
@item
@t{nd} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ND NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nd}} (method)
@item
@t{nh} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nh}} (method)
@item
@t{nw} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NW NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nw}} (method)
@item
@t{nc} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NC NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{nc}} (method)
@item
@t{lh} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LH NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lh}} (method)
@item
@t{lf} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LF NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS method, , @t{lf}} (method)
@end itemize
@item Direct slots
@defvr {Slot} lf
@slotsubindex{lf}@c
The declared length of the file.
@table @strong
@item Initargs
@t{:lf}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LF generic function, , @t{lf}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LF❩ generic function, , @t{(setf lf)}} (generic function)
@end table
@end defvr
@defvr {Slot} lh
@slotsubindex{lh}@c
The declared length of the file header.
@table @strong
@item Initargs
@t{:lh}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LH generic function, , @t{lh}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LH❩ generic function, , @t{(setf lh)}} (generic function)
@end table
@end defvr
@defvr {Slot} nc
@slotsubindex{nc}@c
EC - BC + 1.
@table @strong
@item Initargs
@t{:nc}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NC generic function, , @t{nc}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NC❩ generic function, , @t{(setf nc)}} (generic function)
@end table
@end defvr
@defvr {Slot} nw
@slotsubindex{nw}@c
The declared length of the width table.
@table @strong
@item Initargs
@t{:nw}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NW generic function, , @t{nw}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NW❩ generic function, , @t{(setf nw)}} (generic function)
@end table
@end defvr
@defvr {Slot} nh
@slotsubindex{nh}@c
The declared length of the height table.
@table @strong
@item Initargs
@t{:nh}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NH generic function, , @t{nh}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NH❩ generic function, , @t{(setf nh)}} (generic function)
@end table
@end defvr
@defvr {Slot} nd
@slotsubindex{nd}@c
The declared length of the depth table.
@table @strong
@item Initargs
@t{:nd}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ND generic function, , @t{nd}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ND❩ generic function, , @t{(setf nd)}} (generic function)
@end table
@end defvr
@defvr {Slot} ni
@slotsubindex{ni}@c
The declared length of the italic correction table.
@table @strong
@item Initargs
@t{:ni}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NI generic function, , @t{ni}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NI❩ generic function, , @t{(setf ni)}} (generic function)
@end table
@end defvr
@defvr {Slot} nl
@slotsubindex{nl}@c
The declared length of the lig/kern table.
@table @strong
@item Initargs
@t{:nl}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NL generic function, , @t{nl}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NL❩ generic function, , @t{(setf nl)}} (generic function)
@end table
@end defvr
@defvr {Slot} nk
@slotsubindex{nk}@c
The declared length of the kern table.
@table @strong
@item Initargs
@t{:nk}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NK generic function, , @t{nk}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NK❩ generic function, , @t{(setf nk)}} (generic function)
@end table
@end defvr
@defvr {Slot} ne
@slotsubindex{ne}@c
The declared length of the extensible character table.
@table @strong
@item Initargs
@t{:ne}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NE generic function, , @t{ne}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NE❩ generic function, , @t{(setf ne)}} (generic function)
@end table
@end defvr
@defvr {Slot} np
@slotsubindex{np}@c
The declared length of the parameters section.
@table @strong
@item Initargs
@t{:np}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NP generic function, , @t{np}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NP❩ generic function, , @t{(setf np)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-string-length} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH condition}@c
@conditionsubindex{invalid-string-length}@c
The Invalid String Length compliance error.@*
It signals that the declared length of a padded string is greater than its
maximum.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{padding} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PADDING NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{padding}} (method)
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@defvr {Slot} padding
@slotsubindex{padding}@c
The maximum length.
@table @strong
@item Initargs
@t{:padding}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶PADDING generic function, , @t{padding}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PADDING❩ generic function, , @t{(setf padding)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-index} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX condition}@c
@conditionsubindex{invalid-table-index}@c
The Invalid Table Index compliance error.@*
It signals that a table index is greater than its largest value.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{largest} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{largest}} (method)
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid index.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@defvr {Slot} largest
@slotsubindex{largest}@c
The largest index.
@table @strong
@item Initargs
@t{:largest}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST generic function, , @t{largest}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ generic function, , @t{(setf largest)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-length} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH condition}@c
@conditionsubindex{invalid-table-length}@c
The Invalid Table Length compliance error.@*
It signals that a declared TFM table's length is out of range.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{largest} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{largest}} (method)
@item
@t{smallest} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{smallest}} (method)
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid table length.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@defvr {Slot} smallest
@slotsubindex{smallest}@c
The smallest table length.
@table @strong
@item Initargs
@t{:smallest}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SMALLEST generic function, , @t{smallest}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SMALLEST❩ generic function, , @t{(setf smallest)}} (generic function)
@end table
@end defvr
@defvr {Slot} largest
@slotsubindex{largest}@c
The largest table length.
@table @strong
@item Initargs
@t{:largest}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LARGEST generic function, , @t{largest}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LARGEST❩ generic function, , @t{(setf largest)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-table-start} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START condition}@c
@conditionsubindex{invalid-table-start}@c
The Invalid Table Start compliance error.@*
It signals that the first value in a TFM table is not 0.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid first table value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {ligature-cycle} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE condition}@c
@conditionsubindex{ligature-cycle}@c
The Ligature Cycle compliance error.@*
It signals that a ligature introduces a cycle for a cons of characters.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{characters} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{characters}} (method)
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The ligature introducing a cycle.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@defvr {Slot} characters
@slotsubindex{characters}@c
The cons of characters involved in the ligature.
@table @strong
@item Initargs
@t{:characters}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS generic function, , @t{characters}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ generic function, , @t{(setf characters)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {no-boundary-character} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NO-BOUNDARY-CHARACTER condition}@c
@conditionsubindex{no-boundary-character}@c
The No Boundary Character compliance error.@*
It signals that a boundary character ligature/kerning program was found@comma{}
without a boundary character being defined.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@end table
@end deftp
@deftp {Condition} {not-extensible} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE condition}@c
@conditionsubindex{not-extensible}@c
The Not Extensible usage error.@*
It signals an attempt at accessing the extension recipe of a non extensible
character.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The non extensible character.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM condition}@c
@conditionsubindex{tfm}@c
The TFM root condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@t{condition} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition, , @t{tfm-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition, , @t{tfm-compliance}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition, , @t{tfm-usage}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-compliance} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition}@c
@conditionsubindex{tfm-compliance}@c
The TFM Compliance root condition.@*
This is the mixin for conditions related to TFM compliance.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-compliance-error} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition}@c
@conditionsubindex{tfm-compliance-error}@c
The TFM compliance errors root condition.@*
This is the root condition for errors related to TFM compliance.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition, , @t{tfm-compliance}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition, , @t{tfm-error}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW condition, , @t{u16-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FIX-WORD-OVERFLOW condition, , @t{fix-word-overflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-STRING-LENGTH condition, , @t{invalid-string-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-BCPL-STRING condition, , @t{invalid-bcpl-string}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-CODE condition, , @t{invalid-character-code}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-DESIGN-SIZE condition, , @t{invalid-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition, , @t{tfm-table-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-LIGATURE-OPCODE condition, , @t{invalid-ligature-opcode}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHAR-INFO condition, , @t{invalid-char-info}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NO-BOUNDARY-CHARACTER condition, , @t{no-boundary-character}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-LIST-CYCLE condition, , @t{character-list-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE-CYCLE condition, , @t{ligature-cycle}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-UNDERFLOW condition, , @t{file-underflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-HEADER-LENGTH condition, , @t{invalid-header-length}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-CHARACTER-RANGE condition, , @t{invalid-character-range}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-SECTION-LENGTHS condition, , @t{invalid-section-lengths}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-compliance-warning} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition}@c
@conditionsubindex{tfm-compliance-warning}@c
The TFM  compliance warnings root condition.@*
This is the root condition for warnings related to TFM compliance.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE condition, , @t{tfm-compliance}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE condition, , @t{invalid-original-design-size}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-OVERFLOW condition, , @t{file-overflow}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-error} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition}@c
@conditionsubindex{tfm-error}@c
The TFM errors root condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@t{error} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-usage} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition}@c
@conditionsubindex{tfm-usage}@c
The TFM Usage root condition.@*
This is the mixin for conditions related to the use of the library.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-WARNING condition, , @t{tfm-usage-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-usage-error} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition}@c
@conditionsubindex{tfm-usage-error}@c
The TFM usage errors root condition.@*
This is the root condition for errors related to the use of the library.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition, , @t{tfm-usage}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-ERROR condition, , @t{tfm-error}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NOT-EXTENSIBLE condition, , @t{not-extensible}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ANONYMOUS-FONT condition, , @t{anonymous-font}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DIFFERENT-FONTS condition, , @t{different-fonts}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-usage-warning} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-WARNING condition}@c
@conditionsubindex{tfm-usage-warning}@c
The TFM usage warnings root condition.@*
This is the root condition for warnings related to the use of the library.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE condition, , @t{tfm-usage}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition, , @t{tfm-warning}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {tfm-warning} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-WARNING condition}@c
@conditionsubindex{tfm-warning}@c
The TFM warnings root condition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@itemize @bullet
@item
@t{warning} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM condition, , @t{tfm}} (condition)
@end itemize
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-WARNING condition, , @t{tfm-usage-warning}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENDED-TFM condition, , @t{extended-tfm}} (condition)
@end itemize
@end table
@end deftp
@deftp {Condition} {u16-overflow} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW condition}@c
@conditionsubindex{u16-overflow}@c
The U16 Overflow compliance error.@*
It signals that an unsigned 16 bits integer is greater than 2^15.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶U16-OVERFLOW method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The faulty value.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp

@node Exported classes, , Exported conditions, Exported definitions
@subsection Classes
@deftp {Class} {character-metrics} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS class}@c
@classsubindex{character-metrics}@c
The Character Metrics class.@*
This class represents decoded character information. Within the context of
this library@comma{} the term "character" denotes an instance of this class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{repeated-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{bottom-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{middle-character}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{top-character}} (method)
@item
@t{print-object} (method)
@item
@t{extension-recipe} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{extension-recipe}} (method)
@item
@t{next-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{next-character}} (method)
@item
@t{italic-correction} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{italic-correction}} (method)
@item
@t{depth} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{depth}} (method)
@item
@t{height} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{height}} (method)
@item
@t{width} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{width}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{font}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method, , @t{code}} (method)
@end itemize
@item Direct slots
@defvr {Slot} code
@slotsubindex{code}@c
The character's numerical code.
@table @strong
@item Initargs
@t{:code}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE generic function, , @t{code}} (generic function)
@end table
@end defvr
@defvr {Slot} font
@slotsubindex{font}@c
The character's font.
@table @strong
@item Initargs
@t{:font}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT generic function, , @t{font}} (generic function)
@end table
@end defvr
@defvr {Slot} width
@slotsubindex{width}@c
The character's width.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:width}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH generic function, , @t{width}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH❩ generic function, , @t{(setf width)}} (generic function)
@end table
@end defvr
@defvr {Slot} height
@slotsubindex{height}@c
The character's height.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:height}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT generic function, , @t{height}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT❩ generic function, , @t{(setf height)}} (generic function)
@end table
@end defvr
@defvr {Slot} depth
@slotsubindex{depth}@c
The character's depth.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initargs
@t{:depth}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH generic function, , @t{depth}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH❩ generic function, , @t{(setf depth)}} (generic function)
@end table
@end defvr
@defvr {Slot} italic-correction
@slotsubindex{italic-correction}@c
The character's italic correction.@*
TeX uses this value for regular characters followed by the command /@comma{} and
also in math mode for superscript placement. It is expressed in design size
units@comma{} or in TeX point units if the font is frozen.
@table @strong
@item Initargs
@t{:italic-correction}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-CORRECTION generic function, , @t{italic-correction}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-CORRECTION❩ generic function, , @t{(setf italic-correction)}} (generic function)
@end table
@end defvr
@defvr {Slot} next-character
@slotsubindex{next-character}@c
The next character in a character list.@*
This slot is non-null only if the character is part of a chain of characters
of ascending size@comma{} and not the last one (see TeX: the Program [544]). It is
mutually exclusive with the EXTENSION-RECIPE slot@comma{} and also with the existence
of a ligature or kerning program for this character.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHARACTER generic function, , @t{next-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHARACTER❩ generic function, , @t{(setf next-character)}} (generic function)
@end table
@end defvr
@defvr {Slot} extension-recipe
@slotsubindex{extension-recipe}@c
The character's extension recipe@comma{} or NIL.@*
This slot is non-null only if this character is extensible (see TeX: the
Program [544]). It is mutually exclusive with the NEXT-CHARACTER slot@comma{} and
also with the existence of a ligature or kerning program for this character.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE generic function, , @t{extension-recipe}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ generic function, , @t{(setf extension-recipe)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {font} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FONT class}@c
@classsubindex{font}@c
The TeX Font Metrics class.@*
This class represents decoded font information. Within the context of this
library@comma{} the term "font" denotes an instance of this class@comma{} or of one of its
subclasses.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT class, , @t{math-symbols-font}} (class)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT class, , @t{math-extension-font}} (class)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{initialize-instance} (method)
@item
@t{print-object} (method)
@item
@t{boundary-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{boundary-character}} (method)
@item
@t{kernings} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{kernings}} (method)
@item
@t{ligatures} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ligatures}} (method)
@item
@t{character-count} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{character-count}} (method)
@item
@t{characters} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{characters}} (method)
@item
@t{max-code} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{max-code}} (method)
@item
@t{min-code} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{min-code}} (method)
@item
@t{parameters} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS NET․DIDIERVERNA․TFM∶∶FONT method, , @t{parameters}} (method)
@item
@t{extra-space} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{extra-space}} (method)
@item
@t{em} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{em}} (method)
@item
@t{ex} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EX NET․DIDIERVERNA․TFM∶∶FONT method, , @t{ex}} (method)
@item
@t{interword-shrink} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-shrink}} (method)
@item
@t{interword-stretch} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-stretch}} (method)
@item
@t{interword-space} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{interword-space}} (method)
@item
@t{slant} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLANT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slant}} (method)
@item
@t{face-code} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-code}} (method)
@item
@t{expansion} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION NET․DIDIERVERNA․TFM∶∶FONT method, , @t{expansion}} (method)
@item
@t{slope} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLOPE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{slope}} (method)
@item
@t{weight} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT NET․DIDIERVERNA․TFM∶∶FONT method, , @t{weight}} (method)
@item
@t{face-number} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER NET․DIDIERVERNA․TFM∶∶FONT method, , @t{face-number}} (method)
@item
@t{7bits-safe} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{7bits-safe}} (method)
@item
@t{family} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FAMILY NET․DIDIERVERNA․TFM∶∶FONT method, , @t{family}} (method)
@item
@t{encoding} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ENCODING NET․DIDIERVERNA․TFM∶∶FONT method, , @t{encoding}} (method)
@item
@t{original-design-size} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{original-design-size}} (method)
@item
@t{design-size} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{design-size}} (method)
@item
@t{frozen} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FROZEN NET․DIDIERVERNA․TFM∶∶FONT method, , @t{frozen}} (method)
@item
@t{checksum} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM NET․DIDIERVERNA․TFM∶∶FONT method, , @t{checksum}} (method)
@item
@t{file} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE NET․DIDIERVERNA․TFM∶∶FONT method, , @t{file}} (method)
@item
@t{name} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶FONT method, , @t{name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} name
@slotsubindex{name}@c
The font's name.@*
When the font is loaded from a file@comma{} it defaults to the file's base name@comma{}
along with potential scaling information.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME generic function, , @t{name}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ generic function, , @t{(setf name)}} (generic function)
@end table
@end defvr
@defvr {Slot} file
@slotsubindex{file}@c
The file from which the font was loaded@comma{} or NIL.
@table @strong
@item Initargs
@t{:file}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE generic function, , @t{file}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FILE❩ generic function, , @t{(setf file)}} (generic function)
@end table
@end defvr
@defvr {Slot} checksum
@slotsubindex{checksum}@c
The font's checksum@comma{} as provided by Metafont.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHECKSUM generic function, , @t{checksum}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHECKSUM❩ generic function, , @t{(setf checksum)}} (generic function)
@end table
@end defvr
@defvr {Slot} frozen
@slotsubindex{frozen}@c
Whether the font is frozen.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FROZEN generic function, , @t{frozen}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FROZEN❩ generic function, , @t{(setf frozen)}} (generic function)
@end table
@end defvr
@defvr {Slot} design-size
@slotsubindex{design-size}@c
The font's design size@comma{} in units of TeX points.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DESIGN-SIZE generic function, , @t{design-size}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DESIGN-SIZE❩ generic function, , @t{(setf design-size)}} (generic function)
@end table
@end defvr
@defvr {Slot} original-design-size
@slotsubindex{original-design-size}@c
The font's original design size@comma{} in units of TeX points.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ORIGINAL-DESIGN-SIZE generic function, , @t{original-design-size}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ORIGINAL-DESIGN-SIZE❩ generic function, , @t{(setf original-design-size)}} (generic function)
@end table
@end defvr
@defvr {Slot} encoding
@slotsubindex{encoding}@c
The font's character coding scheme (a BCPL string)@comma{} or NIL.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ENCODING generic function, , @t{encoding}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ENCODING❩ generic function, , @t{(setf encoding)}} (generic function)
@end table
@end defvr
@defvr {Slot} family
@slotsubindex{family}@c
The font's family (a BCPL string)@comma{} or NIL.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FAMILY generic function, , @t{family}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FAMILY❩ generic function, , @t{(setf family)}} (generic function)
@end table
@end defvr
@defvr {Slot} 7bits-safe
@slotsubindex{7bits-safe}@c
Whether the font is 7 bits safe (0 or 1)@comma{} or NIL.@*
When 1@comma{} it means that no character of code lesser than 128 can lead to a
character of code greater than 128 by ways of ligatures or extensible
recipes.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶7BITS-SAFE generic function, , @t{7bits-safe}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF 7BITS-SAFE❩ generic function, , @t{(setf 7bits-safe)}} (generic function)
@end table
@end defvr
@defvr {Slot} face-number
@slotsubindex{face-number}@c
The font's face number@comma{} or NIL.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-NUMBER generic function, , @t{face-number}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-NUMBER❩ generic function, , @t{(setf face-number)}} (generic function)
@end table
@end defvr
@defvr {Slot} weight
@slotsubindex{weight}@c
The font's weight (:medium@comma{} :bold@comma{} :light)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶WEIGHT generic function, , @t{weight}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WEIGHT❩ generic function, , @t{(setf weight)}} (generic function)
@end table
@end defvr
@defvr {Slot} slope
@slotsubindex{slope}@c
The font's slope (:roman@comma{} :italic)@comma{} or NIL.@*
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLOPE generic function, , @t{slope}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLOPE❩ generic function, , @t{(setf slope)}} (generic function)
@end table
@end defvr
@defvr {Slot} expansion
@slotsubindex{expansion}@c
The font's expansion (:regular@comma{} :condensed@comma{} :extended)@comma{} or NIL.
When available@comma{} it is decoded from the font face number.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXPANSION generic function, , @t{expansion}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXPANSION❩ generic function, , @t{(setf expansion)}} (generic function)
@end table
@end defvr
@defvr {Slot} face-code
@slotsubindex{face-code}@c
The font's 3-letters face code@comma{} or NIL.@*
When available@comma{} it is the concatenation of the upcased first letters of the
font's weight@comma{} slope@comma{} and expansion.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶FACE-CODE generic function, , @t{face-code}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF FACE-CODE❩ generic function, , @t{(setf face-code)}} (generic function)
@end table
@end defvr
@defvr {Slot} slant
@slotsubindex{slant}@c
The font's slant (a scalar ratio).
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SLANT generic function, , @t{slant}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SLANT❩ generic function, , @t{(setf slant)}} (generic function)
@end table
@end defvr
@defvr {Slot} interword-space
@slotsubindex{interword-space}@c
The font's normal interword space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SPACE generic function, , @t{interword-space}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SPACE❩ generic function, , @t{(setf interword-space)}} (generic function)
@end table
@end defvr
@defvr {Slot} interword-stretch
@slotsubindex{interword-stretch}@c
The font's interword stretchability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-STRETCH generic function, , @t{interword-stretch}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-STRETCH❩ generic function, , @t{(setf interword-stretch)}} (generic function)
@end table
@end defvr
@defvr {Slot} interword-shrink
@slotsubindex{interword-shrink}@c
The font's interword shrinkability.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶INTERWORD-SHRINK generic function, , @t{interword-shrink}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF INTERWORD-SHRINK❩ generic function, , @t{(setf interword-shrink)}} (generic function)
@end table
@end defvr
@defvr {Slot} ex
@slotsubindex{ex}@c
The font's ex size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EX generic function, , @t{ex}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EX❩ generic function, , @t{(setf ex)}} (generic function)
@end table
@end defvr
@defvr {Slot} em
@slotsubindex{em}@c
The font's em size.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EM generic function, , @t{em}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EM❩ generic function, , @t{(setf em)}} (generic function)
@end table
@end defvr
@defvr {Slot} extra-space
@slotsubindex{extra-space}@c
The font's extra space.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.@*

This is the additional space to put at the end of sentences.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTRA-SPACE generic function, , @t{extra-space}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTRA-SPACE❩ generic function, , @t{(setf extra-space)}} (generic function)
@end table
@end defvr
@defvr {Slot} parameters
@slotsubindex{parameters}@c
The font's additional parameters array@comma{} or NIL.@*
Parameters are expressed in design size units@comma{} or in TeX point units if the
font is frozen.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARAMETERS generic function, , @t{parameters}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF PARAMETERS❩ generic function, , @t{(setf parameters)}} (generic function)
@end table
@end defvr
@defvr {Slot} min-code
@slotsubindex{min-code}@c
The font's smallest character code.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIN-CODE generic function, , @t{min-code}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIN-CODE❩ generic function, , @t{(setf min-code)}} (generic function)
@end table
@end defvr
@defvr {Slot} max-code
@slotsubindex{max-code}@c
The font's largest character code.
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶MAX-CODE generic function, , @t{max-code}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MAX-CODE❩ generic function, , @t{(setf max-code)}} (generic function)
@end table
@end defvr
@defvr {Slot} characters
@slotsubindex{characters}@c
The font's characters.@*
This is a hash table associating character codes with characters.
@table @strong
@item Initform
@t{(make-hash-table :test (function eq))}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTERS generic function, , @t{characters}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTERS❩ generic function, , @t{(setf characters)}} (generic function)
@end table
@end defvr
@defvr {Slot} character-count
@slotsubindex{character-count}@c
The font's number of characters.@*
The character count does not include the boundary character@comma{} unless that
character really exists in the font (has non-zerop metrics).
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶CHARACTER-COUNT generic function, , @t{character-count}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CHARACTER-COUNT❩ generic function, , @t{(setf character-count)}} (generic function)
@end table
@end defvr
@defvr {Slot} ligatures
@slotsubindex{ligatures}@c
The font's ligatures.@*
This is a hash table associating conses of characters with the corresponding
ligature.
@table @strong
@item Initform
@t{(make-hash-table :test (function equal))}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES generic function, , @t{ligatures}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ generic function, , @t{(setf ligatures)}} (generic function)
@end table
@end defvr
@defvr {Slot} kernings
@slotsubindex{kernings}@c
The font's kernings.@*
This is a hash table associating conses of characters with the corresponding
kerning. They are expressed in design size units@comma{} or in TeX point units if
the font is frozen.
@table @strong
@item Initform
@t{(make-hash-table :test (function equal))}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS generic function, , @t{kernings}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ generic function, , @t{(setf kernings)}} (generic function)
@end table
@end defvr
@defvr {Slot} boundary-character
@slotsubindex{boundary-character}@c
The font's boundary character@comma{} or NIL.@*
This character is also accessible by code@comma{} like normal ones. However@comma{} it is
the only character the code of which may be outside [MIN-CODE@comma{}MAX-CODE] (see
TeX: the Program [545]). Finally@comma{} this character is not included in the
character count@comma{} unless it exists for real in the font (has non-zero
metrics).
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOUNDARY-CHARACTER generic function, , @t{boundary-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOUNDARY-CHARACTER❩ generic function, , @t{(setf boundary-character)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {ligature} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIGATURE class}@c
@classsubindex{ligature}@c
The Ligature class.@*
This class represents a decoded ligature program. Within the context of this
library@comma{} the term "ligature" denotes an instance of this class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{pass-over}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-after}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{delete-before}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE NET․DIDIERVERNA․TFM∶∶LIGATURE method, , @t{composite}} (method)
@end itemize
@item Direct slots
@defvr {Slot} composite
@slotsubindex{composite}@c
The character to insert between the two original ones.
@table @strong
@item Initargs
@t{:composite}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶COMPOSITE generic function, , @t{composite}} (generic function)
@end table
@end defvr
@defvr {Slot} delete-before
@slotsubindex{delete-before}@c
Whether to delete the character before the ligature.
@table @strong
@item Initargs
@t{:delete-before}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-BEFORE generic function, , @t{delete-before}} (generic function)
@end table
@end defvr
@defvr {Slot} delete-after
@slotsubindex{delete-after}@c
Whether to delete the character after the ligature.
@table @strong
@item Initargs
@t{:delete-after}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELETE-AFTER generic function, , @t{delete-after}} (generic function)
@end table
@end defvr
@defvr {Slot} pass-over
@slotsubindex{pass-over}@c
The number of characters to skip for reaching the next character.
@table @strong
@item Initargs
@t{:pass-over}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶PASS-OVER generic function, , @t{pass-over}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {math-extension-font} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT class}@c
@classsubindex{math-extension-font}@c
The Math Extension Font class.@*
This class represents fonts with the "TeX math extension" character coding
scheme.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT class, , @t{font}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@t{big-op-spacing5} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing5}} (method)
@item
@t{big-op-spacing4} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing4}} (method)
@item
@t{big-op-spacing3} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing3}} (method)
@item
@t{big-op-spacing2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing2}} (method)
@item
@t{big-op-spacing1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{big-op-spacing1}} (method)
@item
@t{default-rule-thickness} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method, , @t{default-rule-thickness}} (method)
@end itemize
@item Direct slots
@defvr {Slot} default-rule-thickness
@slotsubindex{default-rule-thickness}@c
The font's default rule thickness.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEFAULT-RULE-THICKNESS generic function, , @t{default-rule-thickness}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEFAULT-RULE-THICKNESS❩ generic function, , @t{(setf default-rule-thickness)}} (generic function)
@end table
@end defvr
@defvr {Slot} big-op-spacing1
@slotsubindex{big-op-spacing1}@c
The font's BIG-OP-SPACING1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING1 generic function, , @t{big-op-spacing1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING1❩ generic function, , @t{(setf big-op-spacing1)}} (generic function)
@end table
@end defvr
@defvr {Slot} big-op-spacing2
@slotsubindex{big-op-spacing2}@c
The font's BIG-OP-SPACING2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING2 generic function, , @t{big-op-spacing2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING2❩ generic function, , @t{(setf big-op-spacing2)}} (generic function)
@end table
@end defvr
@defvr {Slot} big-op-spacing3
@slotsubindex{big-op-spacing3}@c
The font's BIG-OP-SPACING3 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING3 generic function, , @t{big-op-spacing3}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING3❩ generic function, , @t{(setf big-op-spacing3)}} (generic function)
@end table
@end defvr
@defvr {Slot} big-op-spacing4
@slotsubindex{big-op-spacing4}@c
The font's BIG-OP-SPACING4 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING4 generic function, , @t{big-op-spacing4}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING4❩ generic function, , @t{(setf big-op-spacing4)}} (generic function)
@end table
@end defvr
@defvr {Slot} big-op-spacing5
@slotsubindex{big-op-spacing5}@c
The font's BIG-OP-SPACING5 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BIG-OP-SPACING5 generic function, , @t{big-op-spacing5}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BIG-OP-SPACING5❩ generic function, , @t{(setf big-op-spacing5)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Class} {math-symbols-font} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT class}@c
@classsubindex{math-symbols-font}@c
The Math Symbols Font class.@*
This class represents fonts with the "TeX math symbols" character coding
scheme.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶FONT class, , @t{font}} (class)
@item Direct methods
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{parse-parameters}} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT COMMON-LISP∶∶T AROUND method, , @t{scale}} (method)
@item
@t{axis-height} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{axis-height}} (method)
@item
@t{delim2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim2}} (method)
@item
@t{delim1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{delim1}} (method)
@item
@t{subdrop} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{subdrop}} (method)
@item
@t{supdrop} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{supdrop}} (method)
@item
@t{sub2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub2}} (method)
@item
@t{sub1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sub1}} (method)
@item
@t{sup3} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup3}} (method)
@item
@t{sup2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup2}} (method)
@item
@t{sup1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{sup1}} (method)
@item
@t{denom2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom2}} (method)
@item
@t{denom1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{denom1}} (method)
@item
@t{num3} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM3 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num3}} (method)
@item
@t{num2} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM2 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num2}} (method)
@item
@t{num1} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM1 NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method, , @t{num1}} (method)
@end itemize
@item Direct slots
@defvr {Slot} num1
@slotsubindex{num1}@c
The font's NUM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM1 generic function, , @t{num1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM1❩ generic function, , @t{(setf num1)}} (generic function)
@end table
@end defvr
@defvr {Slot} num2
@slotsubindex{num2}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM2 generic function, , @t{num2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM2❩ generic function, , @t{(setf num2)}} (generic function)
@end table
@end defvr
@defvr {Slot} num3
@slotsubindex{num3}@c
The font's NUM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NUM3 generic function, , @t{num3}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NUM3❩ generic function, , @t{(setf num3)}} (generic function)
@end table
@end defvr
@defvr {Slot} denom1
@slotsubindex{denom1}@c
The font's DENOM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM1 generic function, , @t{denom1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM1❩ generic function, , @t{(setf denom1)}} (generic function)
@end table
@end defvr
@defvr {Slot} denom2
@slotsubindex{denom2}@c
The font's DENOM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DENOM2 generic function, , @t{denom2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DENOM2❩ generic function, , @t{(setf denom2)}} (generic function)
@end table
@end defvr
@defvr {Slot} sup1
@slotsubindex{sup1}@c
The font's SUP1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP1 generic function, , @t{sup1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP1❩ generic function, , @t{(setf sup1)}} (generic function)
@end table
@end defvr
@defvr {Slot} sup2
@slotsubindex{sup2}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP2 generic function, , @t{sup2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP2❩ generic function, , @t{(setf sup2)}} (generic function)
@end table
@end defvr
@defvr {Slot} sup3
@slotsubindex{sup3}@c
The font's SUP2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUP3 generic function, , @t{sup3}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUP3❩ generic function, , @t{(setf sup3)}} (generic function)
@end table
@end defvr
@defvr {Slot} sub1
@slotsubindex{sub1}@c
The font's SUB1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB1 generic function, , @t{sub1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB1❩ generic function, , @t{(setf sub1)}} (generic function)
@end table
@end defvr
@defvr {Slot} sub2
@slotsubindex{sub2}@c
The font's SUB2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUB2 generic function, , @t{sub2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUB2❩ generic function, , @t{(setf sub2)}} (generic function)
@end table
@end defvr
@defvr {Slot} supdrop
@slotsubindex{supdrop}@c
The font's SUPDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUPDROP generic function, , @t{supdrop}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUPDROP❩ generic function, , @t{(setf supdrop)}} (generic function)
@end table
@end defvr
@defvr {Slot} subdrop
@slotsubindex{subdrop}@c
The font's SUBDROP parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SUBDROP generic function, , @t{subdrop}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SUBDROP❩ generic function, , @t{(setf subdrop)}} (generic function)
@end table
@end defvr
@defvr {Slot} delim1
@slotsubindex{delim1}@c
The font's DELIM1 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM1 generic function, , @t{delim1}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM1❩ generic function, , @t{(setf delim1)}} (generic function)
@end table
@end defvr
@defvr {Slot} delim2
@slotsubindex{delim2}@c
The font's DELIM2 parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DELIM2 generic function, , @t{delim2}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DELIM2❩ generic function, , @t{(setf delim2)}} (generic function)
@end table
@end defvr
@defvr {Slot} axis-height
@slotsubindex{axis-height}@c
The font's AXIS-HEIGHT parameter.@*
It is expressed in design size units@comma{} or in TeX point units if the font is
frozen.
@table @strong
@item Initform
@t{0}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶AXIS-HEIGHT generic function, , @t{axis-height}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF AXIS-HEIGHT❩ generic function, , @t{(setf axis-height)}} (generic function)
@end table
@end defvr
@end table
@end deftp


@c --------------------
@c Internal definitions
@c --------------------
@node Internal definitions, , Exported definitions, Definitions
@section Internal definitions
@menu
* Internal constants::
* Internal special variables::
* Internal macros::
* Internal functions::
* Internal generic functions::
* Internal conditions::
* Internal structures::
* Internal classes::
@end menu

@node Internal constants, Internal special variables, Internal definitions, Internal definitions
@subsection Constants
@defvr {Constant} +character-metrics-dimension-accessors+
@anchor{go to the NET․DIDIERVERNA․TFM∶∶+CHARACTER-METRICS-DIMENSION-ACCESSORS+ constant}@c
@constantsubindex{+character-metrics-dimension-accessors+}@c
The list of dimension accessor names in the CHARACTER-METRICS class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end defvr
@defvr {Constant} +font-dimension-accessors+
@anchor{go to the NET․DIDIERVERNA․TFM∶∶+FONT-DIMENSION-ACCESSORS+ constant}@c
@constantsubindex{+font-dimension-accessors+}@c
The list of dimension accessor names in the FONT class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end defvr
@defvr {Constant} +math-extension-font-dimension-accessors+
@anchor{go to the NET․DIDIERVERNA․TFM∶∶+MATH-EXTENSION-FONT-DIMENSION-ACCESSORS+ constant}@c
@constantsubindex{+math-extension-font-dimension-accessors+}@c
The list of dimension accessor names in the MATH-EXTENSION-FONT class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end defvr
@defvr {Constant} +math-symbols-font-dimension-accessors+
@anchor{go to the NET․DIDIERVERNA․TFM∶∶+MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS+ constant}@c
@constantsubindex{+math-symbols-font-dimension-accessors+}@c
The list of dimension accessor names in the MATH-SYMBOLS-FONT class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end defvr

@node Internal special variables, Internal macros, Internal constants, Internal definitions
@subsection Special variables
@defvr {Special Variable} *configuration*
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶*CONFIGURATION* special variable}@c
@specialsubindex{*configuration*}@c
The TFM configuration settings.@*
This variable contains a property list of configuration options.
Current options are:@*
- :swank-eval-in-emacs (Boolean)@*

See section A.1 of the user manual for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *readtable*
@anchor{go to the NET․DIDIERVERNA․TFM∶∶*READTABLE* special variable}@c
@specialsubindex{*readtable*}@c
The TFM readtable.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end defvr
@defvr {Special Variable} *stream*
@anchor{go to the NET․DIDIERVERNA․TFM∶∶*STREAM* special variable}@c
@specialsubindex{*stream*}@c
The stream being read.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end defvr

@node Internal macros, Internal functions, Internal special variables, Internal definitions
@subsection Macros
@deffn {Macro} {defindent} SYMBOL INDENT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEFINDENT macro}@c
@macrosubindex{defindent}@c
Set SYMBOL's indentation to INDENT in (X)Emacs.
SYMBOL and INDENT need not be quoted.@*
See CLINDENT for more information.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {define-constant} NAME VALUE &optional DOCUMENTATION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-CONSTANT macro}@c
@macrosubindex{define-constant}@c
Like DEFCONSTANT@comma{} but reuse existing value if any.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {define-extension-recipe-pseudo-accessor} NAME
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEFINE-EXTENSION-RECIPE-PSEUDO-ACCESSOR macro}@c
@macrosubindex{define-extension-recipe-pseudo-accessor}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {in-readtable} NAME
@anchor{go to the NET․DIDIERVERNA․TFM∶∶IN-READTABLE macro}@c
@macrosubindex{in-readtable}@c
Set the current readtable to the value of NAME::*READTABLE*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-accessors} VAR OBJECT ACCESSORS &body BODY
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAP-ACCESSORS macro}@c
@macrosubindex{map-accessors}@c
Map BODY on OBJECT ACCESSORS@comma{} each in turn available as VAR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-character-metrics-dimension-accessors} VAR CHARACTER &body BODY
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAP-CHARACTER-METRICS-DIMENSION-ACCESSORS macro}@c
@macrosubindex{map-character-metrics-dimension-accessors}@c
Map BODY on CHARACTER metrics dimension accessors available as VAR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-font-dimension-accessors} VAR FONT &body BODY
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAP-FONT-DIMENSION-ACCESSORS macro}@c
@macrosubindex{map-font-dimension-accessors}@c
Map BODY on FONT dimension accessors available as VAR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-math-extension-font-dimension-accessors} VAR FONT &body BODY
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-EXTENSION-FONT-DIMENSION-ACCESSORS macro}@c
@macrosubindex{map-math-extension-font-dimension-accessors}@c
Map BODY on math extension FONT dimension accessors available as VAR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {map-math-symbols-font-dimension-accessors} VAR FONT &body BODY
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAP-MATH-SYMBOLS-FONT-DIMENSION-ACCESSORS macro}@c
@macrosubindex{map-math-symbols-font-dimension-accessors}@c
Map BODY on FONT dimension accessors available as VAR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Macro} {tref} TABLE INDEX
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TREF macro}@c
@macrosubindex{tref}@c
Call TABLE-AREF@comma{} computing the table name from TABLE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn

@node Internal functions, Internal generic functions, Internal macros, Internal definitions
@subsection Functions
@deffn {Function} {%run-ligature/kerning-program} CHARACTER INDEX LIG/KERNS KERNS &aux FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶%RUN-LIGATURE/KERNING-PROGRAM function}@c
@functionsubindex{%run-ligature/kerning-program}@c
Run a ligature/kerning program for CHARACTER.@*
The program starts at LIG/KERNS[INDEX] and uses the KERNS array. Running the
program eventually creates ligatures or kernings for CHARACTER and some other
character.@*

If an invalid index into LIG/KERNS is encountered@comma{} signal an
INVALID-TABLE-INDEX error. This error is immediately restartable with
ABORT-LIG/KERN-PROGRAM.@*

If an invalid ligature opcode is encountered@comma{} signal an
INVALID-LIGATURE-OPCODE error. This error is immediately restartable with
DISCARD-LIGATURE.@*

If an invalid index into KERNS is encountered@comma{} signal an INVALID-TABLE-INDEX
error. This error is immediately restartable with DISCARD-KERNING.@*

Finally@comma{} if an invalid character code is encountered@comma{} signal an
INVALID-CHARACTER-CODE error. Depending on the context@comma{} this error is
immediately restartable with DISCARD-LIGATURE or DISCARD-KERNING.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {%version} TYPE MAJOR MINOR STATUS LEVEL NAME
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶%VERSION function}@c
@functionsubindex{%version}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end deffn
@deffn {Function} {apply-ligature} LIGATURE STATE &aux NEW-STATE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶APPLY-LIGATURE function}@c
@functionsubindex{apply-ligature}@c
Apply LIGATURE to STATE and return the new state.@*
STATE is a list of characters@comma{} the first two being subject to LIGATURE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {bot} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶BOT function}@c
@functionsubindex{bot}@c
@deffnx {Function} {(setf bot)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOT❩ function}@c
@functionsubindex{(setf bot)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {char-info-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO-P function}@c
@functionsubindex{char-info-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {clindent} SYMBOL INDENT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CLINDENT function}@c
@functionsubindex{clindent}@c
Set SYMBOL's indentation to INDENT in Emacs.@*
This function sets SYMBOL's common-lisp-indent-function property.
If INDENT is a symbol@comma{} use its indentation definition.
Otherwise@comma{} INDENT is considered as an indentation definition.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Function} {code-character} CODE FONT &optional ERRORP
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CODE-CHARACTER function}@c
@functionsubindex{code-character}@c
Return FONT's CODE character.@*
If ERRORP (the default)@comma{} check that the character exists@comma{} or signal an
INVALID-CHARACTER-CODE error. Note that a fake boundary character may be
retrieved by this function.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Writer
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CODE-CHARACTER❩ function, , @t{(setf code-character)}} (function)
@end table
@end deffn
@deffn {Function} {(setf code-character)} CHARACTER FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF CODE-CHARACTER❩ function}@c
@functionsubindex{(setf code-character)}@c
Make FONT's CHARACTER accessible by its code.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Reader
@ref{go to the NET․DIDIERVERNA․TFM∶∶CODE-CHARACTER function, , @t{code-character}} (function)
@end table
@end deffn
@deffn {Function} {copy-char-info} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶COPY-CHAR-INFO function}@c
@functionsubindex{copy-char-info}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-exten} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶COPY-EXTEN function}@c
@functionsubindex{copy-exten}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {copy-lig/kern} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶COPY-LIG/KERN function}@c
@functionsubindex{copy-lig/kern}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {decode-char-info} WORD
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DECODE-CHAR-INFO function}@c
@functionsubindex{decode-char-info}@c
Decode char-info WORD into a new CHAR-INFO instance@comma{} and return it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {decode-exten} WORD
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DECODE-EXTEN function}@c
@functionsubindex{decode-exten}@c
Decode exten WORD into a new EXTEN instance@comma{} and return it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {decode-lig/kern} WORD
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DECODE-LIG/KERN function}@c
@functionsubindex{decode-lig/kern}@c
Decode lig/kern WORD into a new LIG/KERN instance@comma{} and return it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {depth-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶DEPTH-INDEX function}@c
@functionsubindex{depth-index}@c
@deffnx {Function} {(setf depth-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH-INDEX❩ function}@c
@functionsubindex{(setf depth-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {exten-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-INDEX function}@c
@functionsubindex{exten-index}@c
@deffnx {Function} {(setf exten-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTEN-INDEX❩ function}@c
@functionsubindex{(setf exten-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {exten-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-P function}@c
@functionsubindex{exten-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {font-extension-recipe} EXTEN FONT &aux INITARGS
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FONT-EXTENSION-RECIPE function}@c
@functionsubindex{font-extension-recipe}@c
Make an extension recipe based on EXTEN with FONT's characters.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {height-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT-INDEX function}@c
@functionsubindex{height-index}@c
@deffnx {Function} {(setf height-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT-INDEX❩ function}@c
@functionsubindex{(setf height-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {i-reader} STREAM SUBCHAR ARG
@anchor{go to the NET․DIDIERVERNA․TFM∶∶I-READER function}@c
@functionsubindex{i-reader}@c
Read an argument list for the DEFINDENT macro.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Function} {italic-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-INDEX function}@c
@functionsubindex{italic-index}@c
@deffnx {Function} {(setf italic-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-INDEX❩ function}@c
@functionsubindex{(setf italic-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {lig/kern-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-INDEX function}@c
@functionsubindex{lig/kern-index}@c
@deffnx {Function} {(setf lig/kern-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIG/KERN-INDEX❩ function}@c
@functionsubindex{(setf lig/kern-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {lig/kern-p} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-P function}@c
@functionsubindex{lig/kern-p}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {load-tfm-font} LF &key FILE NAME DESIGN-SIZE FREEZE &aux FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LOAD-TFM-FONT function}@c
@functionsubindex{load-tfm-font}@c
Parse *STREAM* of declared length LF into a new font@comma{} and return it.@*
- FILE defaults to *STREAM*'s associated file if any.@*
- NAME defaults to the FILE's base name@comma{} if any.@*
- If DESIGN-SIZE is provided and not a real greater or equal to 1@comma{} signal a
  type error. Otherwise@comma{} override the original design size with it.@*
- When FREEZE (NIL by default)@comma{} freeze the font immediately after creation.

If *STREAM* is shorter than expected@comma{} signal a FILE-UNDERFLOW error.@*
If *STREAM* is longer than expected@comma{} signal a FILE-OVERFLOW warning.@*

If the declared header length is less than 2@comma{} signal an INVALID-HEADER-LENGTH
error.@*

If BC and EC don't make sense@comma{} signal an INVALID-CHARACTER-RANGE error.@*

If the widths@comma{} heights@comma{} depths@comma{} italic corrections@comma{} or extens tables lengths
are not within the expected range@comma{} signal an INVALID-TABLE-LENGTH error.@*

Finally@comma{} if the declared sections lengths don't add up to the declared file
length@comma{} signal an INVALID-SECTION-LENGTHS error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-char-info} &key (WIDTH-INDEX WIDTH-INDEX) (HEIGHT-INDEX HEIGHT-INDEX) (DEPTH-INDEX DEPTH-INDEX) (ITALIC-INDEX ITALIC-INDEX) (LIG/KERN-INDEX LIG/KERN-INDEX) (NEXT-CHAR NEXT-CHAR) (EXTEN-INDEX EXTEN-INDEX)
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHAR-INFO function}@c
@functionsubindex{make-char-info}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-character-metrics} CODE FONT WIDTH HEIGHT DEPTH ITALIC-CORRECTION
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-CHARACTER-METRICS function}@c
@functionsubindex{make-character-metrics}@c
Make a new CHARACTER-METRICS instance@comma{} and return it.@*
Initialize the character's CODE@comma{} FONT@comma{} WIDTH@comma{} HEIGHT@comma{} DEPTH@comma{} and
ITALIC-CORRECTION appropriately. The two remaining slots (NEXT-CHARACTER and
EXTENSION-RECIPE) will be initialized later if needed@comma{} when all character
metrics instances are created.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-exten} &key (TOP TOP) (MID MID) (BOT BOT) (REP REP)
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTEN function}@c
@functionsubindex{make-exten}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-extension-recipe} REPEATED-CHARACTER &rest INITARGS &key TOP-CHARACTER MIDDLE-CHARACTER BOTTOM-CHARACTER
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-EXTENSION-RECIPE function}@c
@functionsubindex{make-extension-recipe}@c
Make a new EXTENSION-RECIPE with REPEATED-CHARACTER and return it.
The recipe may also have a TOP-@comma{} MIDDLE-@comma{} and BOTTOM-CHARACTER.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-font} NAME &rest INITARGS
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-FONT function}@c
@functionsubindex{make-font}@c
Make a new NAMEd FONT instance@comma{} and return it.@*
If INITARGS are provided@comma{} pass them as-is to MAKE-INSTANCE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-lig/kern} &key (SKIP SKIP) (NEXT NEXT) (OP OP) (REMAINDER REMAINDER)
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIG/KERN function}@c
@functionsubindex{make-lig/kern}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {make-ligature} COMPOSITE DELETE-BEFORE DELETE-AFTER PASS-OVER
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MAKE-LIGATURE function}@c
@functionsubindex{make-ligature}@c
Make a new LIGATURE instance@comma{} and return it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@deffn {Function} {mid} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶MID function}@c
@functionsubindex{mid}@c
@deffnx {Function} {(setf mid)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MID❩ function}@c
@functionsubindex{(setf mid)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {next} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NEXT function}@c
@functionsubindex{next}@c
@deffnx {Function} {(setf next)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT❩ function}@c
@functionsubindex{(setf next)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {next-char} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHAR function}@c
@functionsubindex{next-char}@c
@deffnx {Function} {(setf next-char)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHAR❩ function}@c
@functionsubindex{(setf next-char)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {op} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶OP function}@c
@functionsubindex{op}@c
@deffnx {Function} {(setf op)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF OP❩ function}@c
@functionsubindex{(setf op)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {parse-character-information} NC NW NH ND NI NL NK NE FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-CHARACTER-INFORMATION function}@c
@functionsubindex{parse-character-information}@c
Parse the 8 character information tables from *STREAM* into FONT.@*
NC (EC - BC + 1)@comma{} NW@comma{} NH@comma{} ND@comma{} NI@comma{} NL@comma{} NK@comma{} and NE are the declared lengths of
the 8 tables@comma{} that is@comma{} the char infos@comma{} widths@comma{} heights@comma{} depths@comma{} italic
corrections@comma{} lig/kern instructions@comma{} kerns@comma{} and extens respectively.@*

If a char info structure with a width index of 0 is not completely zero'ed
out@comma{} signal an INVALID-CHAR-INFO error. This error is immediately restartable
with SET-TO-ZERO.@*

If the first entry in the widths@comma{} heights@comma{} depths@comma{} or italic corrections table
is not 0@comma{} signal an INVALID-TABLE-START error. This error is immediately
restartable with SET-TO-ZERO.@*

If an index into the widths@comma{} heights@comma{} depths@comma{} or italic corrections tables is
invalid@comma{} signal an INVALID-TABLE-INDEX error. This error is immediately
restartable with SET-TO-ZERO.@*

If a lig/kern program is found for a boundary character@comma{} but there is no such
character in the font@comma{} signal a NO-BOUNDARY-CHARACTER error. This error is
immediately restartable with ABORT-LIG/KERN-PROGRAM.@*

If an index into the extens table is invalid@comma{} signal an INVALID-TABLE-INDEX
error. This error is immediately restartable with DISCARD-EXTENSION-RECIPE.

If a cycle is found in a list of characters of ascending size@comma{} signal a
CHARACTER-LIST-CYCLE error. This error is immediately restartable with
DISCARD-NEXT-CHARACTER.@*

If a ligature is found to be cyclic@comma{} signal a LIGATURE-CYCLE error. This error
is immediately restartable with DISCARD-LIGATURE.@*

Finally@comma{} if an invalid character code is encountered@comma{} signal an
INVALID-CHARACTER-CODE error. Depending on the context@comma{} this error is
immediately restartable with DISCARD-NEXT-CHARACTER@comma{} or
DISCARD-EXTENSION-RECIPE.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {parse-header} LENGTH FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-HEADER function}@c
@functionsubindex{parse-header}@c
Parse a header of LENGTH words from *STREAM* into FONT.@*
If FONT's design size is less than 1pt@comma{} signal an INVALID-DESIGN-SIZE error.
This error is immediately restartable with SET-TO-TEN.@*
However@comma{} if FONT's design size was explicitly overridden@comma{} only signal an
INVALID-ORIGINAL-DESIGN-SIZE warning.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-fix-word} &optional LIMIT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶READ-FIX-WORD function}@c
@functionsubindex{read-fix-word}@c
Read a fix word from *STREAM* and return it.@*
If LIMIT (the default)@comma{} check that the number lies within ]-16@comma{}+16[@comma{} or
signal a FIX-WORD-OVERFLOW error. This error is immediately restartable with
SET-TO-ZERO.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-padded-string} PADDING &aux LENGTH STRING
@anchor{go to the NET․DIDIERVERNA․TFM∶∶READ-PADDED-STRING function}@c
@functionsubindex{read-padded-string}@c
Read a BCPL string out of PADDING bytes from *STREAM*.@*
The first byte in *STREAM* indicates the actual length of the string.
The remaining bytes are ignored.@*

If the declared string length is too large@comma{} signal an INVALID-STRING-LENGTH
error. This error is immediately restartable with READ-MAXIMUM-LENGTH or
DISCARD-STRING.@*

If the string is not in BCPL format (it contains parentheses or non plain
ASCII characters@comma{} signal an INVALID-BCPL-STRING error. This error is
immediately restartable with KEEP-STRING@comma{} FIX-STRING (replacing parentheses
with slashes@comma{} and non plain ASCII characters with question marks)@comma{} or
DISCARD-STRING.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-u16} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶READ-U16 function}@c
@functionsubindex{read-u16}@c
Read an unsigned 16 bits Big Endian integer from *STREAM* and return it.
If >= 2^15@comma{} signal a U16-OVERFLOW error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {read-u32} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶READ-U32 function}@c
@functionsubindex{read-u32}@c
Read an unsigned 32 bits Big Endian integer from *STREAM*.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {release-status-number} RELEASE-STATUS
@anchor{go to the NET․DIDIERVERNA․TFM․SETUP∶∶RELEASE-STATUS-NUMBER function}@c
@functionsubindex{release-status-number}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM․SETUP package, , @t{net.didierverna.tfm.setup}}
@item Source
@ref{go to the net․didierverna․tfm․setup/setup․lisp file, , @t{setup.lisp}} (file)
@end table
@end deffn
@deffn {Function} {remainder} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REMAINDER function}@c
@functionsubindex{remainder}@c
@deffnx {Function} {(setf remainder)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REMAINDER❩ function}@c
@functionsubindex{(setf remainder)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {rep} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REP function}@c
@functionsubindex{rep}@c
@deffnx {Function} {(setf rep)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REP❩ function}@c
@functionsubindex{(setf rep)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {report} STREAM FORMAT-STRING &rest FORMAT-ARGUMENTS
@anchor{go to the NET․DIDIERVERNA․TFM∶∶REPORT function}@c
@functionsubindex{report}@c
Like FORMAT@comma{} but if *STREAM* is bound@comma{} report that we're reading from it.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/util․lisp file, , @t{util.lisp}} (file)
@end table
@end deffn
@deffn {Function} {run-ligature/kerning-program} CHARACTER INDEX LIG/KERNS KERNS &aux LIG/KERN
@anchor{go to the NET․DIDIERVERNA․TFM∶∶RUN-LIGATURE/KERNING-PROGRAM function}@c
@functionsubindex{run-ligature/kerning-program}@c
Find the real start of a ligature/kerning program and run it.@*
See %run-ligature/kerning-program for more information.@*

If INDEX is invalid@comma{} signal an INVALID-TABLE-INDEX error. This error is
immediately restartable with ABORT-LIG/KERN-PROGRAM.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {skip} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SKIP function}@c
@functionsubindex{skip}@c
@deffnx {Function} {(setf skip)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SKIP❩ function}@c
@functionsubindex{(setf skip)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {table-aref} NAME TABLE INDEX
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TABLE-AREF function}@c
@functionsubindex{table-aref}@c
Access NAMEd TABLE at INDEX.@*
If INDEX is out of bounds@comma{} signal an INVALID-TABLE-INDEX error.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@end table
@end deffn
@deffn {Function} {tilde-reader} STREAM CHAR
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TILDE-READER function}@c
@functionsubindex{tilde-reader}@c
Read a series of ~"string" to be concatenated together.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/meta․lisp file, , @t{meta.lisp}} (file)
@end table
@end deffn
@deffn {Function} {top} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TOP function}@c
@functionsubindex{top}@c
@deffnx {Function} {(setf top)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP❩ function}@c
@functionsubindex{(setf top)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn
@deffn {Function} {width-index} INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶WIDTH-INDEX function}@c
@functionsubindex{width-index}@c
@deffnx {Function} {(setf width-index)} VALUE INSTANCE
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH-INDEX❩ function}@c
@functionsubindex{(setf width-index)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@end table
@end deffn

@node Internal generic functions, Internal conditions, Internal functions, Internal definitions
@subsection Generic functions
@deffn {Generic Function} {extension-recipe} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE generic function}@c
@genericsubindex{extension-recipe}@c
@deffnx {Generic Function} {(setf extension-recipe)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ generic function}@c
@genericsubindex{(setf extension-recipe)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {extension-recipe} (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{extension-recipe}@c
@deffnx {Method} {(setf extension-recipe)} NEW-VALUE (CHARACTER-METRICS @t{character-metrics})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTENSION-RECIPE❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶CHARACTER-METRICS method}@c
@methodsubindex{(setf extension-recipe)}@c
The character's extension recipe@comma{} or NIL.@*
This slot is non-null only if this character is extensible (see TeX: the
Program [544]). It is mutually exclusive with the NEXT-CHARACTER slot@comma{} and
also with the existence of a ligature or kerning program for this character.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {kernings} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS generic function}@c
@genericsubindex{kernings}@c
@deffnx {Generic Function} {(setf kernings)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ generic function}@c
@genericsubindex{(setf kernings)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {kernings} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶KERNINGS NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{kernings}@c
@deffnx {Method} {(setf kernings)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF KERNINGS❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf kernings)}@c
The font's kernings.@*
This is a hash table associating conses of characters with the corresponding
kerning. They are expressed in design size units@comma{} or in TeX point units if
the font is frozen.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {ligatures} OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES generic function}@c
@genericsubindex{ligatures}@c
@deffnx {Generic Function} {(setf ligatures)} NEW-VALUE OBJECT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ generic function}@c
@genericsubindex{(setf ligatures)}@c
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Methods
@deffn {Method} {ligatures} (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIGATURES NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{ligatures}@c
@deffnx {Method} {(setf ligatures)} NEW-VALUE (FONT @t{font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIGATURES❩ COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶FONT method}@c
@methodsubindex{(setf ligatures)}@c
The font's ligatures.@*
This is a hash table associating conses of characters with the corresponding
ligature.
@table @strong
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@end table
@end deffn
@end table
@end deffn
@deffn {Generic Function} {parse-parameters} LENGTH FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS generic function}@c
@genericsubindex{parse-parameters}@c
Parse a parameters section of LENGTH words from *STREAM* into FONT.
Return remaining LENGTH.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Methods
@deffn {Method} {parse-parameters} LENGTH FONT
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T method}@c
@methodsubindex{parse-parameters}@c
Parse the 7 regular FONT parameters. Return remaining LENGTH.
@end deffn
@deffn {Method} {parse-parameters} LENGTH (FONT @t{math-symbols-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT method}@c
@methodsubindex{parse-parameters}@c
Parse the 15 additional TeX math symbols FONT parameters.
@end deffn
@deffn {Method} {parse-parameters} LENGTH (FONT @t{math-extension-font})
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT method}@c
@methodsubindex{parse-parameters}@c
Parse the 6 additional TeX math extension FONT parameters.
@end deffn
@deffn {Method} {parse-parameters} LENGTH FONT @t{around}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶PARSE-PARAMETERS COMMON-LISP∶∶T COMMON-LISP∶∶T AROUND method}@c
@methodsubindex{parse-parameters}@c
Read remaining parameters into a parameters array.
@end deffn
@end table
@end deffn
@deffn {Generic Function} {scale} FONT FACTOR
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SCALE generic function}@c
@genericsubindex{scale}@c
Scale all FONT dimensions by FACTOR.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Methods
@deffn {Method} {scale} (FONT @t{math-extension-font}) FACTOR @t{around}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-EXTENSION-FONT COMMON-LISP∶∶T AROUND method}@c
@methodsubindex{scale}@c
Scaling method for MATH-EXTENSION-FONTs.
@end deffn
@deffn {Method} {scale} (FONT @t{math-symbols-font}) FACTOR @t{around}
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SCALE NET․DIDIERVERNA․TFM∶∶MATH-SYMBOLS-FONT COMMON-LISP∶∶T AROUND method}@c
@methodsubindex{scale}@c
Scaling method for MATH-SYMBOL-FONTs.
@end deffn
@deffn {Method} {scale} FONT FACTOR
@anchor{go to the NET․DIDIERVERNA․TFM∶∶SCALE COMMON-LISP∶∶T COMMON-LISP∶∶T method}@c
@methodsubindex{scale}@c
Scaling method for regular FONTs.
@end deffn
@end table
@end deffn

@node Internal conditions, Internal structures, Internal generic functions, Internal definitions
@subsection Conditions
@deftp {Condition} {anonymous-font} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶ANONYMOUS-FONT condition}@c
@conditionsubindex{anonymous-font}@c
The Anonymous Font usage error.@*
It signals an attempt at creating a font with no name.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/font․lisp file, , @t{font.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-USAGE-ERROR condition, , @t{tfm-usage-error}} (condition)
@end table
@end deftp
@deftp {Condition} {file-size-mixin} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN condition}@c
@conditionsubindex{file-size-mixin}@c
The File Size Mixin condition.@*
It is used in both errors and warnings to report different declared and
actual file sizes.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@t{condition} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-UNDERFLOW condition, , @t{file-underflow}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶FILE-OVERFLOW condition, , @t{file-overflow}} (condition)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{actual-size} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{actual-size}} (method)
@item
@t{declared-size} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE NET․DIDIERVERNA․TFM∶∶FILE-SIZE-MIXIN method, , @t{declared-size}} (method)
@end itemize
@item Direct slots
@defvr {Slot} declared-size
@slotsubindex{declared-size}@c
The declared file size.
@table @strong
@item Initargs
@t{:declared-size}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DECLARED-SIZE generic function, , @t{declared-size}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DECLARED-SIZE❩ generic function, , @t{(setf declared-size)}} (generic function)
@end table
@end defvr
@defvr {Slot} actual-size
@slotsubindex{actual-size}@c
The actual file size.
@table @strong
@item Initargs
@t{:actual-size}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ACTUAL-SIZE generic function, , @t{actual-size}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ACTUAL-SIZE❩ generic function, , @t{(setf actual-size)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {invalid-original-design-size} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE condition}@c
@conditionsubindex{invalid-original-design-size}@c
The Invalid Original Design Size compliance warning.@*
It signals that@comma{} although overridden explicitly@comma{} an original design size was
too small (< 1pt).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-WARNING condition, , @t{tfm-compliance-warning}} (condition)
@item Direct methods
@itemize @bullet
@item
@t{value} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE NET․DIDIERVERNA․TFM∶∶INVALID-ORIGINAL-DESIGN-SIZE method, , @t{value}} (method)
@end itemize
@item Direct slots
@defvr {Slot} value
@slotsubindex{value}@c
The invalid original design size.
@table @strong
@item Initargs
@t{:value}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶VALUE generic function, , @t{value}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF VALUE❩ generic function, , @t{(setf value)}} (generic function)
@end table
@end defvr
@end table
@end deftp
@deftp {Condition} {tfm-table-error} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR condition}@c
@conditionsubindex{tfm-table-error}@c
The TFM table errors root condition.@*
This is the root condition for errors related to TFM tables.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/file․lisp file, , @t{file.lisp}} (file)
@item Direct superclasses
@ref{go to the NET․DIDIERVERNA․TFM∶∶TFM-COMPLIANCE-ERROR condition, , @t{tfm-compliance-error}} (condition)
@item Direct subclasses
@itemize @bullet
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-INDEX condition, , @t{invalid-table-index}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-START condition, , @t{invalid-table-start}} (condition)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶INVALID-TABLE-LENGTH condition, , @t{invalid-table-length}} (condition)
@end itemize
@item Direct methods
@itemize @bullet
@item
@t{name} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME NET․DIDIERVERNA․TFM∶∶TFM-TABLE-ERROR method, , @t{name}} (method)
@end itemize
@item Direct slots
@defvr {Slot} name
@slotsubindex{name}@c
The table's name.
@table @strong
@item Initargs
@t{:name}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NAME generic function, , @t{name}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NAME❩ generic function, , @t{(setf name)}} (generic function)
@end table
@end defvr
@end table
@end deftp

@node Internal structures, Internal classes, Internal conditions, Internal definitions
@subsection Structures
@deftp {Structure} {char-info} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶CHAR-INFO structure}@c
@structuresubindex{char-info}@c
The Char Info structure.@*
This structure is used to store decoded information from the char-info table
(see TeX: the Program [543]). Only one of LIG/KERN-INDEX@comma{} NEXT-CHAR@comma{} and
  EXTEN-INDEX may be non-null at a time (see TeX: the Program [544]).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct slots
@defvr {Slot} width-index
@slotsubindex{width-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶WIDTH-INDEX function, , @t{width-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF WIDTH-INDEX❩ function, , @t{(setf width-index)}} (function)
@end table
@end defvr
@defvr {Slot} height-index
@slotsubindex{height-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶HEIGHT-INDEX function, , @t{height-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF HEIGHT-INDEX❩ function, , @t{(setf height-index)}} (function)
@end table
@end defvr
@defvr {Slot} depth-index
@slotsubindex{depth-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶DEPTH-INDEX function, , @t{depth-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF DEPTH-INDEX❩ function, , @t{(setf depth-index)}} (function)
@end table
@end defvr
@defvr {Slot} italic-index
@slotsubindex{italic-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶ITALIC-INDEX function, , @t{italic-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF ITALIC-INDEX❩ function, , @t{(setf italic-index)}} (function)
@end table
@end defvr
@defvr {Slot} lig/kern-index
@slotsubindex{lig/kern-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN-INDEX function, , @t{lig/kern-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF LIG/KERN-INDEX❩ function, , @t{(setf lig/kern-index)}} (function)
@end table
@end defvr
@defvr {Slot} next-char
@slotsubindex{next-char}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT-CHAR function, , @t{next-char}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT-CHAR❩ function, , @t{(setf next-char)}} (function)
@end table
@end defvr
@defvr {Slot} exten-index
@slotsubindex{exten-index}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶EXTEN-INDEX function, , @t{exten-index}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF EXTEN-INDEX❩ function, , @t{(setf exten-index)}} (function)
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {exten} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTEN structure}@c
@structuresubindex{exten}@c
The Exten structure.@*
This structure is used to store decoded information from the exten table
(see TeX: the Program [546]).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct slots
@defvr {Slot} top
@slotsubindex{top}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP function, , @t{top}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP❩ function, , @t{(setf top)}} (function)
@end table
@end defvr
@defvr {Slot} mid
@slotsubindex{mid}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶MID function, , @t{mid}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MID❩ function, , @t{(setf mid)}} (function)
@end table
@end defvr
@defvr {Slot} bot
@slotsubindex{bot}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOT function, , @t{bot}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOT❩ function, , @t{(setf bot)}} (function)
@end table
@end defvr
@defvr {Slot} rep
@slotsubindex{rep}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶REP function, , @t{rep}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REP❩ function, , @t{(setf rep)}} (function)
@end table
@end defvr
@end table
@end deftp
@deftp {Structure} {lig/kern} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶LIG/KERN structure}@c
@structuresubindex{lig/kern}@c
The Lig/Kern structure.@*
This structure is used to store decoded information from the lig/kern table
(see TeX: the Program [545]).
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/intermediate․lisp file, , @t{intermediate.lisp}} (file)
@item Direct superclasses
@t{structure-object} (structure)
@item Direct slots
@defvr {Slot} skip
@slotsubindex{skip}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶SKIP function, , @t{skip}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF SKIP❩ function, , @t{(setf skip)}} (function)
@end table
@end defvr
@defvr {Slot} next
@slotsubindex{next}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶NEXT function, , @t{next}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF NEXT❩ function, , @t{(setf next)}} (function)
@end table
@end defvr
@defvr {Slot} op
@slotsubindex{op}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶OP function, , @t{op}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF OP❩ function, , @t{(setf op)}} (function)
@end table
@end defvr
@defvr {Slot} remainder
@slotsubindex{remainder}@c
@table @strong
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶REMAINDER function, , @t{remainder}} (function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REMAINDER❩ function, , @t{(setf remainder)}} (function)
@end table
@end defvr
@end table
@end deftp

@node Internal classes, , Internal structures, Internal definitions
@subsection Classes
@deftp {Class} {extension-recipe} ()
@anchor{go to the NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE class}@c
@classsubindex{extension-recipe}@c
The Extension Recipe class.@*
This class represents decoded information for extensible characters. Within
the context of this library@comma{} the expression "extension recipe" denotes an
instance of this class.
@table @strong
@item Package
@ref{go to the NET․DIDIERVERNA․TFM package, , @t{net.didierverna.tfm}}
@item Source
@ref{go to the net․didierverna․tfm․core/src/character․lisp file, , @t{character.lisp}} (file)
@item Direct superclasses
@t{standard-object} (class)
@item Direct methods
@itemize @bullet
@item
@t{print-object} (method)
@item
@t{repeated-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{repeated-character}} (method)
@item
@t{bottom-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{bottom-character}} (method)
@item
@t{middle-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{middle-character}} (method)
@item
@t{top-character} (method)
@item
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER NET․DIDIERVERNA․TFM∶∶EXTENSION-RECIPE method, , @t{top-character}} (method)
@end itemize
@item Direct slots
@defvr {Slot} top-character
@slotsubindex{top-character}@c
The recipe's top character@comma{} or NIL.
@table @strong
@item Initargs
@t{:top-character}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶TOP-CHARACTER generic function, , @t{top-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF TOP-CHARACTER❩ generic function, , @t{(setf top-character)}} (generic function)
@end table
@end defvr
@defvr {Slot} middle-character
@slotsubindex{middle-character}@c
The recipe's middle character@comma{} or NIL.
@table @strong
@item Initargs
@t{:middle-character}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶MIDDLE-CHARACTER generic function, , @t{middle-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF MIDDLE-CHARACTER❩ generic function, , @t{(setf middle-character)}} (generic function)
@end table
@end defvr
@defvr {Slot} bottom-character
@slotsubindex{bottom-character}@c
The recipe's bottom character@comma{} or NIL.
@table @strong
@item Initargs
@t{:bottom-character}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶BOTTOM-CHARACTER generic function, , @t{bottom-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF BOTTOM-CHARACTER❩ generic function, , @t{(setf bottom-character)}} (generic function)
@end table
@end defvr
@defvr {Slot} repeated-character
@slotsubindex{repeated-character}@c
The recipe's repeated character.
@table @strong
@item Initargs
@t{:repeated-character}
@item Readers
@ref{go to the NET․DIDIERVERNA․TFM∶∶REPEATED-CHARACTER generic function, , @t{repeated-character}} (generic function)
@item Writers
@ref{go to the NET․DIDIERVERNA․TFM∶∶❨SETF REPEATED-CHARACTER❩ generic function, , @t{(setf repeated-character)}} (generic function)
@end table
@end defvr
@end table
@end deftp



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, , Definitions, Top
@appendix Indexes
@menu
* Concept index::
* Function index::
* Variable index::
* Data type index::
@end menu


@c -------------
@c Concept index
@c -------------
@node Concept index, Function index, Indexes, Indexes
@appendixsec Concepts
@printindex cp

@page


@c --------------
@c Function index
@c --------------
@node Function index, Variable index, Concept index, Indexes
@appendixsec Functions
@printindex fn

@page


@c --------------
@c Variable index
@c --------------
@node Variable index, Data type index, Function index, Indexes
@appendixsec Variables
@printindex vr

@page


@c ---------------
@c Data type index
@c ---------------
@node Data type index, , Variable index, Indexes
@appendixsec Data types
@printindex tp

@bye

@c reference.texi ends here
