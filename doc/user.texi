\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2019 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of TFM.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename tfm-user.info
@settitle The TFM User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.0 beta 1 "Artificial Uncial"
@set COPYRIGHT_DATE 2018, 2019
@setchapternewpage odd
@documentdescription
The TFM User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro tfm
@sc{Tfm}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro nil
@code{nil}
@end macro

@macro kwd{name}
@code{:\name\}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------

@c #### FIXME: everything defined with @defstuff is indexed
@c automatically, so I canno't change the way indexing is done. The only
@c solution would be to /not/ typeset any of the standard indexes, and
@c provide my own.

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@vindex net.didierverna.declt.configuration
@cindex Configuration option, @t{:\name\}
@cindex @t{:\name\}
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro

@c Class accessors
@macro clsaindex{cls,name}
@findex \name\@r{ (}\cls\ @r{accessor)}
@findex \cls\@r{, accessor, }\name\
@end macro

@c Reader functions subindex
@macro rfsubindex{func}
@findex @r{Reader, }\func\
@end macro

@c Reader functions
@macro rfindex{func}
@findex \func\
@rfsubindex{\func\}
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex \var\@r{ (constant)}
@vindex @r{Constant, }\var\
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex \var\@r{ (parameter)}
@vindex @r{Parameter, }\var\
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\@r{ (package)}
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\@r{ (system)}
@tpindex @r{System, }\name\
@end macro

@c Classes
@macro clsindex{cls}
@tpindex \cls\@r{ (class)}
@tpindex @r{Class, }\cls\
@end macro

@c Conditions
@macro condindex{cond}
@tpindex \cond\@r{ (condition)}
@tpindex @r{Condition, }\cond\
@end macro

@c Warning subindex
@macro warnsubindex{cond}
@tpindex @r{Warning, }\cond\
@end macro

@c Error subindex
@macro errsubindex{cond}
@tpindex @r{Error, }\cond\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* TFM User: (tfm-user).             The TFM User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_DATE} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The TFM User Manual
@subtitle @TeX{} Font Metrics, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The TFM User Manual

This is the @tfm{} User Manual for @tfm{} version @value{VERSION}.

@menu
* Copying::                     The BSD license
* Introduction::                TFM at a glance
* Installation::                Library and documentation
* Usage::                       All the details
* Other Considerations::
* Conclusion::                  That's all folks
* Supported Platforms::
* Indexes::                     Concepts, functions, variables and data types
* Acknowledgments::             Hall of Pride
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction
TFM (for @TeX{} Font Metrics) is the standard font description format
used by @TeX{}. The @tfm{} library parses and decodes TFM files into an
abstract data structure, providing easy access to the corresponding font
information in Common Lisp.

This is the @tfm{} User Manual. @tfm{} also has a
@ifinfo
@ref{Top, , Reference Manual, tfm-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo



@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Usage, Introduction, Top
@chapter Installation
@xref{Supported Platforms}, for information on portability or
requirements. See @tfm{}'s
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#tfm,,homepage}
for tarballs, Git repository and online documentation. @tfm{} is also
available via @uref{http://www.quicklisp.org,,Quicklisp}.

In order to install and load the bare Lisp library, unpack it somewhere
in the ASDF 3 source registry and type this at the REPL:
@sysindex{net.didierverna.tfm}
@verbatim
(asdf:load-system :net.didierverna.tfm)
@end verbatim

In addition to the bare Lisp library, the @tfm{} distribution offers
documentation in the form of 2 different manuals: the User Manual (you
are reading it) and the
@ifinfo
@ref{Top, , Reference Manual, tfm-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo
If you want to compile the manuals by yourself, please follow the
instructions below.
@enumerate
@item
Edit @file{make/config.make} to your specific needs.
@item
Switch to the @code{doc/} subdirectory and type @command{make}. By
default, the documentation is built in info, PDF and HTML formats. If
you want other formats (DVI and PostScript are available), type
@command{make all-formats}. You can also type individually @command{make
dvi} and/or @command{make ps} in order to get the corresponding format.
@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and PostScript format, those will be
installed as well.
@end enumerate
Note that if
@uref{http://www.lrde.epita.fr/~didier/software/lisp/misc.php#declt,,Declt}
is not installed on your system, the reference manual won't be generated.

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Usage
@c ====================================================================
@node Usage, Other Considerations, Installation, Top
@chapter Usage
@pkgindex{net.didierverna.tfm}
@tfm{} itself resides in a package called @t{net.didierverna.tfm}. You
can automatically nickname this package with the following function.
@cindex Package, nicknames
@defun nickname-package [NICKNAME]
Add @var{NICKNAME} (@code{:tfm} by default) to the
@code{:net.didierverna.tfm} package.
@end defun

@menu
* TFM Files::                   Loading a font
* Font Information::            Global properties
* Character Information::       Code, box dimensions, etc.
* Ligatures and Kernings::      For pairs of characters
@end menu

@node TFM Files, Font Information, Usage, Usage
@section TFM Files
The main entry point to @tfm{} is @code{load-font}, the function which
allows you to load a @code{tfm} file in memory.
@defun load-font FILE
Load @var{FILE} into a new font, and return it.
@end defun

@var{FILE} must be a pathname designator. Currently, @tfm{} doesn't
support searching for TFM files in common or standard places (such as
@TeX{}Live installations), so you need to know where those files are
located, and provide a specific pathname.

@cindex TFM
@cindex Format, TFM
@cindex OFM
@cindex Format, OFM
@cindex JFM
@cindex Format, JFM
Some @code{tfm} files actually contain OFM or JFM data rather than just
plain TFM. @tfm{} is able to detect those extensions, but doesn't
currently support them. If OFM or JFM contents is detected,
@code{load-font} signals an @code{extended-tfm} warning, and returns
@nil{}.

@deftp {Warning} extended-tfm
@warnsubindex{extended-tfm}@c
Accessors:
@itemize
@item
@clsaindex{extended-tfm,file}@c
@code{file}: the extended TFM data (a pathname designator).
@item
@clsaindex{extended-tfm,value}@c
@code{value}: currently either @code{"OFM"} or @code{"JFM"}.
@end itemize
@end deftp

@cindex Font
@c #### FIXME: point to the future section on TFM compliance.
Otherwise, the return value is an instance of some font class. In the
context of this library, the term ``font'' denotes such an instance.
@clsindex{font}@c
@clsindex{math-symbols-font}@c
@clsindex{math-extension-font}@c
There are currently three different font classes. The most general and
frequent one is simply called @code{font}. @TeX{}, however, recognizes
two special font categories for which the corresponding classes are
@code{math-symbols-font}, and @code{math-extension-font}. Both of these
classes are subclasses of @code{font}.


@node Font Information, Character Information, TFM Files, Usage
@section Font Information
General font information decoded from the TFM data can be individually
retrieved via a number of font accessors described below.
@itemize
@item
@clsaindex{font,name}@c
@code{name}: computed by @tfm{} as base name of the file the font was
loaded from (for example @code{"cmr10"}).
@item
@clsaindex{font,file}@c
@code{file}: the argument to @code{load-font}.
@item
@clsaindex{font,checksum}@c
@code{checksum}: part of the TFM format, provided by Metafont.
@item
@cindex @TeX{} point unit
@cindex Unit, @TeX{} point
@cindex Design size unit
@cindex Unit, design size
@clsaindex{font,design-size}@c
@code{design-size}: in units of @TeX{} point. For example, the design
size of @t{cmr10} (the Computer Modern 10pt font) is 10. Apart from the
@emph{slant} (see below), all other dimensions are given in design size
units (not @TeX{} point units!).
@end itemize

@tfm{} is able to decode Xerox PARC headers when provided (see @TeX{}
Font Metric Files, @i{David Fuchs, TUGboat Volume 2, n.1, pages 12--16}
and PLtoPF[9,10]). The following information is extracted from them, and
defaults to @nil{} otherwise. Note that when a header of sufficient
length is available, it is in fact impossible to tell for sure whether
it is a Xerox PARC one or not. @tfm{} simply assumes it is. As no other
kind of header has been encountered yet (and the whole @TeX{} Live
distribution has been tested), it is a pretty safe assumption. Finally,
if a header size is greater than that of a Xerox PARC one, @tfm{}
discards what's left of it.
@itemize
@item
@clsaindex{font,encoding}@c
@code{encoding}: the font's character coding scheme if known (an
informal BCPL string, that is, plain ASCII and no parentheses). The
class @tfm{} instantiates when loading a font depends on this string
(@pxref{TFM Files}), and in particular, on the specific values
@code{"TeX math symbols"} and @code{"TeX math extension"}.
@item
@clsaindex{font,family}@c
@code{family}: another BCPL string, if known (for example @code{"CMR"}).
@item
@clsaindex{font,7bits-safe}@c
@code{7bits-safe} 0 or 1 if known. When 1, it means that no character of
code lesser than 128 can lead to a character of code greater than 128 by
ways of ligatures or extensible recipes.
@item
@clsaindex{font,face-number}@c
@code{face-number} a number identifying the font, if known.
@item
@clsaindex{font,weight}@c
@clsaindex{font,slope}@c
@clsaindex{font,expansion}@c
@clsaindex{font,face-code}@c
@code{weight}, @code{slope}, @code{expansion}, and @code{face-code}:
decoded from, and filled in when @code{face-number} is lesser than 18
(see also TFtoPL[10]). The weight is @kwd{medium}, @kwd{bold}, or
@kwd{light}. The slope is @kwd{roman} or @kwd{italic}. The expansion is
@kwd{regular}, @kwd{condensed}, or @kwd{extended}. Finally, the face
code is the concatenation of the upcased first letters of these values.
For example, @code{"MRR"} stands for ``medium roman regular''.
@end itemize

A font also contains a number of properties extracted from the so-called
``parameters'' section. They all default to 0.
@itemize @bullet
@item
@clsaindex{font,slant}@c
@code{slant}: a scalar ratio (not in design size units; that's the only
exception).
@item
@clsaindex{font,interword-space}@c
@clsaindex{font,interword-stretch}@c
@clsaindex{font,interword-shrink}@c
@code{interword-space}, @code{interword-stretch}, and
@code{interword-shrink}: the font's normal interword ``glue'' as three
separate values.
@item
@clsaindex{font,ex}@c
@clsaindex{font,em}@c
@code{em} and @code{ex}: @TeX{}'s usual font-dependent units.
@item
@clsaindex{font,extra-space}@c
@code{extra-space}: the font's additional space to put at the end of
sentences.
@end itemize

@TeX{} math symbols and extension fonts have respectively 15 and 6
additionnal parameters which are also accessible.
@itemize
@item
@clsindex{math-symbols-font}@c
@clsaindex{math-symbols-font,num1}@c
@clsaindex{math-symbols-font,num2}@c
@clsaindex{math-symbols-font,num3}@c
@clsaindex{math-symbols-font,denom1}@c
@clsaindex{math-symbols-font,denom2}@c
@clsaindex{math-symbols-font,sup1}@c
@clsaindex{math-symbols-font,sup2}@c
@clsaindex{math-symbols-font,sup3}@c
@clsaindex{math-symbols-font,sub1}@c
@clsaindex{math-symbols-font,sub2}@c
@clsaindex{math-symbols-font,subdrop}@c
@clsaindex{math-symbols-font,supdrop}@c
@clsaindex{math-symbols-font,delim1}@c
@clsaindex{math-symbols-font,delim2}@c
@clsaindex{math-symbols-font,axis-height}@c
@code{num1..3}, @code{denom1..2}, @code{sup1..3}, @code{sub1..2},
@code{subdrop}, @code{supdrop}, @code{delim1..2}, and @code{axis-height}
are available in the @code{math-symbols-font} subclass.
@item
@clsindex{math-extension-font}@c
@clsaindex{math-extension-font,default-rule-thickness}@c
@clsaindex{math-extension-font,big-op-spacing1}@c
@clsaindex{math-extension-font,big-op-spacing2}@c
@clsaindex{math-extension-font,big-op-spacing3}@c
@clsaindex{math-extension-font,big-op-spacing4}@c
@clsaindex{math-extension-font,big-op-spacing5}@c
@code{default-rule-thickness} and @code{big-op-spacing1..5} are
available in the @code{math-extension-font} subclass.
@end itemize

@clsaindex{font,parameters}@c
Finally, if the font has any parameters left, they are collected in an
array of numeric values, accessible via the @code{parameters} function.


@node Character Information, Ligatures and Kernings, Font Information, Usage
@section Character Information
@cindex Character code
A TFM font contains at most 256 characters, represented by numerical
codes (called @emph{character codes}). Some general information about
the font's characters is available through the following accessors.
@itemize
@item
@clsaindex{font,min-code}@c
@clsaindex{font,max-code}@c
@code{min-code} and @code{max-code}: respectively the smallest and
greatest character codes for this font.
@item
@clsaindex{font,character-count}@c
@code{character-count}: the number of characters defined in this font.
Note that some characters between @code{min-code} and @code{max-code}
may not be defined, so the character count may be smaller than
@emph{max-code - min-code + 1}. Also, the character count doesn't
include a potential boundary character (see below), unless it exists for
real in the font (it has non-zero metrics).
@item
@clsaindex{font,boundary-character}@c
@code{boundary-character}: the font's boundary character if defined, or
@nil{}. The boundary character is the only character the code of which
is allowed to be outside the @emph{[min-code,max-code]} range. If this
character doesn't exist for real in the font, it has zero metrics and is
not included in the character count.
@end itemize

The characters in a font are individually accessible by their code,
thanks to the following function (when this function returns @nil{}, it
means that no character is defined for the code in question).
@defun get-character CODE FONT
Return @var{FONT}'s @var{CODE} character, or @nil{}.
@end defun

@cindex Character
@clsindex{character-metrics}@c
This function actually returns an instance of a class called
@code{character-metrics}, which contains character-specific data. In the
context of this library, the term ``character'' denotes an instance of
this class. The following accessors return the different character
properties available.
@itemize
@item
@clsaindex{character-metrics,code}@c
@findex get-character
@code{code}: the character @code{code} which makes it accessible from
the font instance (see the function @code{get-character}).
@item
@clsaindex{character-metrics,font}@c
@code{font}: the font the character belongs to.
@item
@clsaindex{character-metrics,width}@c
@clsaindex{character-metrics,height}@c
@clsaindex{character-metrics,depth}@c
@code{width}, @code{height}, and @code{depth}: the character box
dimensions, in design size units.
@item
@clsaindex{character-metrics,italic-correction}@c
@code{italic-correction}: the character's italic correction, in design
size units. @TeX{} uses this value for regular characters followed by
the command @code{\/}, and also in math mode for superscript placement.
@item
@cindex Character list
@clsaindex{character-metrics,next-character}@c
@code{next-character}: the next character in a character list, or
@nil{}. If non-@nil{}, this character is part of a chain of characters
of ascending size, and not the last one (see @TeX{}: the Program [544]).
It is mutually exclusive with the exsitence of an extension recipe (see
below), and also with the existence of a ligature or kerning program for
this character (@pxref{Ligatures and Kernings}).
@end itemize

@cindex Extensible character
@cindex Character, extensible
Some characters are said to be ``extensible'' (meaning that they are
constructed out of up to four components, themselves characters). To
test whether a character is extensible, use the following function.
@defun extensiblep CHARACTER
Return @code{T} if @var{CHARACTER} has an extension recipe.
@end defun
@clsaindex{character-metrics,top-character}@c
@clsaindex{character-metrics,middle-character}@c
@clsaindex{character-metrics,bottom-character}@c
@clsaindex{character-metrics,repeated-character}@c
When a character is extensible, the four components of the extensible
recipe may be retrieved with the @code{top-}, @code{middle-},
@code{bottom-}, and @code{repeated-character} accessors. These functions
return a character, or @nil{} if the corresponding component isn't used
in the recipe. Note however that a repeated character always exists in
an extension recipe (so only the top, middle, and bottom characters may
be @nil{}).


@node Ligatures and Kernings,  , Character Information, Usage
@section Ligatures and Kernings
The TFM format encodes so called ``ligature / kerning programs'',
allowing font designers to specify particular spacing between
characters, or character replacements. Ligatures and kernings depend on
@emph{pairs} of characters (and a pair of characters cannot have both
kerning and ligature specifications). @tfm{} decodes this information
and stores it in a more accessible fashion.

@menu
* Kernings::                    Specific spacing
* Ligatures::                   Composite characters
@end menu

@node Kernings, Ligatures, Ligatures and Kernings, Ligatures and Kernings
@subsection Kernings
@cindex Kerning
In order to get kerning information for some pair of characters in a
font, use the following function.

@defun kerning CHARACTER1 CHARACTER2
Return kerning for @var{CHARACTER1} and @var{CHARACTER2}, or @nil{}.@*
Both characters must belong to the same font.
@end defun

The kerning, if it exists, is in design size units. Otherwise, the two
characters may have a ligature, or their boxes should just be put next
to each other.

@node Ligatures,  , Kernings, Ligatures and Kernings
@subsection Ligatures
@cindex Ligature
In order to get ligature information for some pair of characters in a
font, use the following function.

@defun ligature CHARACTER1 CHARACTER2
Return ligature for @var{CHARACTER1} and @var{CHARACTER2}, or @nil{}.@*
Both characters must belong to the same font.
@end defun

@clsindex{ligature}@c
Unless there's no such ligature (meaning that the two characters should
be left alone, possibly with some particular kerning), the value
returned by this function is an instance of a class called
@code{ligature}. In the context of this library, the term ``ligature''
denotes an instance of this class.

A ligature contains four bits of information accessible as described below.
@itemize
@item
@clsaindex{ligature,composite}@c
@code{composite}: the character to insert between the two original ones.
@item
@clsaindex{ligature,delete-before}@c
@clsaindex{ligature,delete-after}@c
@code{delete-before} and @code{delete-after}: whether to delete the
characters before and after the composite.
@item
@clsaindex{ligature,pass-over}@c
@code{pass-over}: the number of characters to skip in order to reach the
next one, once the ligature has been made.
@end itemize



@c ====================================================================
@c Other Considerations
@c ====================================================================
@node Other Considerations, Conclusion, Usage, Top
@chapter Other Considerations
This section contains marginal or meta-information, orthogonal to the
library's main purpose.

@menu
* Configuration::               Preload parameters
* Version Numbering::           In case you need to conditionalize
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Version Numbering, Other Considerations, Other Considerations
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.tfm.setup}@c
@pkgindex{net.didierverna.tfm.setup}@c
Some aspects of @tfm{}'s behavior can be configured @emph{before} the
library system is actually loaded. @tfm{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.tfm.setup} (and the eponym
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.tfm.setup)
(net.didierverna.tfm.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @tfm{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @tfm{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @tfm{} itself. The library provides indentation information for
some of its functions directly embedded in the code. This information
can be automatically transmitted to Emacs when the ASDF system is loaded
if you set this option to @code{t}. However, note that for this to work,
the Slime variable @code{slime-enable-evaluate-in-emacs} must also be
set to @code{t} in your Emacs session. If you're interested to know how
this process works, I have described it a
@uref{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack,,Blog entry}.
@end table


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering,  , Configuration, Other Considerations
@section Version Numbering
As @tfm{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@tfm{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @tfm{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @tfm{} version is characterized by 4 elements as described below.
@itemize
@item
@pvindex{*release-major-level*}
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@pvindex{*release-minor-level*}
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@pvindex{*release-status*}
A release status stored in the parameter @code{*release-status*}. The
status of a release can be @code{:alpha}, @code{:beta}, @code{:rc}
(standing for ``release candidate'') or @code{:patchlevel}. These are in
effect 4 levels of expected stability.
@item
@pvindex{*release-status-level*}
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{*release-name*}
In addition to that, each version of @tfm{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @tfm{}
is ``Uncial Fonts'', from the
@uref{https://www.tug.org/FontCatalogue/uncialfonts.html,,@LaTeX{} Font
Catalogue}.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major * 10000 + minor *
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Artifical Uncial", 2.5 beta 8
"Rotunda", 4.2 release candidate 1 "Romantic Rustic" or 4.3.2 "Square
Capitals". As for the short version, a patchlevel of 0 is ignored in the
output: 1.3 "Artificial Uncial".
@end itemize



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Supported Platforms, Other Considerations, Top
@chapter Conclusion
So that's it I guess. You know all about @tfm{} now. Thanks for reading.
Apart from that, I don't really have a conclusion.



@c ====================================================================
@c Supported Platforms
@c ====================================================================
@node Supported Platforms, Indexes, Conclusion, Top
@appendix Supported Platforms
@tfm{} is an ASDF 3 library. Apart from that, there is nothing special
about portability.



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, Acknowledgments, Supported Platforms, Top
@appendix Indexes

@menu
* Concept Index::               Well, the concept index
* Function Index::              Well, the function index
* Variable Index::              Well, the variable index
* Data Type Index::             Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index,  , Variable Index, Indexes
@section Data Types
@printindex tp



@c ====================================================================
@c Acknowledgments
@c ====================================================================
@node Acknowledgments,  , Indexes, Top
@appendix Acknowledgments
The following people have contributed bug reports or fixes, suggestions,
compiler support or any other kind of help. You have my gratitude!

@emph{No one yet}.
@multitable @columnfractions .99
@end multitable


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c user.texi ends here
