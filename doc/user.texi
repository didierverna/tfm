\input texinfo

@c user.texi --- User manual

@c Copyright (C) 2019, 2020 Didier Verna

@c Author: Didier Verna <didier@didierverna.net>

@c This file is part of TFM.

@c Permission to use, copy, modify, and distribute this software for any
@c purpose with or without fee is hereby granted, provided that the above
@c copyright notice and this permission notice appear in all copies.

@c THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
@c WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
@c MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
@c ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
@c WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
@c ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
@c OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


@c Commentary:



@c ====================================================================
@c Header
@c ====================================================================
@c %**start of header
@setfilename tfm-user.info
@settitle The TFM User Manual
@afourpaper
@documentencoding UTF-8
@c %**end of header



@c ====================================================================
@c Settings
@c ====================================================================
@set VERSION 1.1 patchlevel 1 "Carolingan Miniscules"
@set COPYRIGHT_YEARS 2018--2021, 2024
@setchapternewpage odd
@documentdescription
The TFM User Manual for version @value{VERSION}.
@end documentdescription



@c ====================================================================
@c New Commands
@c ====================================================================

@macro tfm
@sc{Tfm}
@end macro

@macro cl
Common Lisp
@end macro

@macro etc
@i{etc.}
@end macro

@macro eg
@i{e.g.}
@end macro

@macro ie
@i{i.e.}
@end macro

@macro perse
@i{per-se}
@end macro

@macro nil
@code{nil}
@end macro

@macro kwd{name}
@code{:\name\}
@end macro


@c --------------------------------
@c Manuals cross-referencing macros
@c --------------------------------
@c The following 3 macros are here to handle the fact that the info file
@c names are prefixed with "tfm-".

@c #### NOTE: Before 5.2, I could use @ifinfo anywhere. Now, it's only
@c allowed at the beginning of a line, so I cannot effectively use it
@c within a macro (even at the beginning of a line) if the macro in
@c question is to be used in the middle of some text. As a consequence,
@c I need to duplicate the macro definition code below.
@ifinfo
@macro pxrefref{node}
@pxref{\node\, , , tfm-reference, The TFM Reference Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro pxrefref{node}
@pxref{\node\, , , reference, The TFM Reference Manual}
@end macro
@end ifnotinfo

@ifinfo
@macro xrefref{node}
@xref{\node\, , , tfm-reference, The TFM Reference Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro xrefref{node}
@xref{\node\, , , reference, The TFM Reference Manual}
@end macro
@end ifnotinfo

@ifinfo
@macro refref{node}
@ref{\node\, , , tfm-reference, The TFM Reference Manual}
@end macro
@end ifinfo
@ifnotinfo
@macro refref{node}
@ref{\node\, , , reference, The TFM Reference Manual}
@end macro
@end ifnotinfo


@c #### FIXME: everything defined with @defstuff is indexed
@c automatically, so I canno't change the way indexing is done. The only
@c solution would be to /not/ typeset any of the standard indexes, and
@c provide my own.

@c ---------------
@c Indexing macros
@c ---------------

@c Concept index
@c -------------

@c Configuration options
@macro coindex{name}
@vindex net.didierverna.declt.configuration
@cindex Configuration option, @t{:\name\}
@cindex @t{:\name\}
@end macro


@c Functions index
@c ---------------

@c Function options
@macro foindex{func,opt}
@findex \func\@r{, option, }\opt\
@end macro

@c Function keys
@macro fkindex{func,key}
@findex \func\@r{, key, }\key\
@end macro

@c Class accessors
@macro clsaindex{cls,name}
@findex \name\@r{ (}\cls\ @r{accessor)}
@findex \cls\@r{, accessor, }\name\
@end macro

@c Reader functions subindex
@macro rfsubindex{func}
@findex @r{Reader, }\func\
@end macro

@c Reader functions
@macro rfindex{func}
@findex \func\
@rfsubindex{\func\}
@end macro


@c Variables index
@c ---------------

@c Constant variables
@macro cvindex{var}
@vindex \var\@r{ (constant)}
@vindex @r{Constant, }\var\
@end macro

@c Parameter variables
@macro pvindex{var}
@vindex \var\@r{ (parameter)}
@vindex @r{Parameter, }\var\
@end macro


@c Data Types index
@c ----------------

@c Packages
@macro pkgindex{name}
@tpindex \name\@r{ (package)}
@tpindex @r{Package, }\name\
@end macro

@c Systems
@macro sysindex{name}
@tpindex \name\@r{ (system)}
@tpindex @r{System, }\name\
@end macro

@c Classes
@macro clsindex{cls}
@tpindex \cls\@r{ (class)}
@tpindex @r{Class, }\cls\
@end macro

@c Conditions
@macro condindex{cond}
@tpindex \cond\@r{ (condition)}
@tpindex @r{Condition, }\cond\
@end macro

@c Warning subindex
@macro warnsubindex{cond}
@tpindex @r{Warning, }\cond\
@end macro

@c Error subindex
@macro errsubindex{cond}
@tpindex @r{Error, }\cond\
@end macro

@c Usage Error subindex
@macro usageerrsubindex{cond}
@tpindex @r{Usage error, }\cond\
@tpindex @r{Error, }\cond\
@tpindex @r{Error, usage, }\cond\
@end macro

@c Restarts
@macro restartindex{restart}
@tpindex \restart\@r{ (restart)}
@tpindex @r{Restart, }\restart\
@end macro



@c ====================================================================
@c Info Category and Directory
@c ====================================================================
@dircategory Common Lisp
@direntry
* TFM User: (tfm-user).             The TFM User Manual.
@end direntry



@c ====================================================================
@c Copying
@c ====================================================================
@copying
@quotation
Copyright @copyright{} @value{COPYRIGHT_YEARS} Didier Verna

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
section entitled ``Copying'' is included exactly as in the original.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be translated as well.
@end quotation
@end copying



@c ====================================================================
@c Title Page
@c ====================================================================
@titlepage
@title The TFM User Manual
@subtitle @TeX{} Font Metrics, Version @value{VERSION}
@author Didier Verna <@email{didier@@didierverna.net}>
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage



@c ====================================================================
@c Table of Contents
@c ====================================================================
@contents



@c ====================================================================
@c Master Menu
@c ====================================================================
@ifnottex
@node Top, Copying, (dir), (dir)
@top The TFM User Manual

This is the @tfm{} User Manual for @tfm{} version @value{VERSION}.

@menu
* Copying::                     The BSD license
* Introduction::                TFM at a glance
* Installation::                Library and documentation
* Normal Use::                  When everything goes well
* Abnormal Situations::         When something doesn't
* Other Considerations::        Miscellaneous
* Conclusion::                  That's all folks
* Supported Platforms::         Portability, dependencies, etc.
* Indexes::                     Concepts, functions, variables and data types
* Acknowledgments::             Hall of Pride
@end menu

@insertcopying
@end ifnottex



@c ====================================================================
@c Copying
@c ====================================================================
@node Copying, Introduction, Top, Top
@unnumbered Copying
@quotation
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@end quotation



@c ====================================================================
@c Introduction
@c ====================================================================
@node Introduction, Installation, Copying, Top
@chapter Introduction
TFM (for @TeX{} Font Metrics) is the standard font description format
used by @TeX{}. The @tfm{} library parses and decodes TFM files into an
abstract data structure, providing easy access to the corresponding font
information in Common Lisp.

This is the @tfm{} User Manual. @tfm{} also has a
@ifinfo
@ref{Top, , Reference Manual, tfm-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo



@c ====================================================================
@c Installation
@c ====================================================================
@node Installation, Normal Use, Introduction, Top
@chapter Installation
First of all, see @tfm{}'s
@uref{http://www.lrde.epita.fr/~didier/software/lisp/typesetting.php#tfm,,homepage}
for tarballs, Git repository and online documentation. @tfm{} is an ASDF
3 library. If you download a @tfm{} tarball, or clone the repository,
you need to unpack somewhere in the ASDF source registry. Otherwise,
@tfm{} is also available via @uref{http://www.quicklisp.org,,Quicklisp}.
@xref{Supported Platforms}, for more information on portability and
dependencies.

@sysindex{net.didierverna.tfm}
@tfm{}'s main system is called @samp{net.didierverna.tfm}. Depending on
your installation, you may thus either @code{asdf:load-system}, or
@code{ql:quickload} it in your Lisp image.

In addition to the Lisp library itself, the @tfm{} distribution offers
documentation in the form of 2 different manuals: the User Manual (you
are reading it) and the
@ifinfo
@ref{Top, , Reference Manual, tfm-reference}.
@end ifinfo
@ifhtml
@ref{Top, , Reference Manual, reference}.
@end ifhtml
@ifnotinfo
@ifnothtml
@ref{Top, , , reference, Reference Manual}.
@end ifnothtml
@end ifnotinfo
If you want to compile the manuals by yourself, please follow the
instructions below.
@enumerate
@item
Edit @file{make/config.make} to your specific needs.
@item
Type @command{make}. By default, the documentation is built in Info,
PDF, and HTML formats. If you want other formats (DVI and PostScript are
available), type @command{make all-formats}. You can also type
individually @command{make dvi} and/or @command{make ps} in order to get
the corresponding format.
@item
Type @command{make install} to install the documentation. If you have
compiled the documentation in DVI and PostScript format, those will be
installed as well.
@end enumerate

The reference manual's Texinfo source is included in the distribution
(and in the repository), although it is generated automatically by
@uref{https://www.lrde.epita.fr/~didier/software/lisp/typesetting.php#declt,,Declt}.
Before compiling, it is possible to regenerate a local version of it
with hyperlinks to your installation by typing @command{make localref}.
For this to work, you need SBCL and Declt though. If you ever need to
regenerate the regular version, you can also type @command{make
generate}.

Type @command{make uninstall} to uninstall the library.



@c ====================================================================
@c Normal Usage
@c ====================================================================
@node Normal Use, Abnormal Situations, Installation, Top
@chapter Normal Use
@pkgindex{net.didierverna.tfm}
@tfm{} itself resides in a package called @t{net.didierverna.tfm}. You
can automatically nickname this package with the following function.
@cindex Package, nicknames
@defun nickname-package [NICKNAME]
Add @var{NICKNAME} (@code{:tfm} by default) to the
@code{:net.didierverna.tfm} package.
@end defun

@menu
* TFM Files::                   Loading a font
* Font Information::            Global properties
* Character Information::       Code, box dimensions, etc.
* Ligatures and Kernings::      For pairs of characters
* Scaling and Freezing::        Limiting the cost of arithmetics
@end menu

@node TFM Files, Font Information, Normal Use, Normal Use
@section TFM Files
The main entry point to @tfm{} is @code{load-font}, the function which
allows you to load a @code{tfm} file in memory.
@defun load-font FILE
Load @var{FILE} into a new font, and return it.
@end defun

@var{FILE} must be a pathname designator. Currently, @tfm{} doesn't
support searching for TFM files in common or standard places (such as
@TeX{}Live installations), so you need to know where those files are
located, and provide a specific pathname.

@cindex TFM
@cindex Format, TFM
@cindex OFM
@cindex Format, OFM
@cindex JFM
@cindex Format, JFM
Some @code{tfm} files actually contain OFM or JFM data rather than just
plain TFM. @tfm{} is able to detect those extensions, but doesn't
currently support them. If OFM or JFM contents is detected,
@code{load-font} signals an @code{extended-tfm} warning, and returns
@nil{}.

@deftp {Warning} extended-tfm
@warnsubindex{extended-tfm}@c
Accessors:
@itemize
@item
@clsaindex{extended-tfm,file}@c
@code{file}: the argument to @code{load-font} (a pathname designator).
@item
@clsaindex{extended-tfm,value}@c
@code{value}: currently either @code{"OFM"} or @code{"JFM"}.
@end itemize
@end deftp

@cindex Font
Otherwise, if everything goes well (but see @ref{Abnormal Situations}),
the return value is an instance of some font class. In the context of
this library, the term ``font'' denotes such an instance.
@clsindex{font}@c
@clsindex{math-symbols-font}@c
@clsindex{math-extension-font}@c
There are currently three different font classes. The most general and
frequent one is simply called @code{font}. @TeX{}, however, recognizes
two special font categories for which the corresponding classes are
@code{math-symbols-font}, and @code{math-extension-font}. Both of these
classes are subclasses of @code{font}.


@node Font Information, Character Information, TFM Files, Normal Use
@section Font Information
General font information decoded from the TFM data can be individually
retrieved via a number of font accessors described below.
@itemize
@item
@clsaindex{font,name}@c
@code{name}: computed by @tfm{} as base name of the file the font was
loaded from (for example @code{"cmr10"}).
@item
@clsaindex{font,file}@c
@code{file}: the argument to @code{load-font}.
@item
@clsaindex{font,checksum}@c
@code{checksum}: part of the TFM format, provided by Metafont.
@item
@clsaindex{font,frozen}@c
@code{frozen}: whether the font is frozen (@pxref{Freezing}).
@item
@cindex @TeX{} point unit
@cindex Unit, @TeX{} point
@cindex Design size unit
@cindex Unit, design size
@clsaindex{font,design-size}@c
@code{design-size}: in units of @TeX{} point. For example, the design
size of @t{cmr10} (the Computer Modern 10pt roman font) is 10. Apart
from the @emph{slant} (see below), all other dimensions are given in
design size units, not @TeX{} point units (unless the font has been
frozen; @xref{Freezing}). See also @ref{Scaling} for ways to override
the font's original design size.
@item
@clsaindex{font,original-design-size}@c
@code{original-design-size}: the fon't original design size.
@end itemize

@tfm{} is able to decode Xerox PARC headers when provided (see @TeX{}
Font Metric Files, @i{David Fuchs, TUGboat Volume 2, n.1, pages 12--16}
and PLtoPF[9,10]). The following information is extracted from them, and
defaults to @nil{} otherwise. Note that when a header of sufficient
length is available, it is in fact impossible to tell for sure whether
it is a Xerox PARC one or not. @tfm{} simply assumes it is. As no other
kind of header has been encountered yet (and the whole @TeX{} Live
distribution has been tested), it is a pretty safe assumption. Finally,
if a header size is greater than that of a Xerox PARC one, @tfm{}
discards what's left of it.
@itemize
@item
@clsaindex{font,encoding}@c
@code{encoding}: the font's character coding scheme if known (an
informal BCPL string, that is, plain ASCII and no parentheses). The
class @tfm{} instantiates when loading a font depends on this string
(@pxref{TFM Files}), and in particular, on the specific (case
insensitive) values @code{"TeX math symbols"} and @code{"TeX math
extension"}.
@item
@clsaindex{font,family}@c
@code{family}: another BCPL string, if known (for example @code{"CMR"}).
@item
@clsaindex{font,7bits-safe}@c
@code{7bits-safe} 0 or 1 if known. When 1, it means that no character of
code lesser than 128 can lead to a character of code greater than 128 by
ways of ligatures or extension recipes.
@item
@clsaindex{font,face-number}@c
@code{face-number} a number identifying the font, if known.
@item
@clsaindex{font,weight}@c
@clsaindex{font,slope}@c
@clsaindex{font,expansion}@c
@clsaindex{font,face-code}@c
@code{weight}, @code{slope}, @code{expansion}, and @code{face-code}:
decoded from, and filled in when @code{face-number} is lesser than 18
(see also TFtoPL[10]). The weight is @kwd{medium}, @kwd{bold}, or
@kwd{light}. The slope is @kwd{roman} or @kwd{italic}. The expansion is
@kwd{regular}, @kwd{condensed}, or @kwd{extended}. Finally, the face
code is the concatenation of the upcased first letters of these values.
For example, @code{"MRR"} stands for ``medium roman regular''.
@end itemize

A font also contains a number of properties extracted from the so-called
``parameters'' section. They all default to 0.
@itemize @bullet
@item
@clsaindex{font,slant}@c
@code{slant}: a scalar ratio (not in design size units; that's the only
exception).
@item
@clsaindex{font,interword-space}@c
@clsaindex{font,interword-stretch}@c
@clsaindex{font,interword-shrink}@c
@code{interword-space}, @code{interword-stretch}, and
@code{interword-shrink}: the font's normal interword ``glue'' as three
separate values.
@item
@clsaindex{font,ex}@c
@clsaindex{font,em}@c
@code{em} and @code{ex}: @TeX{}'s usual font-dependent units.
@item
@clsaindex{font,extra-space}@c
@code{extra-space}: the font's additional space to put at the end of
sentences.
@end itemize

@TeX{} math symbols and extension fonts have respectively 15 and 6
additional parameters which are also accessible.
@itemize
@item
@clsindex{math-symbols-font}@c
@clsaindex{math-symbols-font,num1}@c
@clsaindex{math-symbols-font,num2}@c
@clsaindex{math-symbols-font,num3}@c
@clsaindex{math-symbols-font,denom1}@c
@clsaindex{math-symbols-font,denom2}@c
@clsaindex{math-symbols-font,sup1}@c
@clsaindex{math-symbols-font,sup2}@c
@clsaindex{math-symbols-font,sup3}@c
@clsaindex{math-symbols-font,sub1}@c
@clsaindex{math-symbols-font,sub2}@c
@clsaindex{math-symbols-font,subdrop}@c
@clsaindex{math-symbols-font,supdrop}@c
@clsaindex{math-symbols-font,delim1}@c
@clsaindex{math-symbols-font,delim2}@c
@clsaindex{math-symbols-font,axis-height}@c
@code{num1..3}, @code{denom1..2}, @code{sup1..3}, @code{sub1..2},
@code{subdrop}, @code{supdrop}, @code{delim1..2}, and @code{axis-height}
are available in the @code{math-symbols-font} subclass.
@item
@clsindex{math-extension-font}@c
@clsaindex{math-extension-font,default-rule-thickness}@c
@clsaindex{math-extension-font,big-op-spacing1}@c
@clsaindex{math-extension-font,big-op-spacing2}@c
@clsaindex{math-extension-font,big-op-spacing3}@c
@clsaindex{math-extension-font,big-op-spacing4}@c
@clsaindex{math-extension-font,big-op-spacing5}@c
@code{default-rule-thickness} and @code{big-op-spacing1..5} are
available in the @code{math-extension-font} subclass.
@end itemize

@clsaindex{font,parameters}@c
Finally, if the font has any parameters left, they are collected in an
array of numeric values, accessible via the @code{parameters} function.


@node Character Information, Ligatures and Kernings, Font Information, Normal Use
@section Character Information
@cindex Character code
A TFM font contains at most 256 characters, represented by numerical
codes (called @emph{character codes}). Some general information about
the font's characters is available through the following accessors.
@itemize
@item
@clsaindex{font,min-code}@c
@clsaindex{font,max-code}@c
@code{min-code} and @code{max-code}: respectively the smallest and
greatest character codes for this font.
@item
@clsaindex{font,character-count}@c
@code{character-count}: the number of characters defined in this font.
Note that some characters between @code{min-code} and @code{max-code}
may not be defined, so the character count may be smaller than
@emph{max-code - min-code + 1}. Also, the character count doesn't
include a potential boundary character (see below), unless it exists for
real in the font (it has non-zero metrics).
@item
@clsaindex{font,boundary-character}@c
@code{boundary-character}: the font's boundary character if defined, or
@nil{}. The boundary character is the only character the code of which
is allowed to be outside the @emph{[min-code,max-code]} range. If this
character doesn't exist for real in the font, it has zero metrics and is
not included in the character count.
@end itemize

The characters in a font are individually accessible by their code,
thanks to the following function (when this function returns @nil{}, it
means that no character is defined for the code in question).
@defun get-character CODE FONT
Return @var{FONT}'s @var{CODE} character, or @nil{}.
@end defun

@cindex Character
@clsindex{character-metrics}@c
This function actually returns an instance of a class called
@code{character-metrics}, which contains character-specific data. In the
context of this library, the term ``character'' denotes an instance of
this class. The following accessors return the different character
properties available.
@itemize
@item
@clsaindex{character-metrics,code}@c
@findex get-character
@code{code}: the character @code{code} which makes it accessible from
the font instance (see the function @code{get-character}).
@item
@clsaindex{character-metrics,font}@c
@code{font}: the font the character belongs to.
@item
@clsaindex{character-metrics,width}@c
@clsaindex{character-metrics,height}@c
@clsaindex{character-metrics,depth}@c
@code{width}, @code{height}, and @code{depth}: the character box
dimensions, in design size units (but see @ref{Freezing}).
@item
@clsaindex{character-metrics,italic-correction}@c
@code{italic-correction}: the character's italic correction, in design
size units (but see @ref{Freezing}). @TeX{} uses this value for regular
characters followed by the command @code{\/}, and also in math mode for
superscript placement.
@item
@cindex Character list
@clsaindex{character-metrics,next-character}@c
@code{next-character}: the next character in a character list, or
@nil{}. If non-@nil{}, this character is part of a chain of characters
of ascending size, and not the last one (see @TeX{}: the Program [544]).
It is mutually exclusive with the existence of an extension recipe (see
below), and also with the existence of a ligature or kerning program for
this character (@pxref{Ligatures and Kernings}).
@end itemize

@cindex Extensible character
@cindex Character, extensible
Some characters are said to be ``extensible'' (meaning that they are
constructed out of up to four components, themselves characters). To
test whether a character is extensible, use the following function.
@defun extensiblep CHARACTER
Return @code{T} if @var{CHARACTER} has an extension recipe.
@end defun
@clsaindex{character-metrics,top-character}@c
@clsaindex{character-metrics,middle-character}@c
@clsaindex{character-metrics,bottom-character}@c
@clsaindex{character-metrics,repeated-character}@c
When a character is extensible, the four components of the extension
recipe may be retrieved with the @code{top-}, @code{middle-},
@code{bottom-}, and @code{repeated-character} accessors. These functions
return a character, or @nil{} if the corresponding component isn't used
in the recipe. Note however that a repeated character always exists in
an extension recipe (so only the top, middle, and bottom characters may
be @nil{}).


@node Ligatures and Kernings, Scaling and Freezing, Character Information, Normal Use
@section Ligatures and Kernings
The TFM format encodes so called ``ligature / kerning programs'',
allowing font designers to specify particular spacing between
characters, or character replacements. Ligatures and kernings depend on
@emph{pairs} of characters. @tfm{} decodes this information and stores
it in a more accessible fashion.

@menu
* Kernings::                    Specific spacing
* Ligatures::                   Composite characters
@end menu

@node Kernings, Ligatures, Ligatures and Kernings, Ligatures and Kernings
@subsection Kernings
@cindex Kerning
In order to get kerning information for some pair of characters in a
font, use the following function.

@defun kerning CHARACTER1 CHARACTER2
Return kerning for @var{CHARACTER1} and @var{CHARACTER2}, or @nil{}.@*
Both characters must belong to the same font.
@end defun

The kerning, if it exists, is in design size units (but see
@ref{Freezing}).

@node Ligatures,  , Kernings, Ligatures and Kernings
@subsection Ligatures
@cindex Ligature
In order to get ligature information for some pair of characters in a
font, use the following function.

@defun ligature CHARACTER1 CHARACTER2
Return ligature for @var{CHARACTER1} and @var{CHARACTER2}, or @nil{}.@*
Both characters must belong to the same font.
@end defun

@clsindex{ligature}@c
Unless there's no such ligature, the value returned by this function is
an instance of a class called @code{ligature}. In the context of this
library, the term ``ligature'' denotes an instance of this class.

A ligature contains four bits of information accessible as described below.
@itemize
@item
@clsaindex{ligature,composite}@c
@code{composite}: the character to insert between the two original ones.
@item
@clsaindex{ligature,delete-before}@c
@clsaindex{ligature,delete-after}@c
@code{delete-before} and @code{delete-after}: whether to delete the
characters before and after the composite.
@item
@clsaindex{ligature,pass-over}@c
@code{pass-over}: the number of characters to skip in order to reach the
next one, once the ligature has been made.
@end itemize


@node Scaling and Freezing,  , Ligatures and Kernings, Normal Use
@section Scaling and Freezing
As we have seen, all dimensions in a TFM file are expressed in design
size units. The idea is to make it simple for @TeX{} to scale a font.
Indeed, when a @TeX{} user does @code{\font\foo=cmr10 at 12pt} or
@code{\font\foo=cmr10 scaled 1200}, all @TeX{} has to do is change the
font's design size. The drawback, on the other hand, is that in order to
actually use the various font dimensions, they need to be multiplied by
the design size in question every time.

@menu
* Scaling::                     Changing the design size
* Freezing::                    Converting dimensions in TeX point units
@end menu

@node Scaling, Freezing, Scaling and Freezing, Scaling and Freezing
@subsection Scaling
@cindex Font scaling
@cindex Scaling
@fkindex{load-font,design-size}@c
@clsaindex{font,design-size}@c
@tfm{} allows you to modify the design size of a font in two different
ways. The first option is to override the original design size at
load-time, by calling @code{load-font} with the @kwd{design-size} key.
For example, @code{(load-font "cmr10.tfm" :design-size 12)} will load
the 10pt Computer Modern roman font at a design size of 12pt. The other
option is to change the design size of a font later on, simply by using
the @code{design-size} writer, for example like this: @code{(setf
(design-size font) 12)}.

@clsaindex{font,original-design-size}@c
Note that you can always revert the font to the original design size,
since that value is remembered (@pxref{Font Information}).

In any case, the design size must in principle be expressed in @TeX{}
point units, and must be greater or equal to 1. One exception to this
rule is if you are @emph{not} working with @TeX{} points. In such a
situation, you could probably hack your own custom design size in, to
express the font's various metrics in another unit of measurement.

@node Freezing,  , Scaling, Scaling and Freezing
@subsection Freezing
@cindex Font freezing
@cindex Freezing
If you want to save some arithmetic operations, you may want to
@emph{freeze} the font. Freezing means that all dimensions normally
expressed in design size units will be converted to @TeX{} point units
once and for all (by multiplying them by the design size in question).
This includes character metrics, kerns, interword space @etc{}
Everything. That way, you won't have to do the multiplication by
yourself every time a dimension is accessed.

@fkindex{load-font,freeze}@c
Again, there are two ways to freeze a font. The first option is to do it
at load-time, by calling @code{load-font} with the @kwd{freeze} key (a
Boolean). For instance, after calling @code{(load-font "cmr10.tfm"
:design-size 12 :freeze t)}, @code{(em font)} will return 12.000034
instead of 1.0000029.

The other way to freeze a font is to do it later on, by using the
@code{freeze} function.
@defun freeze FONT
Freeze @var{FONT}.

Freezing a font means that all dimensions normally expressed in design size
units are multiplied by it, so as to lead values in @TeX{} point units.
If @var{FONT} is already frozen, this function does nothing and returns
@nil{}. Otherwise, it returns @code{t}.
@end defun

You can unfreeze a font at any time with the following function.
@defun unfreeze FONT
Unfreeze @var{FONT}.

Unfreezing means performing the inverse of what @code{freeze} does.
If @var{FONT} is not frozen, this function does nothing and returns
@nil{}. Otherwise, it returns @code{t}.
@end defun

Finally, note that if you change the design size of a frozen font, the
font remains frozen and all concerned dimensions are updated to reflect
the change.



@c ====================================================================
@c Abnormal Situations
@c ====================================================================
@node Abnormal Situations, Other Considerations, Normal Use, Top
@chapter Abnormal Situations
@tindex extended-tfm
@warnsubindex{extended-tfm}@c
We already mentioned the @code{extended-tfm} warning in @ref{TFM Files}.
In fact, @tfm{} comes with a rich ontology of conditions (and restarts)
that give you full control on the behavior to adopt when facing abnormal
situations.

@menu
* Conditions Overview::         The root conditions hierarchy
* Erroneous Usage::             Misuse of the public API
* TFM Compliance Problems::     Adherence to the TFM format
@end menu

@node Conditions Overview, Erroneous Usage, Abnormal Situations, Abnormal Situations
@section Conditions Overview
All @tfm{} conditions are grounded in a root hierarchy that could be
used, for instance if you want to catch more or less everything without
too much detail.

@condindex{tfm}@c
@condindex{tfm-warning}@c
@condindex{tfm-error}@c
@condindex{tfm-compliance}@c
@condindex{tfm-usage}@c
The root of all @tfm{} conditions is simply called @code{tfm}. Warnings
and errors are all sub-conditions of @code{tfm-warning} and
@code{tfm-error} respectively. Then, there are two main categories of
conditions. Conditions related to a misuse of the library's API are
classified under the @code{tfm-usage} hierarchy, while those related to
problems with the TFM format are found under the @code{tfm-compliance}
one.

@condindex{tfm-usage-warning}@c
@condindex{tfm-usage-error}@c
@condindex{tfm-compliance-warning}@c
@condindex{tfm-compliance-error}@c
Finally, the warning/error and usage/compliance families are mixed
together (via multiple inheritance) to produce the four last
``abstract'' conditions from which all other derive (except for the
already mentioned @code{extended-tfm} warning):
@code{tfm-usage-warning}, and @code{tfm-usage-error},
@code{tfm-compliance-warning}, and @code{tfm-compliance-error}.


@node Erroneous Usage, TFM Compliance Problems, Conditions Overview, Abnormal Situations
@section Erroneous Usage
Because the @tfm{}'s public API is so small, there are only two usage
conditions, so we'll start with those ones. Neither of these conditions
is restartable at the level of @tfm{}.

@c #### NOTE: we don't currently describe the anonymous-font error
@c because there's no way to make an anonymous font from the public API
@c right now.

@clsaindex{character-metrics,top-character}@c
@clsaindex{character-metrics,middle-character}@c
@clsaindex{character-metrics,bottom-character}@c
@clsaindex{character-metrics,repeated-character}@c
@findex extensiblep
An attempt at accessing the top, middle, bottom, or repeated character
of a non extensible character will signal a @code{not-extensible} usage
error. Remember that you can check a character's extensibility with the
@code{extensiblep} predicate.
@deftp {Usage Error} not-extensible
@usageerrsubindex{not-extensible}
Accessor:
@itemize
@item
@clsaindex{not-extensible,value}@c
@code{value}: the character being accessed.
@end itemize
@end deftp

@findex ligature
@findex kerning
An attempt at retrieving a ligature or kerning for two characters from
different fonts will signal a @code{different-fonts} usage error.
@deftp {Usage Error} different-fonts
@usageerrsubindex{different-fonts}
Accessors:
@itemize
@item
@clsaindex{different-fonts,character1}@c
@clsaindex{different-fonts,character2}@c
@code{character1} and @code{character2}: the two characters involved.
@end itemize
@end deftp

Finally, an attempt at changing the design size of a font to something
that is not a real greater or equal to 1 will just signal a type error.


@node TFM Compliance Problems,  , Erroneous Usage, Abnormal Situations
@section TFM Compliance Problems
@tfm{} is very thorough in the checks it performs while reading TFM
data, to the point that it could probably be used as a validation tool.
Every compliance problem detected will be signalled with a warning or an
error, depending on the seriousness of the problem (in fact, only two
compliance conditions are warnings currently; all others being errors).
At the same time, @tfm{} also tries to offer a way out of problematic
situations (in the form of restarts, currently non-interactive), when it
sounds reasonable. This means that it is almost always possible to load
a font, however broken it may be.

@restartindex{cancel-loading}@c
@findex load-font
When loading a file, a restart named @code{cancel-loading} is always
active. If invoked, @code{load-font} will just abort and return @nil{}.
Otherwise, the available restarts depend on the dynamic context and the
particular condition being signalled. The graph on the next page depicts
the conditions / restarts ontology related to compliance problems@c
@ifinfo
 (warning: depending on your info reader, the graph may or may not be
actually visible)@c
@end ifinfo
. Green boxes denote warnings, red ones denote errors, and blue
ellipses denote restarts. By following a branch from left to right in
this graph, you get an idea of which restarts are available when a
specific condition is signalled. They are ordered by decreasing
proximity to the signalling code (or, to put it differently, by
increasing level of abstraction). The conditions in this graph are
described precisely in @refref{Exported conditions}. The restarts, on
the other hand, are not, but their names should be self-explanatory.
Note that a branch in this graph does not necessarily correspond to a
specific code path in the library. Different code paths may have
different restarts with the same name when it makes sense, but eponymous
restarts are ``merged'' into a single node in the graph.

@fkindex{load-font,design-size}@c
One particular case deserves some additional bits of information though.
You will notice the existence of both an @code{invalid-design-size}
@emph{error}, and an @code{invalid-original-design-size} @emph{warning}.
Remember that these do not concern user-provided design sizes, which may
only trigger a type error (@pxref{Erroneous Usage}). In the default
case, the @code{invalid-design-size} error is signalled when a TFM file
is not compliant. If, however, you have call @code{load-font} with an
alternative @kwd{design-size}, you are effectively overriding the
original value, which will not be used. In that case, only a warning
is signalled: the @code{invalid-original-design-size} warning. Finally,
please consider that leaving that warning alone means that an invalid
original design size will be kept around in the font, so if you plan on
using it later on, you're looking for trouble.

@page
@ifinfo
@center @image{tfm-user-data/conditions}
@end ifinfo
@ifnotinfo
@center @image{conditions,16cm}
@end ifnotinfo


@c ====================================================================
@c Other Considerations
@c ====================================================================
@node Other Considerations, Conclusion, Abnormal Situations, Top
@chapter Other Considerations
This section contains marginal or meta-information, orthogonal to the
library's main purpose.

@menu
* Configuration::               Preload parameters
* Version Numbering::           In case you need to conditionalize
@end menu


@c -------------
@c Configuration
@c -------------
@node Configuration, Version Numbering, Other Considerations, Other Considerations
@section Configuration
@cindex Configuration
@sysindex{net.didierverna.tfm.setup}@c
@pkgindex{net.didierverna.tfm.setup}@c
Some aspects of @tfm{}'s behavior can be configured @emph{before} the
library system is actually loaded. @tfm{} stores its user-level
configuration (along with some other setup parameters) in another ASDF
system called @samp{net.didierverna.tfm.setup} (and the eponymous
package). In order to configure the library (I repeat, prior to loading
it), you will typically do something like this:
@verbatim
(require "asdf")
(asdf:load-system :net.didierverna.tfm.setup)
(net.didierverna.tfm.setup:configure <option> <value>)
@end verbatim

@defun configure KEY VALUE
Set @var{KEY} to @var{VALUE} in the current @tfm{} configuration.
@end defun

Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
@defun configuration KEY
Return @var{KEY}'s value in the current @tfm{} configuration.
@end defun

Currently, the following options are provided.
@table @t
@item :swank-eval-in-emacs
@coindex{swank-eval-in-emacs}
@vindex slime-enable-evaluate-in-emacs
This option is only useful if you use Slime, and mostly if you plan on
hacking @tfm{} itself. The library provides indentation information for
some of its functions directly embedded in the code. This information
can be automatically transmitted to Emacs when the ASDF system is loaded
if you set this option to @code{t}. However, note that for this to work,
the Slime variable @code{slime-enable-evaluate-in-emacs} must also be
set to @code{t} in your Emacs session. If you're interested to know how
this process works, I have described it a
@uref{http://www.didierverna.net/blog/index.php?post/2011/07/20/One-more-indentation-hack,,Blog entry}.
@end table


@c -----------------
@c Version Numbering
@c -----------------
@node Version Numbering,  , Configuration, Other Considerations
@section Version Numbering
As @tfm{} evolves over time, you might one day feel the need for
conditionalizing your code on the version of the library.

The first thing you can do to access the current version number of
@tfm{} is use the @code{version} function.

@defun version &optional (TYPE :number)
Return the current version number of @tfm{}. @var{TYPE} can be one of
@code{:number}, @code{:short} or @code{:long}. For @code{:number}, the
returned value is a fixnum. Otherwise, it is a string.
@end defun

A @tfm{} version is characterized by 4 elements as described below.
@itemize
@item
@pvindex{*release-major-level*}
A major version number stored in the parameter
@code{*release-major-level*}.
@item
@pvindex{*release-minor-level*}
A minor version number, stored in the parameter
@code{*release-minor-level*}.
@item
@pvindex{*release-status*}
A release status stored in the parameter @code{*release-status*}. The
status of a release can be @code{:alpha}, @code{:beta}, @code{:rc}
(standing for ``release candidate'') or @code{:patchlevel}. These are in
effect 4 levels of expected stability.
@item
@pvindex{*release-status-level*}
A status-specific version number stored in the parameter
@code{*release-status-level*}. Status levels start at 1 (alpha 1, beta 1
and release candidate 1) except for stable versions, in which case patch
levels start at 0 (@eg{} 2.4.0).
@end itemize

@pvindex{*release-name*}
In addition to that, each version of @tfm{} (in the sense
@emph{major.minor}, regardless of the status) has a name, stored in the
parameter @code{*release-name*}. The general naming theme for @tfm{}
is ``Uncial Fonts'', from the
@uref{https://www.tug.org/FontCatalogue/uncialfonts.html,,@LaTeX{} Font
Catalogue}.

Here is how the @code{version} function computes its value.
@itemize
@item
A version @code{:number} is computed as @emph{major * 10000 + minor *
100 + patchlevel}, effectively leaving two digits for each level. Note
that alpha, beta and release candidate status are ignored in version
numbers (this is as if the corresponding status level was considered to
be always 0). Only stable releases have their level taken into account.
@item
A @code{:short} version will appear like this for unstable releases:
1.3a4, 2.5b8 or 4.2rc1. Remember that alpha, beta or release candidate
levels start at 1. Patchlevels for stable releases start at 0 but 0 is
ignored in the output. So for instance, version 4.3.2 will appear as-is,
while version 1.3.0 will appear as just 1.3.
@item
A @code{:long} version is expanded from the short one, and includes the
release name. For instance, 1.3 alpha 4 "Artificial Uncial", 2.5 beta 8
"Rotunda", 4.2 release candidate 1 "Romantic Rustic" or 4.3.2 "Square
Capitals". As for the short version, a patchlevel of 0 is ignored in the
output: 1.3 "Artificial Uncial".
@end itemize

@vindex *copyright-years*
Incidentally, but you will probably never need to use it, @tfm{} also
exports a variable named @code{*copyright-years*}, which, as its name
suggests, is a string denoting the copyright years for the whole
project.



@c ====================================================================
@c Conclusion
@c ====================================================================
@node Conclusion, Supported Platforms, Other Considerations, Top
@chapter Conclusion
So that's it I guess. You know all about @tfm{} now. Thanks for reading.
Apart from that, I don't really have a conclusion.



@c ====================================================================
@c Supported Platforms
@c ====================================================================
@node Supported Platforms, Indexes, Conclusion, Top
@appendix Supported Platforms
@sysindex{editor-hints.named-readtables}
@tfm{} is an ASDF 3 library. It requires
@code{editor-hints.named-readtables}.



@c ====================================================================
@c Indexes
@c ====================================================================
@node Indexes, Acknowledgments, Supported Platforms, Top
@appendix Indexes

@menu
* Concept Index::               Well, the concept index
* Function Index::              Well, the function index
* Variable Index::              Well, the variable index
* Data Type Index::             Well, the data type index
@end menu


@c --------------
@c Concept Index
@c --------------
@node Concept Index, Function Index, Indexes, Indexes
@section Concepts
@printindex cp
@page


@c --------------
@c Function Index
@c --------------
@node Function Index, Variable Index, Concept Index, Indexes
@section Functions
@printindex fn
@page


@c --------------
@c Variable Index
@c --------------
@node Variable Index, Data Type Index, Function Index, Indexes
@section Variables
@printindex vr
@page


@c ---------------
@c Data Type Index
@c ---------------
@node Data Type Index,  , Variable Index, Indexes
@section Data Types
@printindex tp



@c ====================================================================
@c Acknowledgments
@c ====================================================================
@node Acknowledgments,  , Indexes, Top
@appendix Acknowledgments
The following people have contributed to @tfm{} in the form of bug
reports or fixes, suggestions, expertise, or whatever else. Thank you!

@multitable @columnfractions .99
@item Doug McKenna
@item Hironobu Yamashita
@item Karl Berry
@end multitable


@bye

@c Local Variables:
@c TeX-master: t
@c End:

@c user.texi ends here
