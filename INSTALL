
2 Installation
**************

First of all, see TFM’s homepage for tarballs, Git repository and online
documentation.  TFM is an ASDF 3 library.  If you download a TFM
tarball, or clone the repository, you need to unpack somewhere in the
ASDF source registry.  Otherwise, TFM is also available via Quicklisp.
*Note Supported Platforms::, for more information on portability and
dependencies.

   TFM’s main system is called ‘net.didierverna.tfm’.  Depending on your
installation, you may thus either ‘asdf:load-system’, or ‘ql:quickload’
it in your Lisp image.

   In addition to the Lisp library itself, the TFM distribution offers
documentation in the form of 2 different manuals: the User Manual (you
are reading it) and the *note Reference Manual: (tfm-reference)Top.  If
you want to compile the manuals by yourself, please follow the
instructions below.
  1. Edit ‘make/config.make’ to your specific needs.
  2. Type ‘make’.  By default, the documentation is built in info, PDF
     and HTML formats.  If you want other formats (DVI and PostScript
     are available), type ‘make all-formats’.  You can also type
     individually ‘make dvi’ and/or ‘make ps’ in order to get the
     corresponding format.
  3. Type ‘make install’ to install the documentation.  If you have
     compiled the documentation in DVI and PostScript format, those will
     be installed as well.

   The reference manual’s Texinfo source is included in the distribution
(and in the repository), although it is generated automatically by
Declt.  Before compiling, it is possible to regenerate a local version
of it with hyperlinks to your installation by typing ‘make localref’.
For this to work, you need SBCL and Declt though.  If you ever need to
regenerate the regular version, you can also type ‘make generate’.

   Type ‘make uninstall’ to uninstall the library.


5.1 Configuration
=================

Some aspects of TFM’s behavior can be configured _before_ the library
system is actually loaded.  TFM stores its user-level configuration
(along with some other setup parameters) in another ASDF system called
‘net.didierverna.tfm.setup’ (and the eponymous package).  In order to
configure the library (I repeat, prior to loading it), you will
typically do something like this:
(require "asdf")
(asdf:load-system :net.didierverna.tfm.setup)
(net.didierverna.tfm.setup:configure <option> <value>)

 -- Function: configure KEY VALUE
     Set KEY to VALUE in the current TFM configuration.

   Out of curiosity, you can also inquire the current configuration for
specific options with the following function.
 -- Function: configuration KEY
     Return KEY’s value in the current TFM configuration.

   Currently, the following options are provided.
:swank-eval-in-emacs
     This option is only useful if you use Slime, and mostly if you plan
     on hacking TFM itself.  The library provides indentation
     information for some of its functions directly embedded in the
     code.  This information can be automatically transmitted to Emacs
     when the ASDF system is loaded if you set this option to ‘t’.
     However, note that for this to work, the Slime variable
     ‘slime-enable-evaluate-in-emacs’ must also be set to ‘t’ in your
     Emacs session.  If you’re interested to know how this process
     works, I have described it a Blog entry.


Appendix A Supported Platforms
******************************

TFM is an ASDF 3 library.  It requires ‘editor-hints.named-readtables’.

